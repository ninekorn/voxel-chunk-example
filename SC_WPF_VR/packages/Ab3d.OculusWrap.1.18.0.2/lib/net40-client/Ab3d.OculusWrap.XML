<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Ab3d.OculusWrap</name>
    </assembly>
    <members>
        <member name="T:Ab3d.OculusWrap.BoundaryLookAndFeel">
            <summary>	
            Boundary system look and feel
            </summary>	
        </member>
        <member name="F:Ab3d.OculusWrap.BoundaryLookAndFeel.Color">
            <summary>	
            Boundary color (alpha channel is ignored)
            </summary>	
        </member>
        <member name="T:Ab3d.OculusWrap.BoundaryTestResult">
            <summary>	
            Provides boundary test information
            </summary>	
        </member>
        <member name="F:Ab3d.OculusWrap.BoundaryTestResult.IsTriggering">
            <summary>	
            True if the boundary system is being triggered. Note that due to fade in/out effects this may not exactly match visibility.
            </summary>	
        </member>
        <member name="F:Ab3d.OculusWrap.BoundaryTestResult.ClosestDistance">
            <summary>	
            Distance to the closest play area or outer boundary surface.
            </summary>	
        </member>
        <member name="F:Ab3d.OculusWrap.BoundaryTestResult.ClosestPoint">
            <summary>	
            Closest point on the boundary surface.
            </summary>	
        </member>
        <member name="F:Ab3d.OculusWrap.BoundaryTestResult.ClosestPointNormal">
            <summary>	
            Unit surface normal of the closest boundary surface.
            </summary>	
        </member>
        <member name="T:Ab3d.OculusWrap.BoundaryType">
            <summary>	
            Boundary types that specified while using the boundary system
            </summary>	        
        </member>
        <member name="F:Ab3d.OculusWrap.BoundaryType.Outer">
            <summary>
            Outer boundary - closely represents user setup walls
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.BoundaryType.PlayArea">
            <summary>
            Play area - safe rectangular area inside outer boundary which can optionally be used to restrict user interactions and motion. 
            </summary>
        </member>
        <member name="T:Ab3d.OculusWrap.Button">
            <summary>
            Describes button input types.
            Button inputs are combined; that is they will be reported as pressed if they are 
            pressed on either one of the two devices.
            The ovrButton_Up/Down/Left/Right map to both XBox D-Pad and directional buttons.
            The ovrButton_Enter and ovrButton_Return map to Start and Back controller buttons, respectively.
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.Button.A">
            <summary>
            A
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.Button.B">
            <summary>
            B
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.Button.RThumb">
            <summary>
            RThumb
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.Button.RShoulder">
            <summary>
            RShoulder
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.Button.RMask">
            <summary>
            Bit mask of all buttons on the right Touch controller
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.Button.X">
            <summary>
            X
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.Button.Y">
            <summary>
            Y
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.Button.LThumb">
            <summary>
            LThumb
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.Button.LShoulder">
            <summary>
            LShoulder
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.Button.LMask">
            <summary>
            Bit mask of all buttons on the left Touch controller
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.Button.Up">
            <summary>
            DPad Up
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.Button.Down">
            <summary>
            DPad Down
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.Button.Left">
            <summary>
            DPad Left
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.Button.Right">
            <summary>
            DPad Right
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.Button.Enter">
            <summary>
            Start on XBox controller.
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.Button.Back">
            <summary>
            Back on Xbox controller.
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.Button.VolUp">
            <summary>
            Volume button on Oculus Remote. Not present on XBox or Touch controllers.
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.Button.VolDown">
            <summary>
            Volume button on Oculus Remote. Not present on XBox or Touch controllers.
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.Button.Home">
            <summary>
            Home button on XBox controllers. Oculus button on Touch controllers and Oculus Remote.
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.Button.Private">
            <summary>
            Bit mask of all buttons that are for private usage by Oculus
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.CameraExtrinsics.LastChangedTimeSeconds">
            <summary>
            Time in seconds from last change to the parameters.
            For instance, if the pose changes, or a camera exposure happens, this struct will be updated.
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.CameraExtrinsics.CameraStatusFlags">
            <summary>
            Current Status of the camera, a mix of bits from ovrCameraStatusFlags
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.CameraExtrinsics.AttachedToDevice">
            <summary>
            Which Tracked device, if any, is the camera rigidly attached to
            If set to ovrTrackedDevice_None, then the camera is not attached to a tracked object.
            If the external camera moves while unattached (i.e. set to ovrTrackedDevice_None), its Pose
            won't be updated
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.CameraExtrinsics.RelativePose">
            <summary>
            The relative Pose of the External Camera.
            If AttachedToDevice is ovrTrackedDevice_None, then this is a absolute pose in tracking space
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.CameraExtrinsics.LastExposureTimeSeconds">
            <summary>
            The time, in seconds, when the last successful exposure was taken
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.CameraExtrinsics.ExposureLatencySeconds">
            <summary>
            Estimated exposure latency to get from the exposure time to the system
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.CameraExtrinsics.AdditionalLatencySeconds">
            <summary>
            Additional latency to get from the exposure time of the real camera to match the render time
            of the virtual camera
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.CameraStatusFlags.None">
            <summary>
            Initial state of camera
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.CameraStatusFlags.Connected">
            <summary>
            Bit set when the camera is connected to the system
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.CameraStatusFlags.Calibrating">
            <summary>
            Bit set when the camera is undergoing calibration
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.CameraStatusFlags.CalibrationFailed">
            <summary>
            Bit set when the camera has tried and failed calibration
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.CameraStatusFlags.Calibrated">
            <summary>
            Bit set when the camera has tried and passed calibration
            </summary>
        </member>
        <member name="T:Ab3d.OculusWrap.Colorf">
            <summary>
            A RGBA color with normalized float components.
            </summary>
        </member>
        <member name="M:Ab3d.OculusWrap.Colorf.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Constructor
            </summary>
            <param name="r">r</param>
            <param name="g">g</param>
            <param name="b">b</param>
            <param name="a">a</param>
        </member>
        <member name="F:Ab3d.OculusWrap.Colorf.R">
            <summary>
            R
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.Colorf.G">
            <summary>
            G
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.Colorf.B">
            <summary>
            B
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.Colorf.A">
            <summary>
            A
            </summary>
        </member>
        <member name="T:Ab3d.OculusWrap.ControllerType">
            <summary>
            Specifies which controller is connected; multiple can be connected at once.
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.ControllerType.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.ControllerType.LTouch">
            <summary>
            LTouch
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.ControllerType.RTouch">
            <summary>
            RTouch
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.ControllerType.Touch">
            <summary>
            Touch
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.ControllerType.Remote">
            <summary>
            Remote
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.ControllerType.XBox">
            <summary>
            XBox
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.ControllerType.Active">
            <summary>Operate on or query whichever controller is active.Operate on or query whichever controller is active.
            </summary>
        </member>
        <member name="T:Ab3d.OculusWrap.DebugHudStereoMode">
             <summary>
             Debug HUD is provided to help developers gauge and debug the fidelity of their app's
             stereo rendering characteristics. Using the provided quad and crosshair guides, 
             the developer can verify various aspects such as VR tracking units (e.g. meters),
             stereo camera-parallax properties (e.g. making sure objects at infinity are rendered
             with the proper separation), measuring VR geometry sizes and distances and more.
            
             The app can modify the visual properties of the stereo guide (i.e. quad, crosshair)
             using the ovr_SetFloatArray function. For a list of tweakable properties,
             see the OVR_DEBUG_HUD_STEREO_GUIDE_* keys in the OVR_CAPI_Keys.h header file.
             </summary>
             <example>
             ovrDebugHudStereoMode DebugHudMode = ovrDebugHudStereo.QuadWithCrosshair;
             ovr_SetInt(Hmd, OVR_DEBUG_HUD_STEREO_MODE, (int)DebugHudMode);
             </example>
        </member>
        <member name="F:Ab3d.OculusWrap.DebugHudStereoMode.Off">
            <summary>
            Turns off the Stereo Debug HUD
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.DebugHudStereoMode.Quad">
            <summary>
            Renders Quad in world for Stereo Debugging
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.DebugHudStereoMode.QuadWithCrosshair">
            <summary>
            Renders Quad+crosshair in world for Stereo Debugging
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.DebugHudStereoMode.CrosshairAtInfinity">
            <summary>
            Renders screen-space crosshair at infinity for Stereo Debugging
            </summary>
        </member>
        <member name="T:Ab3d.OculusWrap.DetectResult">
            <summary>
            Return values for ovr_Detect.
            </summary>
            <see cref="M:Ab3d.OculusWrap.OvrWrap.Detect(System.Int32)"/>
        </member>
        <member name="P:Ab3d.OculusWrap.DetectResult.IsOculusServiceRunning">
            <summary>
            Is False when the Oculus Service is not running.
              This means that the Oculus Service is either uninstalled or stopped.
              IsOculusHMDConnected will be ovrFalse in this case.
            Is True when the Oculus Service is running.
              This means that the Oculus Service is installed and running.
              IsOculusHMDConnected will reflect the state of the HMD.
            </summary>
        </member>
        <member name="P:Ab3d.OculusWrap.DetectResult.IsOculusHMDConnected">
            <summary>
            Is False when an Oculus HMD is not detected.
              If the Oculus Service is not running, this will be ovrFalse.
            Is True when an Oculus HMD is detected.
              This implies that the Oculus Service is also installed and running.
            </summary>
        </member>
        <member name="T:Ab3d.OculusWrap.ErrorInfo">
            <summary>
            Provides information about the last error.
            </summary>
            <remarks>
            See ovr_GetLastErrorInfo.
            </remarks>
        </member>
        <member name="F:Ab3d.OculusWrap.ErrorInfo.Result">
            <summary>
            The result from the last API call that generated an error ovrResult.
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.ErrorInfo.ErrorString">
            <summary>
            A UTF8-encoded null-terminated English string describing the problem. 
            The format of this string is subject to change in future versions.
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.ExternalCamera.NameBytes">
            <summary>
            Byte array for camera Name string
            </summary>
        </member>
        <member name="P:Ab3d.OculusWrap.ExternalCamera.Name">
            <summary>
            Camera Name
            </summary>
        </member>
        <member name="T:Ab3d.OculusWrap.EyeRenderDesc">
            <summary>
            Rendering information for each eye. Computed by ovr_GetRenderDesc() based on the
            specified FOV. Note that the rendering viewport is not included
            here as it can be specified separately and modified per frame by
            passing different Viewport values in the layer structure.
            </summary>
            <see cref="M:Ab3d.OculusWrap.OvrWrap.GetRenderDesc(System.IntPtr,Ab3d.OculusWrap.EyeType,Ab3d.OculusWrap.FovPort)"/>
        </member>
        <member name="F:Ab3d.OculusWrap.EyeRenderDesc.Eye">
            <summary>
            The eye index to which this instance corresponds.
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.EyeRenderDesc.Fov">
            <summary>
            The field of view.
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.EyeRenderDesc.DistortedViewport">
            <summary>
            Distortion viewport.
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.EyeRenderDesc.PixelsPerTanAngleAtCenter">
            <summary>
            How many display pixels will fit in tan(angle) = 1.
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.EyeRenderDesc.HmdToEyePose">
            <summary>
            Transform of eye from the HMD center, in meters.
            </summary>
        </member>
        <member name="T:Ab3d.OculusWrap.EyeType">
            <summary>
            Specifies which eye is being used for rendering.
            This type explicitly does not include a third "NoStereo" option, as such is
            not required for an HMD-centered API.
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.EyeType.Left">
            <summary>
            Left
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.EyeType.Right">
            <summary>
            Right
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.EyeType.Count">
            <summary>
            Count
            </summary>
        </member>
        <member name="T:Ab3d.OculusWrap.FovPort">
            <summary>
            Field Of View (FOV) in tangent of the angle units.
            As an example, for a standard 90 degree vertical FOV, we would 
            have: { UpTan = tan(90 degrees / 2), DownTan = tan(90 degrees / 2) }.
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.FovPort.UpTan">
            Tangent of the angle between the viewing vector and the top edge of the field of view.
        </member>
        <member name="F:Ab3d.OculusWrap.FovPort.DownTan">
            Tangent of the angle between the viewing vector and the bottom edge of the field of view.
        </member>
        <member name="F:Ab3d.OculusWrap.FovPort.LeftTan">
            Tangent of the angle between the viewing vector and the left edge of the field of view.
        </member>
        <member name="F:Ab3d.OculusWrap.FovPort.RightTan">
            Tangent of the angle between the viewing vector and the right edge of the field of view.
        </member>
        <member name="T:Ab3d.OculusWrap.GraphicsLuid">
            <summary>
            GraphicsLuid
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.GraphicsLuid.Reserved">
            <summary>
            Public definition reserves space for graphics API-specific implementation 
            </summary>
        </member>
        <member name="T:Ab3d.OculusWrap.HandType">
            <summary>
            Provides names for the left and right hand array indexes.
            </summary>
            <see cref="T:Ab3d.OculusWrap.InputState"/>
            <seealso cref="T:Ab3d.OculusWrap.TrackingState"/>
        </member>
        <member name="F:Ab3d.OculusWrap.HandType.Left">
            <summary>
            Left
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.HandType.Right">
            <summary>
            Right
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.HandType.Count">
            <summary>
            Count
            </summary>
        </member>
        <member name="T:Ab3d.OculusWrap.HapticsBuffer">
            <summary>	
            Haptics buffer descriptor, contains amplitude samples used for Touch vibration	
            </summary>	
        </member>
        <member name="F:Ab3d.OculusWrap.HapticsBuffer.Samples">
            <summary>	
            Samples stored in opaque format
            </summary>	
        </member>
        <member name="F:Ab3d.OculusWrap.HapticsBuffer.SamplesCount">
            <summary>	
            Number of samples (up to OvrWrap.OVR_HAPTICS_BUFFER_SAMPLES_MAX)
            </summary>	
        </member>
        <member name="F:Ab3d.OculusWrap.HapticsBuffer.SubmitMode">
            <summary>	
            How samples are submitted to the hardware
            </summary>	
        </member>
        <member name="T:Ab3d.OculusWrap.HapticsBufferSubmitMode">
            <summary>	
            Haptics buffer submit mode
            </summary>	
        </member>
        <member name="F:Ab3d.OculusWrap.HapticsBufferSubmitMode.Enqueue">
            <summary>	
            Enqueue buffer for later playback	
            </summary>	
        </member>
        <member name="T:Ab3d.OculusWrap.HapticsPlaybackState">
            <summary>	
            State of the Haptics playback for Touch vibration
            </summary>	
        </member>
        <member name="F:Ab3d.OculusWrap.HapticsPlaybackState.RemainingQueueSpace">
            <summary>	
            Remaining space available to queue more samples
            </summary>	
        </member>
        <member name="F:Ab3d.OculusWrap.HapticsPlaybackState.SamplesQueued">
            <summary>	
            Number of samples currently queued
            </summary>	
        </member>
        <member name="T:Ab3d.OculusWrap.HmdCaps">
            <summary>
            HMD capability bits reported by device.
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.HmdCaps.None">
            <summary>
            No flags.
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.HmdCaps.DebugDevice">
            <summary>
            Means HMD device is a virtual debug device.
            </summary>
            <remarks>
            (read only) 
            </remarks>
        </member>
        <member name="T:Ab3d.OculusWrap.HmdDesc">
            <summary>
            This is a complete descriptor of the HMD.
            </summary>
        </member>
        <member name="M:Ab3d.OculusWrap.HmdDesc.#ctor(Ab3d.OculusWrap.HmdDesc64)">
            <summary>
            Copy constructor used to convert an HmdDesc64 to an HmdDesc.
            </summary>
            <param name="source">HmdDesc64 to copy from.</param>
        </member>
        <member name="F:Ab3d.OculusWrap.HmdDesc.Type">
            <summary>
            The type of HMD.
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.HmdDesc.ProductNameBytes">
            <summary>
            Byte array for ProductName string
            </summary>
        </member>
        <member name="P:Ab3d.OculusWrap.HmdDesc.ProductName">
            <summary>
            Name string describing the product: "Oculus Rift DK1", etc.
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.HmdDesc.ManufacturerBytes">
            <summary>
            Byte array for Manufacturer string
            </summary>
        </member>
        <member name="P:Ab3d.OculusWrap.HmdDesc.Manufacturer">
            <summary>
            HMD manufacturer identification string.
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.HmdDesc.VendorId">
            <summary>
            HID (USB) vendor identifier of the device.
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.HmdDesc.ProductId">
            <summary>
            HID (USB) product identifier of the device.
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.HmdDesc.SerialNumber">
            <summary>
            HMD serial number.
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.HmdDesc.FirmwareMajor">
            <summary>
            HMD firmware major version.
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.HmdDesc.FirmwareMinor">
            <summary>
            HMD firmware minor version.
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.HmdDesc.AvailableHmdCaps">
            <summary>
            Capability bits described by HmdCaps which the HMD currently supports.
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.HmdDesc.DefaultHmdCaps">
            <summary>
            Capability bits described by HmdCaps which are default for the current Hmd.
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.HmdDesc.AvailableTrackingCaps">
            <summary>
            Capability bits described by TrackingCaps which the system currently supports.
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.HmdDesc.DefaultTrackingCaps">
            <summary>
            Capability bits described by ovrTrackingCaps which are default for the current system.
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.HmdDesc.DefaultEyeFov">
            <summary>
            Defines the recommended FOVs for the HMD.
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.HmdDesc.MaxEyeFov">
            <summary>
            Defines the maximum FOVs for the HMD.
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.HmdDesc.Resolution">
            <summary>
            Resolution of the full HMD screen (both eyes) in pixels.
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.HmdDesc.DisplayRefreshRate">
            <summary>
            Nominal refresh rate of the display in cycles per second at the time of HMD creation.
            </summary>
        </member>
        <member name="T:Ab3d.OculusWrap.HmdDesc64">
            <summary>
            64 bit version of the HmdDesc.
            </summary>
            <remarks>
            This class is needed because the Oculus SDK defines padding fields on the 64 bit version of the Oculus SDK.
            </remarks>
            <see cref="T:Ab3d.OculusWrap.HmdDesc"/>
        </member>
        <member name="F:Ab3d.OculusWrap.HmdDesc64.Type">
            <summary>
            The type of HMD.
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.HmdDesc64.Pad0">
            <summary>
            Internal struct paddding.
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.HmdDesc64.ProductNameBytes">
            <summary>
            Byte array for ProductName string
            </summary>
        </member>
        <member name="P:Ab3d.OculusWrap.HmdDesc64.ProductName">
            <summary>
            Name string describing the product: "Oculus Rift DK1", etc.
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.HmdDesc64.ManufacturerBytes">
            <summary>
            Byte array for Manufacturer string
            </summary>
        </member>
        <member name="P:Ab3d.OculusWrap.HmdDesc64.Manufacturer">
            <summary>
            HMD manufacturer identification string.
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.HmdDesc64.VendorId">
            <summary>
            HID (USB) vendor identifier of the device.
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.HmdDesc64.ProductId">
            <summary>
            HID (USB) product identifier of the device.
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.HmdDesc64.SerialNumber">
            <summary>
            Sensor (and display) serial number.
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.HmdDesc64.FirmwareMajor">
            <summary>
            Sensor firmware major version.
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.HmdDesc64.FirmwareMinor">
            <summary>
            Sensor firmware minor version.
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.HmdDesc64.AvailableHmdCaps">
            <summary>
            Capability bits described by HmdCaps which the HMD currently supports.
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.HmdDesc64.DefaultHmdCaps">
            <summary>
            Capability bits described by HmdCaps which are default for the current Hmd.
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.HmdDesc64.AvailableTrackingCaps">
            <summary>
            Capability bits described by TrackingCaps which the system currently supports.
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.HmdDesc64.DefaultTrackingCaps">
            <summary>
            Capability bits described by ovrTrackingCaps which are default for the current system.
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.HmdDesc64.DefaultEyeFov">
            <summary>
            Defines the recommended FOVs for the HMD.
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.HmdDesc64.MaxEyeFov">
            <summary>
            Defines the maximum FOVs for the HMD.
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.HmdDesc64.Resolution">
            <summary>
            Resolution of the full HMD screen (both eyes) in pixels.
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.HmdDesc64.DisplayRefreshRate">
            <summary>
            Nominal refresh rate of the display in cycles per second at the time of HMD creation.
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.HmdDesc64.Pad1">
            <summary>
            Internal struct paddding.
            </summary>
        </member>
        <member name="T:Ab3d.OculusWrap.HmdType">
            <summary>
            Enumerates all HMD types that we support.
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.HmdType.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.HmdType.DK1">
            <summary>
            DK1
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.HmdType.DKHD">
            <summary>
            DKHD
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.HmdType.DK2">
            <summary>
            DK2
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.HmdType.CB">
            <summary>
            CB
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.HmdType.Other">
            <summary>
            Other
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.HmdType.E3_2015">
            <summary>
            E3_2015
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.HmdType.ES06">
            <summary>
            ES06
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.HmdType.ES09">
            <summary>
            ES09
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.HmdType.ES11">
            <summary>
            ES11
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.HmdType.CV1">
            <summary>
            CV1
            </summary>
        </member>
        <member name="T:Ab3d.OculusWrap.InitFlags">
            <summary>
            Flags for Initialize()
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.InitFlags.None">
            <summary>
            No flags specified.
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.InitFlags.Debug">
            <summary>
            When a debug library is requested, a slower debugging version of the library will
            be run which can be used to help solve problems in the library and debug game code.
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.InitFlags.RequestVersion">
            <summary>
            When a version is requested, the LibOVR runtime respects the RequestedMinorVersion
            field and verifies that the RequestedMinorVersion is supported. Normally when you 
            specify this flag you simply use OVR_MINOR_VERSION for ovrInitParams::RequestedMinorVersion,
            though you could use a lower version than OVR_MINOR_VERSION to specify previous 
            version behavior.
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.InitFlags.Invisible">
            <summary>
            This client will not be visible in the HMD.
            Typically set by diagnostic or debugging utilities.
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.InitFlags.MixedRendering">
            <summary>
            This client will alternate between VR and 2D rendering.
            Typically set by game engine editors and VR-enabled web browsers.
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.InitFlags.WritableBits">
            <summary>
            These bits are writable by user code.
            </summary>
        </member>
        <member name="T:Ab3d.OculusWrap.InputState">
            <summary>
            InputState describes the complete controller input state, including Oculus Touch,
            and XBox gamepad. If multiple inputs are connected and used at the same time,
            their inputs are combined.
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.InputState.TimeInSeconds">
            <summary>
            System type when the controller state was last updated.
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.InputState.Buttons">
            <summary>
            Values for buttons described by ovrButton.
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.InputState.Touches">
            <summary>
            Touch values for buttons and sensors as described by ovrTouch.
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.InputState.IndexTrigger">
            <summary>
            Left and right finger trigger values (Hand.Left and Hand.Right), in the range 0.0 to 1.0f.
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.InputState.HandTrigger">
            <summary>
            Left and right hand trigger values (Hand.Left and Hand.Right), in the range 0.0 to 1.0f.
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.InputState.Thumbstick">
            <summary>
            Horizontal and vertical thumbstick axis values (Hand.Left and Hand.Right), in the range -1.0f to 1.0f.
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.InputState.ControllerType">
            <summary>
            The type of the controller this state is for.
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.InputState.IndexTriggerNoDeadzone">
            <summary>
            Left and right finger trigger values (ovrHand_Left and ovrHand_Right), in the range 0.0 to 1.0f.
            Does not apply a deadzone.  Only touch applies a filter.
            This has been formally named simply "Trigger". We retain the name IndexTrigger for backwards code compatibility.
            User-facing documentation should refer to it as the Trigger.
            Added in 1.7
            </summary>            
        </member>
        <member name="F:Ab3d.OculusWrap.InputState.HandTriggerNoDeadzone">
            <summary>
            Left and right hand trigger values (ovrHand_Left and ovrHand_Right), in the range 0.0 to 1.0f.
            Does not apply a deadzone. Only touch applies a filter.
            This has been formally named "Grip Button". We retain the name HandTrigger for backwards code compatibility.
            User-facing documentation should refer to it as the Grip Button or simply Grip.
            Added in 1.7
            </summary>   
        </member>
        <member name="F:Ab3d.OculusWrap.InputState.ThumbstickNoDeadzone">
            <summary>
            Horizontal and vertical thumbstick axis values (ovrHand_Left and ovrHand_Right), in the range -1.0f to 1.0f
            Does not apply a deadzone or filter.
            Added in 1.7
            </summary>   
        </member>
        <member name="F:Ab3d.OculusWrap.InputState.IndexTriggerRaw">
            <summary>
            Left and right finger trigger values (ovrHand_Left and ovrHand_Right), in range 0.0 to 1.0f.
            No deadzone or filter
            This has been formally named "Grip Button". We retain the name HandTrigger for backwards code
            compatibility.
            User-facing documentation should refer to it as the Grip Button or simply Grip.
            </summary>   
        </member>
        <member name="F:Ab3d.OculusWrap.InputState.HandTriggerRaw">
            <summary>
            Left and right hand trigger values (ovrHand_Left and ovrHand_Right), in the range 0.0 to 1.0f.
            No deadzone or filter
            This has been formally named "Grip Button". We retain the name HandTrigger for backwards code
            compatibility.
            User-facing documentation should refer to it as the Grip Button or simply Grip.
            </summary>   
        </member>
        <member name="F:Ab3d.OculusWrap.InputState.ThumbstickRaw">
            <summary>
            Horizontal and vertical thumbstick axis values (ovrHand_Left and ovrHand_Right), in the range
            -1.0f to 1.0f
            No deadzone or filter
            </summary>   
        </member>
        <member name="T:Ab3d.OculusWrap.LayerEyeFov">
             <summary>
             Describes a layer that specifies a monoscopic or stereoscopic view.
             
             This is the kind of layer that's typically used as layer 0 to ovr_SubmitFrame,
             as it is the kind of layer used to render a 3D stereoscopic view.
            
             Three options exist with respect to mono/stereo texture usage:
                - ColorTextureLeft and ColorTextureRight contain the left and right stereo renderings, respectively. 
                  ViewportLeft and ViewportRight refer to ColorTextureLeft and ColorTextureRight, respectively.
                - ColorTextureLeft contains both the left and right renderings, ColorTextureRight is NULL, 
                  and ViewportLeft and ViewportRight refer to sub-rects with ColorTextureLeft.
                - ColorTextureLeft contains a single monoscopic rendering, and ViewportLeft and 
                  ViewportRight both refer to that rendering.
             </summary>
             <see cref="M:Ab3d.OculusWrap.OvrWrap.SubmitFrame(System.IntPtr,System.Int64,System.IntPtr,Ab3d.OculusWrap.LayerEyeFov@)"/>
             <see cref="M:Ab3d.OculusWrap.OvrWrap.SubmitFrame(System.IntPtr,System.Int64,System.IntPtr,System.IntPtr,System.Int32)"/>
        </member>
        <member name="F:Ab3d.OculusWrap.LayerEyeFov.Header">
            <summary>
            Header.Type must be LayerType_EyeFov.
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.LayerEyeFov.ColorTextureLeft">
            <summary>
            TextureSwapChains for the left eye.
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.LayerEyeFov.ColorTextureRight">
            <summary>
            TextureSwapChains for the right eye respectively.
            Can be null for cases described above.
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.LayerEyeFov.ViewportLeft">
            <summary>
            Specifies the ColorTexture sub-rect UV coordinates.
            Both ViewportLeft and ViewportRight must be valid.
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.LayerEyeFov.ViewportRight">
            <summary>
            Specifies the ColorTexture sub-rect UV coordinates.
            Both ViewportLeft and ViewportRight must be valid.
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.LayerEyeFov.FovLeft">
            <summary>
            The left viewport field of view.
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.LayerEyeFov.FovRight">
            <summary>
            The right viewport field of view.
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.LayerEyeFov.RenderPoseLeft">
            <summary>
            Specifies the position and orientation of each eye view, with the position specified in meters.
            RenderPose will typically be the value returned from ovr_CalcEyePoses,
            but can be different in special cases if a different head pose is used for rendering.
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.LayerEyeFov.RenderPoseRight">
            <summary>
            Specifies the position and orientation of each eye view, with the position specified in meters.
            RenderPose will typically be the value returned from ovr_CalcEyePoses,
            but can be different in special cases if a different head pose is used for rendering.
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.LayerEyeFov.SensorSampleTime">
            <summary>
            Specifies the timestamp when the source ovrPosef (used in calculating RenderPose)
            was sampled from the SDK. Typically retrieved by calling ovr_GetTimeInSeconds
            around the instant the application calls ovr_GetTrackingState
            The main purpose for this is to accurately track app tracking latency.
            </summary>
        </member>
        <member name="T:Ab3d.OculusWrap.LayerEyeMatrix">
             <summary>
             Describes a layer that specifies a monoscopic or stereoscopic view.
             This uses a direct 3x4 matrix to map from view space to the UV coordinates.
             It is essentially the same thing as ovrLayerEyeFov but using a much
             lower level. This is mainly to provide compatibility with specific apps.
             Unless the application really requires this flexibility, it is usually better
             to use ovrLayerEyeFov.
            
             Three options exist with respect to mono/stereo texture usage:
                - ColorTextureLeft and ColorTextureRight contain the left and right stereo renderings, respectively.
                  ViewportLeft and ViewportRight refer to ColorTextureLeft and ColorTextureRight, respectively.
                - ColorTextureLeft contains both the left and right renderings, ColorTextureRight is null,
                  and ViewportLeft and ViewportRight refer to sub-rects with ColorTextureLeft.
                - ColorTextureLeft contains a single monoscopic rendering, and ViewportLeft and
                  ViewportRight both refer to that rendering.
             </summary>
             <see cref="M:Ab3d.OculusWrap.OvrWrap.SubmitFrame(System.IntPtr,System.Int64,System.IntPtr,Ab3d.OculusWrap.LayerEyeFov@)"/>
             <see cref="M:Ab3d.OculusWrap.OvrWrap.SubmitFrame(System.IntPtr,System.Int64,System.IntPtr,System.IntPtr,System.Int32)"/>
        </member>
        <member name="F:Ab3d.OculusWrap.LayerEyeMatrix.Header">
            <summary>
            Header.Type must be ovrLayerType_EyeMatrix.
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.LayerEyeMatrix.ColorTextureLeft">
            <summary>
            TextureSwapChains for the left eye respectively.
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.LayerEyeMatrix.ColorTextureRight">
            <summary>
            TextureSwapChains for the right eye respectively.
            Can be null for cases described above.
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.LayerEyeMatrix.ViewportLeft">
            <summary>
            Specifies the ColorTexture sub-rect UV coordinates.
            Both ViewportLeft and ViewportRight must be valid.
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.LayerEyeMatrix.ViewportRight">
            <summary>
            Specifies the ColorTexture sub-rect UV coordinates.
            Both ViewportLeft and ViewportRight must be valid.
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.LayerEyeMatrix.RenderPoseLeft">
            <summary>
            Specifies the position and orientation of each eye view, with the position specified in meters.
            RenderPose will typically be the value returned from ovr_CalcEyePoses,
            but can be different in special cases if a different head pose is used for rendering.
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.LayerEyeMatrix.RenderPoseRight">
            <summary>
            Specifies the position and orientation of each eye view, with the position specified in meters.
            RenderPose will typically be the value returned from ovr_CalcEyePoses,
            but can be different in special cases if a different head pose is used for rendering.
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.LayerEyeMatrix.MatrixLeft">
            <summary>
            Specifies the mapping from a view-space vector
            to a UV coordinate on the textures given above.
            P = (x,y,z,1)*Matrix
            TexU  = P.x/P.z
            TexV  = P.y/P.z
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.LayerEyeMatrix.MatrixRight">
            <summary>
            Specifies the mapping from a view-space vector
            to a UV coordinate on the textures given above.
            P = (x,y,z,1)*Matrix
            TexU  = P.x/P.z
            TexV  = P.y/P.z
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.LayerEyeMatrix.SensorSampleTime">
            <summary>
            Specifies the timestamp when the source ovrPosef (used in calculating RenderPose)
            was sampled from the SDK. Typically retrieved by calling ovr_GetTimeInSeconds
            around the instant the application calls ovr_GetTrackingState
            The main purpose for this is to accurately track app tracking latency.
            </summary>
        </member>
        <member name="T:Ab3d.OculusWrap.LayerFlags">
            <summary>
            Identifies flags used by LayerHeader and which are passed to ovr_SubmitFrame.
            </summary>
            <see cref="T:Ab3d.OculusWrap.LayerHeader"/>
        </member>
        <member name="F:Ab3d.OculusWrap.LayerFlags.None">
            <summary>
            No layer flags specified.
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.LayerFlags.HighQuality">
            <summary>
            HighQuality enables 4x anisotropic sampling during the composition of the layer.
            The benefits are mostly visible at the periphery for high-frequency &amp; high-contrast visuals.
            For best results consider combining this flag with an IntPtr that has mipmaps and
            instead of using arbitrary sized textures, prefer texture sizes that are powers-of-two.
            Actual rendered viewport and doesn't necessarily have to fill the whole texture.
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.LayerFlags.TextureOriginAtBottomLeft">
            <summary>
            TextureOriginAtBottomLeft: the opposite is TopLeft.
            
            Generally this is false for D3D, true for OpenGL.
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.LayerFlags.HeadLocked">
            <summary>
            Mark this surface as "headlocked", which means it is specified
            relative to the HMD and moves with it, rather than being specified
            relative to sensor/torso space and remaining still while the head moves.
            
            What used to be ovrLayerType_QuadHeadLocked is now LayerType.Quad plus this flag.
            However the flag can be applied to any layer type to achieve a similar effect.
            </summary>
        </member>
        <member name="T:Ab3d.OculusWrap.LayerHeader">
             <summary>
             Defines properties shared by all ovrLayer structs, such as LayerEyeFov.
            
             LayerHeader is used as a base member in these larger structs.
             This struct cannot be used by itself except for the case that Type is LayerType_Disabled.
             </summary>
             <see cref="T:Ab3d.OculusWrap.LayerType"/>
             <see cref="T:Ab3d.OculusWrap.LayerFlags"/>
        </member>
        <member name="F:Ab3d.OculusWrap.LayerHeader.Type">
            <summary>
            Described by LayerType.
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.LayerHeader.Flags">
            <summary>
            Described by LayerFlags.
            </summary>
        </member>
        <member name="T:Ab3d.OculusWrap.LayerQuad">
             <summary>
             Describes a layer of Quad type, which is a single quad in world or viewer space.
             It is used for ovrLayerType_Quad. This type of layer represents a single
             object placed in the world and not a stereo view of the world itself.
            
             A typical use of ovrLayerType_Quad is to draw a television screen in a room
             that for some reason is more convenient to draw as a layer than as part of the main
             view in layer 0. For example, it could implement a 3D popup GUI that is drawn at a
             higher resolution than layer 0 to improve fidelity of the GUI.
            
             Quad layers are visible from both sides; they are not back-face culled.
             </summary>
             <see cref="M:Ab3d.OculusWrap.OvrWrap.SubmitFrame(System.IntPtr,System.Int64,System.IntPtr,Ab3d.OculusWrap.LayerEyeFov@)"/>
             <see cref="M:Ab3d.OculusWrap.OvrWrap.SubmitFrame(System.IntPtr,System.Int64,System.IntPtr,System.IntPtr,System.Int32)"/>
        </member>
        <member name="F:Ab3d.OculusWrap.LayerQuad.Header">
            <summary>
            Header.Type must be ovrLayerType_Quad.
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.LayerQuad.ColorTexture">
            <summary>
            Contains a single image, never with any stereo view.
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.LayerQuad.Viewport">
            <summary>
            Specifies the ColorTexture sub-rect UV coordinates.
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.LayerQuad.QuadPoseCenter">
            <summary>
            Specifies the orientation and position of the center point of a Quad layer type.
            The supplied direction is the vector perpendicular to the quad.
            The position is in real-world meters (not the application's virtual world,
            the physical world the user is in) and is relative to the "zero" position
            set by ovr_RecenterTrackingOrigin unless the ovrLayerFlag_HeadLocked flag is used.
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.LayerQuad.QuadSize">
            <summary>
            Width and height (respectively) of the quad in meters.
            </summary>
        </member>
        <member name="T:Ab3d.OculusWrap.LayerType">
            <summary>
            Describes layer types that can be passed to ovr_SubmitFrame.
            Each layer type has an associated struct, such as ovrLayerEyeFov.
            </summary>
            <see cref="T:Ab3d.OculusWrap.LayerHeader"/>
        </member>
        <member name="F:Ab3d.OculusWrap.LayerType.Disabled">
            <summary>
            Layer is disabled.
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.LayerType.EyeFov">
            <summary>
            Described by LayerEyeFov.
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.LayerType.Quad">
            <summary>
            Described by LayerQuad. 
            
            Previously called QuadInWorld.
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.LayerType.EyeMatrix">
            <summary>
            Described by LayerEyeMatrix.
            </summary>
        </member>
        <member name="T:Ab3d.OculusWrap.LogCallback">
            <summary>
            Signature for the logging callback.
            </summary>
            <param name="userData">UserData is an arbitrary value specified by the user of ovrInitParams.</param>
            <param name="level">Level is one of the ovrLogLevel constants.</param>
            <param name="message">Message is a UTF8-encoded null-terminated string.</param>
            <see cref="T:Ab3d.OculusWrap.InitParams"/>
            <seealso cref="T:Ab3d.OculusWrap.LogLevel"/>
            <seealso cref="M:Ab3d.OculusWrap.OvrWrap.Initialize(Ab3d.OculusWrap.InitParams)"/>
        </member>
        <member name="T:Ab3d.OculusWrap.LogLevel">
            <summary>
            Logging levels
            </summary>
            <see cref="T:Ab3d.OculusWrap.InitParams"/>
            <see cref="T:Ab3d.OculusWrap.LogCallback"/>
        </member>
        <member name="F:Ab3d.OculusWrap.LogLevel.Debug">
            <summary>
            Debug-level log event.
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.LogLevel.Info">
            <summary>
            Info-level log event.
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.LogLevel.Error">
            <summary>
            Error-level log event.
            </summary>
        </member>
        <member name="T:Ab3d.OculusWrap.Matrix4f">
            <summary>
            4x4 Matrix used in Oculus SDK
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.Matrix4f.M11">
            <summary>
            M11
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.Matrix4f.M12">
            <summary>
            M12
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.Matrix4f.M13">
            <summary>
            M13
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.Matrix4f.M14">
            <summary>
            M14
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.Matrix4f.M21">
            <summary>
            M21
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.Matrix4f.M22">
            <summary>
            M22
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.Matrix4f.M23">
            <summary>
            M23
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.Matrix4f.M24">
            <summary>
            M24
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.Matrix4f.M31">
            <summary>
            M31
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.Matrix4f.M32">
            <summary>
            M32
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.Matrix4f.M33">
            <summary>
            M33
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.Matrix4f.M34">
            <summary>
            M34
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.Matrix4f.M41">
            <summary>
            M41
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.Matrix4f.M42">
            <summary>
            M42
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.Matrix4f.M43">
            <summary>
            M43
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.Matrix4f.M44">
            <summary>
            M44
            </summary>
        </member>
        <member name="T:Ab3d.OculusWrap.MirrorTextureDesc">
            <summary>
            Description used to create a mirror texture.
            </summary>
            <see cref="M:Ab3d.OculusWrap.OvrWrap.CreateMirrorTextureDX(System.IntPtr,System.IntPtr,Ab3d.OculusWrap.MirrorTextureDesc@,System.IntPtr@)"/>
            <see cref="M:Ab3d.OculusWrap.OvrWrap.CreateMirrorTextureGL(System.IntPtr,Ab3d.OculusWrap.MirrorTextureDesc,System.IntPtr@)"/>
        </member>
        <member name="F:Ab3d.OculusWrap.MirrorTextureDesc.Format">
            <summary>
            Format
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.MirrorTextureDesc.Width">
            <summary>
            Width        
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.MirrorTextureDesc.Height">
            <summary>
            Height
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.MirrorTextureDesc.MiscFlags">
            <summary>
            MiscFlags
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.MirrorTextureDesc.MirrorOptions">
            <summary>
            MirrorOptions
            </summary>
        </member>
        <member name="T:Ab3d.OculusWrap.LayerHudMode">
            <summary>
            Layer HUD enables the HMD user to see information about a layer
            <example>
            <code>
                App can toggle layer HUD modes as such:
                    ovrLayerHudMode LayerHudMode = ovrLayerHud_Info;
                    ovr_SetInt(Hmd, OVR_LAYER_HUD_MODE, (int)LayerHudMode);
            </code>
            </example>
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.LayerHudMode.Off">
            <summary>
            Turns off the layer HUD
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.LayerHudMode.Info">
            <summary>
            Shows info about a specific layer
            </summary>
        </member>
        <member name="T:Ab3d.OculusWrap.InitParams">
            <summary>
            Parameters for the ovr_Initialize call.
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.InitParams.Flags">
            <summary>
            Flags from ovrInitFlags to override default behavior.
            Pass 0 for the defaults.
            </summary>
            <remarks>
            Combination of ovrInitFlags or 0
            </remarks>
        </member>
        <member name="F:Ab3d.OculusWrap.InitParams.RequestedMinorVersion">
            <summary>
            Request a specific minimum minor version of the LibOVR runtime.
            Flags must include ovrInit_RequestVersion or this will be ignored.
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.InitParams.LogCallback">
            <summary>
            Log callback function, which may be called at any time asynchronously from
            multiple threads until ovr_Shutdown() completes.
            
            Pass null for no log callback.
            </summary>
            <remarks>
            Function pointer or 0
            </remarks>
        </member>
        <member name="F:Ab3d.OculusWrap.InitParams.UserData">
            <summary>
            User-supplied data which is passed as-is to LogCallback. Typically this 
            is used to store an application-specific pointer which is read in the 
            callback function.
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.InitParams.ConnectionTimeoutMS">
            <summary>
            Number of milliseconds to wait for a connection to the server.
            
            Pass 0 for the default timeout.
            </summary>
            <remarks>
            Timeout in Milliseconds or 0
            </remarks>
        </member>
        <member name="M:Ab3d.OculusWrap.InitParams.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ab3d.OculusWrap.InitParams.#ctor(Ab3d.OculusWrap.InitFlags,System.UInt32)">
            <summary>
            Constructor
            </summary>
            <param name="flags">InitFlags</param>
            <param name="requestedMinorVersion">uint</param>
        </member>
        <member name="T:Ab3d.OculusWrap.OvrWrap">
            <summary>
            OvrWrap is a base Oculus Wrap class that defines Oculus SKD methods.
            To create an instance of this class use <see cref="M:Ab3d.OculusWrap.OvrWrap.Create"/>, <see cref="M:Ab3d.OculusWrap.OvrWrap.Create32"/> or <see cref="M:Ab3d.OculusWrap.OvrWrap.Create64"/> static method.
            </summary>
            <remarks>
            <para>
            <b>OvrWrap</b> is a base Oculus Wrap class that defines Oculus SKD methods.
            </para>
            <para>
            To create an instance of this class use <see cref="M:Ab3d.OculusWrap.OvrWrap.Create"/>, <see cref="M:Ab3d.OculusWrap.OvrWrap.Create32"/> or <see cref="M:Ab3d.OculusWrap.OvrWrap.Create64"/> static method (the later two provide slightly better performance because the method calls do not use virtual table - see method remarks for more info).
            </para>
            <para>
            OvrWrap class do not create any resources so you do not need to dispose it.
            </para>
            <para>
            It is possible to manually load the OVR library with the static <see cref="M:Ab3d.OculusWrap.OvrWrap.LoadLibrary"/> method.
            This allows manual unloading of the library with the static <see cref="M:Ab3d.OculusWrap.OvrWrap.UnloadLibrary"/> method.
            It is not needed to manually load the library before created an OvrWrap instace.
            But with calling LoadLibrary method, it is possible to unload the library later to free the memory that is used by the library 
            (this is not possible is the library is loaded automatically in Create, Create32 or Create64 method).
            </para>
            </remarks>
        </member>
        <member name="P:Ab3d.OculusWrap.OvrWrap.OvrDllName">
            <summary>
            Filename of the DllOVR wrapper file, which wraps the LibOvr.lib in a dll.
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.OvrWrap.MaxLayerCount">
            <summary>
            Specifies the maximum number of layers supported by ovr_SubmitFrame.
            </summary>
            <see cref="M:Ab3d.OculusWrap.OvrWrap.SubmitFrame(System.IntPtr,System.Int64,System.IntPtr,Ab3d.OculusWrap.LayerEyeFov@)"/>
            <see cref="M:Ab3d.OculusWrap.OvrWrap.SubmitFrame(System.IntPtr,System.Int64,System.IntPtr,System.IntPtr,System.Int32)"/>
        </member>
        <member name="F:Ab3d.OculusWrap.OvrWrap.MaxProvidedFrameStats">
            <summary>
            Maximum number of frames of performance stats provided back to the caller of ovr_GetPerfStats
            </summary>
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap.Create">
            <summary>
            Creates an <see cref="T:Ab3d.OculusWrap.OvrWrap32"/> or <see cref="T:Ab3d.OculusWrap.OvrWrap64"/> instance based on the current process. 
            </summary>
            <remarks>
            <para>
            <b>Create</b> method can be used to create an instance of <see cref="T:Ab3d.OculusWrap.OvrWrap32"/> or <see cref="T:Ab3d.OculusWrap.OvrWrap64"/> instance based on the current process type.
            The method returns base <see cref="T:Ab3d.OculusWrap.OvrWrap"/> class.
            </para>
            <para>
            When you are targeting only x64 platform, you can use the <see cref="M:Ab3d.OculusWrap.OvrWrap.Create64"/> method.
            </para>
            <para>
            When you are targeting only x86 platform, you can use the <see cref="M:Ab3d.OculusWrap.OvrWrap.Create32"/> method.
            </para>
            </remarks>
            <returns>OvrWrap instance</returns>
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap.Create32">
            <summary>
            Creates an <see cref="T:Ab3d.OculusWrap.OvrWrap32"/> instance that can be used only in x86 processes.
            </summary>
            <remarks>
            <para>
            When you are targeting only x86 platform, you can call this method to get an instance of <see cref="T:Ab3d.OculusWrap.OvrWrap32"/> class.
            </para>
            <para>
            When you call Oculus SKD methods from OvrWrap32 class, this provides a small performance improvement compared to calling the same methods on the base <see cref="T:Ab3d.OculusWrap.OvrWrap"/> class.
            The reason for this is that the OvrWrap class is abstract and therefore each method call require a lookup in the virtual table where the OvrWrap32 is sealed and therefore the direct method call can be made 
            (but you must specify the type as OvrWrap32 and not OvrWrap; var is also ok). Note that because the number of Oculus SDK calls is not big (compared to DirectX calls), the performance gain is probably not noticeable.
            </para>
            <para>
            When you are targeting only x64 platform, you can use the <see cref="M:Ab3d.OculusWrap.OvrWrap.Create64"/> method.
            </para>
            <para>
            When you are targeting AnyCpu and therefore do not know the target platform, you need to use <see cref="M:Ab3d.OculusWrap.OvrWrap.Create"/> method.
            </para>
            </remarks>
            <returns>OvrWrap32 instance</returns>
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap.Create64">
            <summary>
            Creates an <see cref="T:Ab3d.OculusWrap.OvrWrap64"/> instance that can be used only in x64 processes.
            </summary>
            <remarks>
            <para>
            When you are targeting only x64 platform, you can call this method to get an instance of <see cref="T:Ab3d.OculusWrap.OvrWrap64"/> class.
            </para>
            <para>
            When you call Oculus SKD methods from OvrWrap64 class, this provides a small performance improvement compared to calling the same methods on the base <see cref="T:Ab3d.OculusWrap.OvrWrap"/> class.
            The reason for this is that the OvrWrap class is abstract and therefore each method call require a lookup in the virtual table where the OvrWrap64 is sealed and therefore the direct method call can be made 
            (but you must specify the type as OvrWrap64 and not OvrWrap; var is also ok). Note that because the number of Oculus SDK calls is not big (compared to DirectX calls), the performance gain is probably not noticeable.
            </para>
            <para>
            When you are targeting only x86 platform, you can use the <see cref="M:Ab3d.OculusWrap.OvrWrap.Create32"/> method.
            </para>
            <para>
            When you are targeting AnyCpu and therefore do not know the target platform, you need to use <see cref="M:Ab3d.OculusWrap.OvrWrap.Create"/> method.
            </para>
            </remarks>
            <returns>OvrWrap64 instance</returns>
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap.LoadLibrary">
            <summary>
            Manually loads the Oculus runtime dll into memory. This allows unloading the dll when it is not used any more with <see cref="M:Ab3d.OculusWrap.OvrWrap.UnloadLibrary"/> method.
            </summary>
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap.UnloadLibrary">
            <summary>
            Unloads the Oculus runtime library that was loaded before with <see cref="M:Ab3d.OculusWrap.OvrWrap.LoadLibrary"/> method.
            </summary>
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap.Detect(System.Int32)">
             <summary>
             Detects Oculus Runtime and Device Status
            
             Checks for Oculus Runtime and Oculus HMD device status without loading the LibOVRRT
             shared library.  This may be called before Initialize() to help decide whether or
             not to initialize LibOVR.
             </summary>
             <param name="timeoutMilliseconds">Specifies a timeout to wait for HMD to be attached or 0 to poll.</param>
             <returns>Returns a DetectResult object indicating the result of detection.</returns>
             <see cref="T:Ab3d.OculusWrap.DetectResult"/>
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap.Initialize(Ab3d.OculusWrap.InitParams)">
            <summary>
            Initializes all Oculus functionality.
            </summary>
            <param name="parameters">
            Initialize with extra parameters.
            Pass 0 to initialize with default parameters, suitable for released games.
            </param>
            <remarks>
            Library init/shutdown, must be called around all other OVR code.
            No other functions calls besides InitializeRenderingShim are allowed
            before Initialize succeeds or after Shutdown.
            
            LibOVRRT shared library search order:
                 1) Current working directory (often the same as the application directory).
                 2) Module directory (usually the same as the application directory, but not if the module is a separate shared library).
                 3) Application directory
                 4) Development directory (only if OVR_ENABLE_DEVELOPER_SEARCH is enabled, which is off by default).
                 5) Standard OS shared library search location(s) (OS-specific).
            </remarks>
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap.GetLastErrorInfo">
            <summary>
            Returns information about the most recent failed return value by the
            current thread for this library.
            
            This function itself can never generate an error.
            The last error is never cleared by LibOVR, but will be overwritten by new errors.
            Do not use this call to determine if there was an error in the last API 
            call as successful API calls don't clear the last ErrorInfo.
            To avoid any inconsistency, ovr_GetLastErrorInfo should be called immediately
            after an API function that returned a failed ovrResult, with no other API
            functions called in the interim.
            </summary>
            <remarks>
            Allocate an ErrorInfo and pass this as errorInfo argument.
            </remarks>
            <returns>The last ErrorInfo for the current thread.</returns>
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap.GetVersionString">
            <summary>
            Returns version string representing libOVR version. Static, so
            string remains valid for app lifespan
            </summary>
            <returns>
            Version string
            </returns>
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap.TraceMessage(Ab3d.OculusWrap.LogLevel,System.String)">
            <summary>
            Send a message string to the system tracing mechanism if enabled (currently Event Tracing for Windows)
            </summary>
            <param name="level">
            One of the ovrLogLevel constants.
            </param>
            <param name="message">
            A UTF8-encoded null-terminated string.
            </param>
            <returns>
            Returns the length of the message, or -1 if message is too large
            </returns>
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap.Shutdown">
            <summary>
            Shuts down all Oculus functionality.
            </summary>
            <remarks>
            No API functions may be called after Shutdown except Initialize.
            </remarks>
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap.GetHmdDesc(System.IntPtr)">
            <summary>
            Returns information about the current HMD.
            
            ovr_Initialize must be called prior to calling this function,
            otherwise ovrHmdDesc::Type will be set to ovrHmd_None without
            checking for the HMD presence.
            </summary>
            <param name="sessionPtr">
            Specifies an ovrSession previously returned by ovr_Create() or NULL.
            </param>
            <returns>
            Returns an ovrHmdDesc. If invoked with NULL session argument, ovrHmdDesc::Type
            set to ovrHmd_None indicates that the HMD is not connected.
            </returns>
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap.GetTrackerCount(System.IntPtr)">
             <summary>
             Returns the number of sensors. 
            
             The number of sensors may change at any time, so this function should be called before use 
             as opposed to once on startup.
             </summary>
             <param name="sessionPtr">Specifies an IntPtr previously returned by Create.</param>
             <returns>Returns the number of sensors.</returns>
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap.GetTrackerDesc(System.IntPtr,System.UInt32)">
             <summary>
             Returns a given sensor description.
            
             It's possible that sensor desc [0] may indicate a unconnnected or non-pose tracked sensor, but 
             sensor desc [1] may be connected.
             </summary>
             <param name="sessionPtr">Specifies an IntPtr previously returned by Create.</param>
             <param name="trackerDescIndex">
             Specifies a sensor index. The valid indexes are in the range of 0 to the sensor count returned by GetTrackerCount.
             </param>
             <returns>An empty ovrTrackerDesc will be returned if trackerDescIndex is out of range.</returns>
             <see cref="T:Ab3d.OculusWrap.TrackerDesc"/>
             <see cref="M:Ab3d.OculusWrap.OvrWrap.GetTrackerCount(System.IntPtr)"/>
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap.Create(System.IntPtr@,Ab3d.OculusWrap.GraphicsLuid@)">
            <summary>
            Creates a handle to a VR session.
            
            Upon success the returned IntPtr must be eventually freed with Destroy when it is no longer needed.
            A second call to Create will result in an error return value if the previous Hmd has not been destroyed.
            </summary>
            <param name="sessionPtr">
            Provides a pointer to an IntPtr which will be written to upon success.
            </param>
            <param name="pLuid">
            Provides a system specific graphics adapter identifier that locates which
            graphics adapter has the HMD attached. This must match the adapter used by the application
            or no rendering output will be possible. This is important for stability on multi-adapter systems. An
            application that simply chooses the default adapter will not run reliably on multi-adapter systems.
            </param>
            <remarks>
            Call Marshal.PtrToStructure(...) to convert the IntPtr to the OVR.ovrHmd type.
            </remarks>
            <returns>
            Returns an ovrResult indicating success or failure. Upon failure
            the returned pHmd will be null.
            </returns>
            <example>
            <code>
            IntPtr sessionPtr;
            ovrGraphicsLuid luid;
            ovrResult result = Create(ref session, ref luid);
            if(OVR_FAILURE(result))
            ...
            </code>
            </example>
            <see cref="M:Ab3d.OculusWrap.OvrWrap.Destroy(System.IntPtr)"/>
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap.Destroy(System.IntPtr)">
            <summary>
            Destroys the HMD.
            </summary>
            <param name="sessionPtr">Specifies an IntPtr previously returned by Create.</param>
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap.GetSessionStatus(System.IntPtr,Ab3d.OculusWrap.SessionStatus@)">
            <summary>
            Returns status information for the application.
            </summary>
            <param name="sessionPtr">Specifies an IntPtr previously returned by Create.</param>
            <param name="sessionStatus">Provides a SessionStatus that is filled in.</param>
            <returns>
            Returns an ovrResult indicating success or failure. In the case of failure, use GetLastErrorInfo 
            to get more information.
            Return values include but aren't limited to:
            - Result.Success: Completed successfully.
            - Result.ServiceConnection: The service connection was lost and the application must destroy the session.
            </returns>
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap.SetTrackingOriginType(System.IntPtr,Ab3d.OculusWrap.TrackingOrigin)">
             <summary>
             Sets the tracking origin type
            
             When the tracking origin is changed, all of the calls that either provide
             or accept ovrPosef will use the new tracking origin provided.
             </summary>
             <param name="sessionPtr">Specifies an IntPtr previously returned by Create.</param>
             <param name="origin">Specifies an ovrTrackingOrigin to be used for all ovrPosef</param>
             <returns>
             Returns an ovrResult indicating success or failure. 
             In the case of failure, use GetLastErrorInfo to get more information.
             </returns>
             <see cref="T:Ab3d.OculusWrap.TrackingOrigin"/>
             <see cref="M:Ab3d.OculusWrap.OvrWrap.GetTrackingOriginType(System.IntPtr)"/>
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap.GetTrackingOriginType(System.IntPtr)">
            <summary>
            Gets the tracking origin state
            </summary>
            <param name="sessionPtr">Specifies an IntPtr previously returned by Create.</param>
            <returns>Returns the TrackingOrigin that was either set by default, or previous set by the application.</returns>
            <see cref="T:Ab3d.OculusWrap.TrackingOrigin"/>
            <see cref="M:Ab3d.OculusWrap.OvrWrap.SetTrackingOriginType(System.IntPtr,Ab3d.OculusWrap.TrackingOrigin)"/>
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap.RecenterTrackingOrigin(System.IntPtr)">
             <summary>
             Re-centers the sensor position and orientation.
            
             This resets the (x,y,z) positional components and the yaw orientation component of the
             tracking space for the HMD and controllers using the HMD's current tracking pose.
             If the caller requires some tweaks on top of the HMD's current tracking pose, consider using
             ovr_SpecifyTrackingOrigin instead.
             
             The Roll and pitch orientation components are always determined by gravity and cannot
             be redefined. All future tracking will report values relative to this new reference position.
             If you are using ovrTrackerPoses then you will need to call GetTrackerPose after 
             this, because the sensor position(s) will change as a result of this.
             
             The headset cannot be facing vertically upward or downward but rather must be roughly
             level otherwise this function will fail with ovrError_InvalidHeadsetOrientation.
            
             For more info, see the notes on each ovrTrackingOrigin enumeration to understand how
             recenter will vary slightly in its behavior based on the current ovrTrackingOrigin setting.
             </summary>
             <param name="sessionPtr">Specifies an IntPtr previously returned by Create.</param>
             <returns>
             Returns an ovrResult indicating success or failure. In the case of failure, use
             GetLastErrorInfo to get more information. Return values include but aren't limited to:
             - Result.Success: Completed successfully.
             - Result.InvalidHeadsetOrientation: The headset was facing an invalid direction when attempting recentering, 
               such as facing vertically.
             </returns>
             <see cref="T:Ab3d.OculusWrap.TrackingOrigin"/>
             <see cref="M:Ab3d.OculusWrap.OvrWrap.GetTrackerPose(System.IntPtr,System.UInt32)"/>
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap.SpecifyTrackingOrigin(System.IntPtr,Ab3d.OculusWrap.Posef)">
             <summary>
             Allows manually tweaking the sensor position and orientation.
            
             This function is similar to ovr_RecenterTrackingOrigin in that it modifies the
             (x,y,z) positional components and the yaw orientation component of the tracking space for
             the HMD and controllers.
            
             While ovr_RecenterTrackingOrigin resets the tracking origin in reference to the HMD's
             current pose, ovr_SpecifyTrackingOrigin allows the caller to explicitly specify a transform
             for the tracking origin. This transform is expected to be an offset to the most recent
             recentered origin, so calling this function repeatedly with the same originPose will keep
             nudging the recentered origin in that direction.
            
             There are several use cases for this function. For example, if the application decides to
             limit the yaw, or translation of the recentered pose instead of directly using the HMD pose
             the application can query the current tracking state via ovr_GetTrackingState, and apply
             some limitations to the HMD pose because feeding this pose back into this function.
             Similarly, this can be used to "adjust the seating position" incrementally in apps that
             feature seated experiences such as cockpit-based games.
            
             This function can emulate ovr_RecenterTrackingOrigin as such:
                 ovrTrackingState ts = ovr_GetTrackingState(session, 0.0, ovrFalse);
                 ovr_SpecifyTrackingOrigin(session, ts.HeadPose.ThePose);
            
             The roll and pitch orientation components are determined by gravity and cannot be redefined.
             If you are using ovrTrackerPoses then you will need to call ovr_GetTrackerPose after
             this, because the sensor position(s) will change as a result of this.
            
             For more info, see the notes on each ovrTrackingOrigin enumeration to understand how
             recenter will vary slightly in its behavior based on the current ovrTrackingOrigin setting.
             </summary>
             <param name="sessionPtr">Specifies an IntPtr previously returned by Create.</param>
             <param name="originPose">originPose Specifies a pose that will be used to transform the current tracking origin.</param>
             <returns>
             Returns an ovrResult indicating success or failure. In the case of failure, use
             ovr_GetLastErrorInfo to get more information. Return values include but aren't limited to:
             - ovrSuccess: Completed successfully.
             - ovrError_InvalidParameter: The heading direction in originPose was invalid,
             such as facing vertically. This can happen if the caller is directly feeding the pose
             of a position-tracked device such as an HMD or controller into this function.
             </returns>
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap.ClearShouldRecenterFlag(System.IntPtr)">
             <summary>
             Clears the ShouldRecenter status bit in ovrSessionStatus.
            
             Clears the ShouldRecenter status bit in ovrSessionStatus, allowing further recenter requests to
             be detected. Since this is automatically done by ovr_RecenterTrackingOrigin and
             ovr_SpecifyTrackingOrigin, this function only needs to be called when application is doing
             its own re-centering logic.
             </summary>
             <param name="sessionPtr">Specifies an IntPtr previously returned by Create.</param>
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap.GetTrackerPose(System.IntPtr,System.UInt32)">
            <summary>
            Returns the ovrTrackerPose for the given sensor.
            </summary>
            <param name="sessionPtr">Specifies an IntPtr previously returned by Create.</param>
            <param name="trackerPoseIndex">Index of the sensor being requested.</param>
            <returns>
            Returns the requested ovrTrackerPose. An empty ovrTrackerPose will be returned if trackerPoseIndex is out of range.
            </returns>
            <see cref="M:Ab3d.OculusWrap.OvrWrap.GetTrackerCount(System.IntPtr)"/>
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap.GetInputState(System.IntPtr,Ab3d.OculusWrap.ControllerType,Ab3d.OculusWrap.InputState@)">
            <summary>
            Returns the most recent input state for controllers, without positional tracking info.
            </summary>
            <param name="sessionPtr">Specifies an IntPtr previously returned by Create.</param>
            <param name="controllerType">Specifies which controller the input will be returned for.</param>
            <param name="inputState">Input state that will be filled in.</param>
            <returns>Returns Result.Success if the new state was successfully obtained.</returns>
            <see cref="T:Ab3d.OculusWrap.ControllerType"/>
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap.GetConnectedControllerTypes(System.IntPtr)">
            <summary>
            Returns controller types connected to the system OR'ed together.
            </summary>
            <param name="sessionPtr">Specifies an IntPtr previously returned by Create.</param>
            <returns>A bitmask of ControllerTypes connected to the system.</returns>
            <see cref="T:Ab3d.OculusWrap.ControllerType"/>
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap.GetTrackingState(System.IntPtr,System.Double,System.Boolean)">
             <summary>
             Returns tracking state reading based on the specified absolute system time.
            
             Pass an absTime value of 0.0 to request the most recent sensor reading. In this case
             both PredictedPose and SamplePose will have the same value.
            
             This may also be used for more refined timing of front buffer rendering logic, and so on.
             This may be called by multiple threads.
             </summary>
             <param name="sessionPtr">
             Specifies an IntPtr previously returned by ovr_Create.
             </param>
             <param name="absTime">
             Specifies the absolute future time to predict the return
             TrackingState value. Use 0 to request the most recent tracking state.
             </param>
             <param name="latencyMarker">
             Specifies that this call is the point in time where
             the "App-to-Mid-Photon" latency timer starts from. If a given ovrLayer
             provides "SensorSampleTimestamp", that will override the value stored here.
             </param>
             <returns>Returns the TrackingState that is predicted for the given absTime.</returns>
             <see cref="T:Ab3d.OculusWrap.TrackingState"/>
             <see cref="M:Ab3d.OculusWrap.OvrWrap.GetEyePoses(System.IntPtr,System.Int64,System.Boolean,Ab3d.OculusWrap.Vector3f[],Ab3d.OculusWrap.Posef[]@,System.Double@)"/>
             <see cref="M:Ab3d.OculusWrap.OvrWrap.GetTimeInSeconds"/>
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap.GetDevicePoses(System.IntPtr,Ab3d.OculusWrap.TrackedDeviceType[],System.Double,Ab3d.OculusWrap.PoseStatef[])">
            Returns an array of poses, where each pose matches a device type provided by the deviceTypes
            array parameter.
            <param name="sessionPtr">Specifies an ovrSession previously returned by ovr_Create.</param>
            <param name="deviceTypes">Array of device types to query for their poses.</param>
            <param name="absTime">Specifies the absolute future time to predict the return ovrTrackingState value. Use 0 to request the most recent tracking state.</param>
            <param name="outDevicePoses">Array of poses, one for each device type in deviceTypes arrays (size must match the size of deviceTypes array).</param>
            <returns>Returns an ovrResult for which OVR_SUCCESS(result) is false upon error and true upon success.</returns>
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap.SetControllerVibration(System.IntPtr,Ab3d.OculusWrap.ControllerType,System.Single,System.Single)">
             <summary>
             Turns on vibration of the given controller.
            
             To disable vibration, call SetControllerVibration with an amplitude of 0.
             Vibration automatically stops after a nominal amount of time, so if you want vibration 
             to be continuous over multiple seconds then you need to call this function periodically.
             </summary>
             <param name="sessionPtr">Specifies an IntPtr previously returned by Create.</param>
             <param name="controllerType">Specifies controllers to apply the vibration to.</param>
             <param name="frequency">
             Specifies a vibration frequency in the range of 0.0 to 1.0. 
             Currently the only valid values are 0.0, 0.5, and 1.0 and other values will
             be clamped to one of these.
             </param>
             <param name="amplitude">Specifies a vibration amplitude in the range of 0.0 to 1.0.</param>
             <returns>Returns ovrSuccess upon success.</returns>
             <see cref="T:Ab3d.OculusWrap.ControllerType"/>
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap.GetTextureSwapChainLength(System.IntPtr,System.IntPtr,System.Int32@)">
            <summary>
            Gets the number of buffers in an IntPtr.
            </summary>
            <param name="sessionPtr">Specifies an IntPtr previously returned by Create.</param>
            <param name="chain">Specifies the IntPtr for which the length should be retrieved.</param>
            <param name="length">Returns the number of buffers in the specified chain.</param>
            <returns>Returns an ovrResult for which the return code is negative upon error. </returns>
            <see cref="M:Ab3d.OculusWrap.OvrWrap.CreateTextureSwapChainDX(System.IntPtr,System.IntPtr,Ab3d.OculusWrap.TextureSwapChainDesc@,System.IntPtr@)"/>
            <see cref="M:Ab3d.OculusWrap.OvrWrap.CreateTextureSwapChainGL(System.IntPtr,Ab3d.OculusWrap.TextureSwapChainDesc,System.IntPtr@)"/>
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap.GetTextureSwapChainCurrentIndex(System.IntPtr,System.IntPtr,System.Int32@)">
            <summary>
            Gets the current index in an IntPtr.
            </summary>
            <param name="sessionPtr">Specifies an IntPtr previously returned by Create.</param>
            <param name="chain">Specifies the IntPtr for which the index should be retrieved.</param>
            <param name="index">Returns the current (free) index in specified chain.</param>
            <returns>Returns an ovrResult for which the return code is negative upon error. </returns>
            <see cref="M:Ab3d.OculusWrap.OvrWrap.CreateTextureSwapChainDX(System.IntPtr,System.IntPtr,Ab3d.OculusWrap.TextureSwapChainDesc@,System.IntPtr@)"/>
            <see cref="M:Ab3d.OculusWrap.OvrWrap.CreateTextureSwapChainGL(System.IntPtr,Ab3d.OculusWrap.TextureSwapChainDesc,System.IntPtr@)"/>
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap.GetTextureSwapChainDesc(System.IntPtr,System.IntPtr,Ab3d.OculusWrap.TextureSwapChainDesc@)">
            <summary>
            Gets the description of the buffers in an IntPtr
            </summary>
            <param name="sessionPtr">Specifies an IntPtr previously returned by Create.</param>
            <param name="chain">Specifies the IntPtr for which the description should be retrieved.</param>
            <param name="desc">Returns the description of the specified chain.</param>
            <returns>Returns an ovrResult for which the return code is negative upon error. </returns>
            <see cref="M:Ab3d.OculusWrap.OvrWrap.CreateTextureSwapChainDX(System.IntPtr,System.IntPtr,Ab3d.OculusWrap.TextureSwapChainDesc@,System.IntPtr@)"/>
            <see cref="M:Ab3d.OculusWrap.OvrWrap.CreateTextureSwapChainGL(System.IntPtr,Ab3d.OculusWrap.TextureSwapChainDesc,System.IntPtr@)"/>
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap.CommitTextureSwapChain(System.IntPtr,System.IntPtr)">
            <summary>
            Commits any pending changes to an IntPtr, and advances its current index
            </summary>
            <param name="sessionPtr">Specifies an IntPtr previously returned by Create.</param>
            <param name="chain">Specifies the IntPtr to commit.</param>
            <returns>
            Returns an ovrResult for which the return code is negative upon error.
            Failures include but aren't limited to:
              - Result.TextureSwapChainFull: CommitTextureSwapChain was called too many times on a texture swapchain without calling submit to use the chain.
            </returns>
            <see cref="M:Ab3d.OculusWrap.OvrWrap.CreateTextureSwapChainDX(System.IntPtr,System.IntPtr,Ab3d.OculusWrap.TextureSwapChainDesc@,System.IntPtr@)"/>
            <see cref="M:Ab3d.OculusWrap.OvrWrap.CreateTextureSwapChainGL(System.IntPtr,Ab3d.OculusWrap.TextureSwapChainDesc,System.IntPtr@)"/>
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap.DestroyTextureSwapChain(System.IntPtr,System.IntPtr)">
            <summary>
            Destroys an IntPtr and frees all the resources associated with it.
            </summary>
            <param name="sessionPtr">Specifies an IntPtr previously returned by Create.</param>
            <param name="chain">Specifies the IntPtr to destroy. If it is null then this function has no effect.</param>
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap.DestroyMirrorTexture(System.IntPtr,System.IntPtr)">
            <summary>
            Destroys a mirror texture previously created by one of the mirror texture creation functions.
            </summary>
            <param name="sessionPtr">
            Specifies an IntPtr previously returned by Create.
            </param>
            <param name="mirrorTexturePtr">
            Specifies the ovrTexture to destroy. If it is null then this function has no effect.
            </param>
            <see cref="M:Ab3d.OculusWrap.OvrWrap.CreateMirrorTextureDX(System.IntPtr,System.IntPtr,Ab3d.OculusWrap.MirrorTextureDesc@,System.IntPtr@)"/>
            <see cref="M:Ab3d.OculusWrap.OvrWrap.CreateMirrorTextureGL(System.IntPtr,Ab3d.OculusWrap.MirrorTextureDesc,System.IntPtr@)"/>
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap.GetFovTextureSize(System.IntPtr,Ab3d.OculusWrap.EyeType,Ab3d.OculusWrap.FovPort,System.Single)">
            <summary>
            Calculates the recommended viewport size for rendering a given eye within the HMD
            with a given FOV cone. 
            
            Higher FOV will generally require larger textures to maintain quality.
            Apps packing multiple eye views together on the same texture should ensure there are
            at least 8 pixels of padding between them to prevent texture filtering and chromatic
            aberration causing images to leak between the two eye views.
            </summary>
            <param name="sessionPtr">
            Specifies an IntPtr previously returned by Create.
            </param>
            <param name="eye">
            Specifies which eye (left or right) to calculate for.
            </param>
            <param name="fov">
            Specifies the ovrFovPort to use.
            </param>
            <param name="pixelsPerDisplayPixel">
            pixelsPerDisplayPixel Specifies the ratio of the number of render target pixels 
            to display pixels at the center of distortion. 1.0 is the default value. Lower
            values can improve performance, higher values give improved quality.
            </param>
            <returns>
            Returns the texture width and height size.
            </returns>
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap.GetRenderDesc(System.IntPtr,Ab3d.OculusWrap.EyeType,Ab3d.OculusWrap.FovPort)">
            <summary>
            Computes the distortion viewport, view adjust, and other rendering parameters for
            the specified eye.
            </summary>
            <param name="sessionPtr">
            Specifies an IntPtr previously returned by Create.
            </param>
            <param name="eyeType">
            Specifies which eye (left or right) for which to perform calculations.
            </param>
            <param name="fov">
            Specifies the FovPort to use.
            </param>
            <returns>
            Returns the computed EyeRenderDesc for the given eyeType and field of view.
            </returns>
            <see cref="T:Ab3d.OculusWrap.EyeRenderDesc"/>
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap.SubmitFrame(System.IntPtr,System.Int64,System.IntPtr,System.IntPtr,System.Int32)">
            <summary>
            Submits layers for distortion and display.
            
            SubmitFrame triggers distortion and processing which might happen asynchronously. 
            The function will return when there is room in the submission queue and surfaces
            are available. Distortion might or might not have completed.
            </summary>
            <param name="sessionPtr">
            Specifies an IntPtr previously returned by Create.
            </param>
            <param name="frameIndex">
            Specifies the targeted application frame index, or 0 to refer to one frame 
            after the last time SubmitFrame was called.
            </param>
            <param name="viewScaleDesc">
            Provides additional information needed only if layerPtrList contains
            an ovrLayerType_Quad. If null, a default version is used based on the current configuration and a 1.0 world scale.
            </param>
            <param name="layerPtrList">
            Specifies a list of ovrLayer pointers, which can include null entries to
            indicate that any previously shown layer at that index is to not be displayed.
            Each layer header must be a part of a layer structure such as ovrLayerEyeFov or ovrLayerQuad,
            with Header.Type identifying its type. A null layerPtrList entry in the array indicates the 
            absence of the given layer.
            </param>
            <param name="layerCount">
            Indicates the number of valid elements in layerPtrList. The maximum supported layerCount 
            is not currently specified, but may be specified in a future version.
            </param>
            <returns>
            Returns an ovrResult for which the return code is negative upon error and positive
            upon success. Return values include but aren't limited to:
                - Result.Success: rendering completed successfully.
                - Result.NotVisible: rendering completed successfully but was not displayed on the HMD,
                  usually because another application currently has ownership of the HMD. Applications receiving
                  this result should stop rendering new content, but continue to call SubmitFrame periodically
                  until it returns a value other than ovrSuccess_NotVisible.
                - Result.DisplayLost: The session has become invalid (such as due to a device removal)
                  and the shared resources need to be released (DestroyTextureSwapChain), the session needs to
                  destroyed (Destroy) and recreated (Create), and new resources need to be created
                  (CreateTextureSwapChainXXX). The application's existing private graphics resources do not
                  need to be recreated unless the new Create call returns a different GraphicsLuid.
                - Result.TextureSwapChainInvalid: The IntPtr is in an incomplete or inconsistent state. 
                  Ensure CommitTextureSwapChain was called at least once first.
            </returns>
            <remarks>
            layerPtrList must contain an array of pointers. 
            Each pointer must point to an object, which starts with a an LayerHeader property.
            </remarks>
            <see cref="M:Ab3d.OculusWrap.OvrWrap.GetPredictedDisplayTime(System.IntPtr,System.Int64)"/>
            <see cref="T:Ab3d.OculusWrap.ViewScaleDesc"/>
            <see cref="T:Ab3d.OculusWrap.LayerHeader"/>
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap.SubmitFrame(System.IntPtr,System.Int64,System.IntPtr,Ab3d.OculusWrap.LayerEyeFov@)">
            <summary>
            Submits layers for distortion and display.
            
            SubmitFrame triggers distortion and processing which might happen asynchronously. 
            The function will return when there is room in the submission queue and surfaces
            are available. Distortion might or might not have completed.
            </summary>
            <param name="sessionPtr">
            Specifies an IntPtr previously returned by Create.
            </param>
            <param name="frameIndex">
            Specifies the targeted application frame index, or 0 to refer to one frame 
            after the last time SubmitFrame was called.
            </param>
            <param name="viewScaleDesc">
            Provides additional information needed only if layerPtrList contains
            an ovrLayerType_Quad. If null, a default version is used based on the current configuration and a 1.0 world scale.
            </param>
            <param name="layerEyeFov">
            LayerEyeFov
            </param>
            <returns>
            Returns an ovrResult for which the return code is negative upon error and positive
            upon success. Return values include but aren't limited to:
                - Result.Success: rendering completed successfully.
                - Result.NotVisible: rendering completed successfully but was not displayed on the HMD,
                  usually because another application currently has ownership of the HMD. Applications receiving
                  this result should stop rendering new content, but continue to call SubmitFrame periodically
                  until it returns a value other than ovrSuccess_NotVisible.
                - Result.DisplayLost: The session has become invalid (such as due to a device removal)
                  and the shared resources need to be released (DestroyTextureSwapChain), the session needs to
                  destroyed (Destroy) and recreated (Create), and new resources need to be created
                  (CreateTextureSwapChainXXX). The application's existing private graphics resources do not
                  need to be recreated unless the new Create call returns a different GraphicsLuid.
                - Result.TextureSwapChainInvalid: The IntPtr is in an incomplete or inconsistent state. 
                  Ensure CommitTextureSwapChain was called at least once first.
            </returns>
            <remarks>
            layerPtrList must contain an array of pointers. 
            Each pointer must point to an object, which starts with a an LayerHeader property.
            </remarks>
            <see cref="M:Ab3d.OculusWrap.OvrWrap.GetPredictedDisplayTime(System.IntPtr,System.Int64)"/>
            <see cref="T:Ab3d.OculusWrap.ViewScaleDesc"/>
            <see cref="T:Ab3d.OculusWrap.LayerHeader"/>
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap.GetPredictedDisplayTime(System.IntPtr,System.Int64)">
             <summary>
             Gets the time of the specified frame midpoint.
            
             Predicts the time at which the given frame will be displayed. The predicted time 
             is the middle of the time period during which the corresponding eye images will 
             be displayed. 
             
             The application should increment frameIndex for each successively targeted frame,
             and pass that index to any relevent OVR functions that need to apply to the frame
             identified by that index. 
             
             This function is thread-safe and allows for multiple application threads to target 
             their processing to the same displayed frame.
             
             In the even that prediction fails due to various reasons (e.g. the display being off
             or app has yet to present any frames), the return value will be current CPU time.
             </summary>
             <param name="sessionPtr">
             Specifies an IntPtr previously returned by Create.
             </param>
             <param name="frameIndex">
             Identifies the frame the caller wishes to target.
             A value of zero returns the next frame index.
             </param>
             <returns>
             Returns the absolute frame midpoint time for the given frameIndex.
             </returns>
             <see cref="M:Ab3d.OculusWrap.OvrWrap.GetTimeInSeconds"/>
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap.GetTimeInSeconds">
             <summary>
             Returns global, absolute high-resolution time in seconds. 
            
             The time frame of reference for this function is not specified and should not be
             depended upon.
             </summary>
             <returns>
             Returns seconds as a floating point value.
             </returns>
             <see cref="T:Ab3d.OculusWrap.PoseStatef"/>
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap.GetBool(System.IntPtr,System.String,System.Boolean)">
            <summary>
            Reads a boolean property.
            </summary>
            <param name="sessionPtr">
            Specifies an IntPtr previously returned by Create.
            </param>
            <param name="propertyName">
            The name of the property, which needs to be valid for only the call.
            </param>
            <param name="defaultValue">
            Specifies the value to return if the property couldn't be read.
            </param>
            <returns>
            Returns the property interpreted as a boolean value. 
            Returns defaultValue if the property doesn't exist.
            </returns>
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap.SetBool(System.IntPtr,System.String,System.Boolean)">
            <summary>
            Writes or creates a boolean property.
            If the property wasn't previously a boolean property, it is changed to a boolean property.
            </summary>
            <param name="sessionPtr">
            Specifies an IntPtr previously returned by Create.
            </param>
            <param name="propertyName">
            The name of the property, which needs to be valid for only the call.
            </param>
            <param name="value">
            The value to write.
            </param>
            <returns>
            Returns true if successful, otherwise false. 
            A false result should only occur if the property name is empty or if the property is read-only.
            </returns>
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap.GetInt(System.IntPtr,System.String,System.Int32)">
            <summary>
            Reads an integer property.
            </summary>
            <param name="sessionPtr">
            Specifies an IntPtr previously returned by Create.
            </param>
            <param name="propertyName">
            The name of the property, which needs to be valid for only the call.
            </param>
            <param name="defaultValue">
            Specifes the value to return if the property couldn't be read.
            </param>
            <returns>
            Returns the property interpreted as an integer value. 
            Returns defaultValue if the property doesn't exist.
            </returns>
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap.SetInt(System.IntPtr,System.String,System.Int32)">
            <summary>
            Writes or creates an integer property.
            
            If the property wasn't previously an integer property, it is changed to an integer property.
            </summary>
            <param name="sessionPtr">
            Specifies an IntPtr previously returned by Create.
            </param>
            <param name="propertyName">
            The name of the property, which needs to be valid for only the call.
            </param>
            <param name="value">
            The value to write.
            </param>
            <returns>
            Returns true if successful, otherwise false. 
            A false result should only occur if the property name is empty or if the property is read-only.
            </returns>
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap.GetFloat(System.IntPtr,System.String,System.Single)">
            <summary>
            Reads a float property.
            </summary>
            <param name="sessionPtr">
            Specifies an IntPtr previously returned by Create.
            </param>
            <param name="propertyName">
            The name of the property, which needs to be valid for only the call.
            </param>
            <param name="defaultValue">
            Specifies the value to return if the property couldn't be read.
            </param>
            <returns>
            Returns the property interpreted as an float value. 
            Returns defaultValue if the property doesn't exist.
            </returns>
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap.SetFloat(System.IntPtr,System.String,System.Single)">
            <summary>
            Writes or creates a float property.
            
            If the property wasn't previously a float property, it's changed to a float property.
            </summary>
            <param name="sessionPtr">
            Specifies an IntPtr previously returned by Create.
            </param>
            <param name="propertyName">
            The name of the property, which needs to be valid for only the call.
            </param>
            <param name="value">
            The value to write.
            </param>
            <returns>
            Returns true if successful, otherwise false. 
            A false result should only occur if the property name is empty or if the property is read-only.
            </returns>
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap.GetFloatArray(System.IntPtr,System.String,System.Single[],System.Int32)">
            <summary>
            Reads a float array property.
            </summary>
            <param name="sessionPtr">
            Specifies an IntPtr previously returned by Create.
            </param>
            <param name="propertyName">
            The name of the property, which needs to be valid for only the call.
            </param>
            <param name="values">
            An array of float to write to.
            </param>
            <param name="valuesCapacity">
            Specifies the maximum number of elements to write to the values array.
            </param>
            <returns>
            Returns the number of elements read, or 0 if property doesn't exist or is empty.
            </returns>
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap.SetFloatArray(System.IntPtr,System.String,System.Single[],System.Int32)">
            <summary>
            Writes or creates a float array property.
            </summary>
            <param name="sessionPtr">
            Specifies an IntPtr previously returned by Create.
            </param>
            <param name="propertyName">
            The name of the property, which needs to be valid for only the call.
            </param>
            <param name="values">
            An array of float to write from.
            </param>
            <param name="valuesSize">
            Specifies the number of elements to write.
            </param>
            <returns>
            Returns true if successful, otherwise false. 
            A false result should only occur if the property name is empty or if the property is read-only.
            </returns>
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap.GetString(System.IntPtr,System.String,System.String)">
            <summary>
            Reads a string property.
            Strings are UTF8-encoded and null-terminated.
            </summary>
            <param name="sessionPtr">
            Specifies an IntPtr previously returned by Create.
            </param>
            <param name="propertyName">
            The name of the property, which needs to be valid for only the call.
            </param>
            <param name="defaultValue">
            Specifies the value to return if the property couldn't be read.
            </param>
            <returns>
            Returns the string property if it exists. 
            
            Otherwise returns defaultValue, which can be specified as null.
            The return memory is guaranteed to be valid until next call to GetString or 
            until the HMD is destroyed, whichever occurs first.
            </returns>
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap.SetString(System.IntPtr,System.String,System.String)">
            <summary>
            Writes or creates a string property.
            Strings are UTF8-encoded and null-terminated.
            </summary>
            <param name="sessionPtr">
            Specifies an IntPtr previously returned by Create.
            </param>
            <param name="propertyName">
            The name of the property, which needs to be valid for only the call.
            </param>
            <param name="value">
            The string property, which only needs to be valid for the duration of the call.
            </param>
            <returns>
            Returns true if successful, otherwise false. 
            
            A false result should only occur if the property name is empty or if the property is read-only.
            </returns>
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap.Matrix4f_Projection(Ab3d.OculusWrap.FovPort,System.Single,System.Single,Ab3d.OculusWrap.ProjectionModifier)">
            <summary>
            Used to generate projection from ovrEyeDesc::Fov.
            </summary>
            <param name="fov">
            Specifies the ovrFovPort to use.
            </param>
            <param name="zNear">
            Distance to near Z limit.
            </param>
            <param name="zFar">
            Distance to far Z limit.
            </param>
            <param name="projectionModFlags">
            A combination of the ProjectionModifier flags.
            </param>
            <returns>
            Returns the calculated projection matrix.
            </returns>
            <see cref="T:Ab3d.OculusWrap.ProjectionModifier"/>
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap.TimewarpProjectionDesc_FromProjection(Ab3d.OculusWrap.Matrix4f,Ab3d.OculusWrap.ProjectionModifier)">
            <summary>
            Extracts the required data from the result of ovrMatrix4f_Projection.
            </summary>
            <param name="projection">Specifies the project matrix from which to extract ovrTimewarpProjectionDesc.</param>
            <param name="projectionModFlags">A combination of the ProjectionModifier flags.</param>
            <returns>Returns the extracted ovrTimewarpProjectionDesc.</returns>
            <see cref="T:Ab3d.OculusWrap.TimewarpProjectionDesc"/>
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap.Matrix4f_OrthoSubProjection(Ab3d.OculusWrap.Matrix4f,Ab3d.OculusWrap.Vector2f,System.Single,System.Single)">
             <summary>
             Generates an orthographic sub-projection.
            
             Used for 2D rendering, Y is down.
             </summary>
             <param name="projection">
             The perspective matrix that the orthographic matrix is derived from.
             </param>
             <param name="orthoScale">
             Equal to 1.0f / pixelsPerTanAngleAtCenter.
             </param>
             <param name="orthoDistance">
             Equal to the distance from the camera in meters, such as 0.8m.
             </param>
             <param name="hmdToEyeOffsetX">
             Specifies the offset of the eye from the center.
             </param>
             <returns>
             Returns the calculated projection matrix.
             </returns>
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap.CalcEyePoses(Ab3d.OculusWrap.Posef,Ab3d.OculusWrap.Vector3f[],Ab3d.OculusWrap.Posef[]@)">
            <summary>
            Computes offset eye poses based on headPose returned by TrackingState.
            </summary>
            <param name="headPose">
            Indicates the HMD position and orientation to use for the calculation.
            </param>
            <param name="hmdToEyeOffset">
            Can EyeRenderDesc.HmdToEyeOffset returned from 
            GetRenderDesc. For monoscopic rendering, use a vector that is the average 
            of the two vectors for both eyes.
            </param>
            <param name="eyePoses">
            If outEyePoses are used for rendering, they should be passed to 
            SubmitFrame in LayerEyeFov.RenderPose or LayerEyeFovDepth.RenderPose.
            </param>
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap.GetEyePoses(System.IntPtr,System.Int64,System.Boolean,Ab3d.OculusWrap.Vector3f[],Ab3d.OculusWrap.Posef[]@,System.Double@)">
            <summary>
            Returns the predicted head pose in HmdTrackingState and offset eye poses in outEyePoses. 
            
            This is a thread-safe function where caller should increment frameIndex with every frame
            and pass that index where applicable to functions called on the rendering thread.
            Assuming outEyePoses are used for rendering, it should be passed as a part of ovrLayerEyeFov.
            The caller does not need to worry about applying HmdToEyeOffset to the returned outEyePoses variables.
            </summary>
            <param name="sessionPtr">IntPtr previously returned by Create.</param>
            <param name="frameIndex">
            Specifies the targeted frame index, or 0 to refer to one frame after 
            the last time SubmitFrame was called.
            </param>
            <param name="latencyMarker">
            Specifies that this call is the point in time where
            the "App-to-Mid-Photon" latency timer starts from. If a given ovrLayer
            provides "SensorSampleTimestamp", that will override the value stored here.
            </param>
            <param name="hmdToEyeOffset">
            Can be EyeRenderDesc.HmdToEyeOffset returned from GetRenderDesc. 
            For monoscopic rendering, use a vector that is the average of the two vectors for both eyes.
            </param>
            <param name="eyePoses">
            The predicted eye poses.
            </param>
            <param name="sensorSampleTime">
            The time when this function was called. 
            May be null, in which case it is ignored.
            </param>
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap.Posef_FlipHandedness(Ab3d.OculusWrap.Posef@,Ab3d.OculusWrap.Posef@)">
             <summary>
             Tracking poses provided by the SDK come in a right-handed coordinate system. If an application
             is passing in ovrProjection_LeftHanded into ovrMatrix4f_Projection, then it should also use
             this function to flip the HMD tracking poses to be left-handed.
            
             While this utility function is intended to convert a left-handed ovrPosef into a right-handed
             coordinate system, it will also work for converting right-handed to left-handed since the
             flip operation is the same for both cases.
             </summary>
             <param name="inPose">inPose that is right-handed</param>
             <param name="outPose">outPose that is requested to be left-handed (can be the same pointer to inPose)</param>
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap.CreateTextureSwapChainDX(System.IntPtr,System.IntPtr,Ab3d.OculusWrap.TextureSwapChainDesc@,System.IntPtr@)">
            <summary>
            Create Texture Swap Chain suitable for use with Direct3D 11 and 12.
            </summary>
            <param name="sessionPtr">Specifies an IntPtr previously returned by Create.</param>
            <param name="d3dDevicePtr">
            Specifies the application's D3D11Device to create resources with or the D3D12CommandQueue 
            which must be the same one the application renders to the eye textures with.</param>
            <param name="desc">Specifies requested texture properties. See notes for more info about texture format.</param>
            <param name="textureSwapChainPtr">
            Returns the created IntPtr, which will be valid upon a successful return value, else it will be null.
            This texture chain must be eventually destroyed via DestroyTextureSwapChain before destroying the HMD with Destroy.
            </param>
            <returns>
            Returns an ovrResult indicating success or failure. In the case of failure, use 
            GetLastErrorInfo to get more information.
            </returns>
            <remarks>
            The texture format provided in desc should be thought of as the format the distortion-compositor will use for the
            ShaderResourceView when reading the contents of the texture. To that end, it is highly recommended that the application
            requests texture swapchain formats that are in sRGB-space (e.g. OVR_FORMAT_R8G8B8A8_UNORM_SRGB) as the compositor
            does sRGB-correct rendering. As such, the compositor relies on the GPU's hardware sampler to do the sRGB-to-linear
            conversion. If the application still prefers to render to a linear format (e.g. OVR_FORMAT_R8G8B8A8_UNORM) while handling the
            linear-to-gamma conversion via HLSL code, then the application must still request the corresponding sRGB format and also use
            the ovrTextureMisc_DX_Typeless flag in the IntPtrDesc's Flag field. This will allow the application to create
            a RenderTargetView that is the desired linear format while the compositor continues to treat it as sRGB. Failure to do so
            will cause the compositor to apply unexpected gamma conversions leading to gamma-curve artifacts. The ovrTextureMisc_DX_Typeless
            flag for depth buffer formats (e.g. OVR_FORMAT_D32_FLOAT) is ignored as they are always converted to be typeless.
            </remarks>
            <see cref="M:Ab3d.OculusWrap.OvrWrap.GetTextureSwapChainLength(System.IntPtr,System.IntPtr,System.Int32@)"/>
            <see cref="M:Ab3d.OculusWrap.OvrWrap.GetTextureSwapChainCurrentIndex(System.IntPtr,System.IntPtr,System.Int32@)"/>
            <see cref="M:Ab3d.OculusWrap.OvrWrap.GetTextureSwapChainDesc(System.IntPtr,System.IntPtr,Ab3d.OculusWrap.TextureSwapChainDesc@)"/>
            <see cref="M:Ab3d.OculusWrap.OvrWrap.GetTextureSwapChainBufferDX(System.IntPtr,System.IntPtr,System.Int32,System.Guid,System.IntPtr@)"/>
            <see cref="M:Ab3d.OculusWrap.OvrWrap.DestroyTextureSwapChain(System.IntPtr,System.IntPtr)"/>
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap.GetTextureSwapChainBufferDX(System.IntPtr,System.IntPtr,System.Int32,System.Guid,System.IntPtr@)">
            <summary>
            Get a specific buffer within the chain as any compatible COM interface (similar to QueryInterface)
            </summary>
            <param name="sessionPtr">Specifies an IntPtr previously returned by Create.</param>
            <param name="chain">Specifies an IntPtr previously returned by CreateTextureSwapChainDX</param>
            <param name="index">
            Specifies the index within the chain to retrieve. Must be between 0 and length (see GetTextureSwapChainLength),
            or may pass -1 to get the buffer at the CurrentIndex location. (Saving a call to GetTextureSwapChainCurrentIndex).
            </param>
            <param name="iid">Specifies the interface ID of the interface pointer to query the buffer for.</param>
            <param name="buffer">Returns the COM interface pointer retrieved.</param>
            <returns>
            Returns an ovrResult indicating success or failure. In the case of failure, use 
            GetLastErrorInfo to get more information.
            </returns>
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap.CreateMirrorTextureDX(System.IntPtr,System.IntPtr,Ab3d.OculusWrap.MirrorTextureDesc@,System.IntPtr@)">
             <summary>
             Create Mirror Texture which is auto-refreshed to mirror Rift contents produced by this application.
            
             A second call to CreateMirrorTextureDX for a given IntPtr before destroying the first one
             is not supported and will result in an error return.
             </summary>
             <param name="sessionPtr">Specifies an IntPtr previously returned by Create.</param>
             <param name="d3dDevicePtr">
             Specifies the application's D3D11Device to create resources with or the D3D12CommandQueue
             which must be the same one the application renders to the textures with.
             </param>
             <param name="desc">Specifies requested texture properties. See notes for more info about texture format.</param>
             <param name="mirrorTexturePtr">
             Returns the created IntPtr, which will be valid upon a successful return value, else it will be null.
             This texture must be eventually destroyed via DestroyMirrorTexture before destroying the HMD with Destroy.
             </param>
             <returns>
             Returns an ovrResult indicating success or failure. In the case of failure, use 
             GetLastErrorInfo to get more information.
             </returns>
             <remarks>
             The texture format provided in desc should be thought of as the format the compositor will use for the RenderTargetView when
             writing into mirror texture. To that end, it is highly recommended that the application requests a mirror texture format that is
             in sRGB-space (e.g. OVR.TextureFormat.R8G8B8A8_UNORM_SRGB) as the compositor does sRGB-correct rendering. If however the application wants
             to still read the mirror texture as a linear format (e.g. OVR.TextureFormat.OVR_FORMAT_R8G8B8A8_UNORM) and handle the sRGB-to-linear conversion in
             HLSL code, then it is recommended the application still requests an sRGB format and also use the ovrTextureMisc_DX_Typeless flag in the
             IntPtrDesc's Flags field. This will allow the application to bind a ShaderResourceView that is a linear format while the
             compositor continues to treat is as sRGB. Failure to do so will cause the compositor to apply unexpected gamma conversions leading to 
             gamma-curve artifacts.
             </remarks>
             <see cref="M:Ab3d.OculusWrap.OvrWrap.GetMirrorTextureBufferDX(System.IntPtr,System.IntPtr,System.Guid,System.IntPtr@)"/>
             <see cref="M:Ab3d.OculusWrap.OvrWrap.DestroyMirrorTexture(System.IntPtr,System.IntPtr)"/>
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap.GetMirrorTextureBufferDX(System.IntPtr,System.IntPtr,System.Guid,System.IntPtr@)">
            <summary>
            Get a the underlying buffer as any compatible COM interface (similar to QueryInterface) 
            </summary>
            <param name="sessionPtr">Specifies an IntPtr previously returned by Create.</param>
            <param name="mirrorTexturePtr">Specifies an IntPtr previously returned by CreateMirrorTextureDX</param>
            <param name="iid">Specifies the interface ID of the interface pointer to query the buffer for.</param>
            <param name="buffer">Returns the COM interface pointer retrieved.</param>
            <returns>
            Returns an ovrResult indicating success or failure. In the case of failure, use 
            GetLastErrorInfo to get more information.
            </returns>
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap.CreateTextureSwapChainGL(System.IntPtr,Ab3d.OculusWrap.TextureSwapChainDesc,System.IntPtr@)">
            <summary>
            Creates a TextureSwapChain suitable for use with OpenGL.
            </summary>
            <param name="sessionPtr">Specifies an IntPtr previously returned by Create.</param>
            <param name="desc">Specifies the requested texture properties. See notes for more info about texture format.</param>
            <param name="textureSwapChainPtr">
            Returns the created IntPtr, which will be valid upon
            a successful return value, else it will be null. This texture swap chain must be eventually
            destroyed via DestroyTextureSwapChain before destroying the HMD with Destroy.
            </param>
            <returns>
            Returns an ovrResult indicating success or failure. In the case of failure, use 
            GetLastErrorInfo to get more information.
            </returns>
            <remarks>
            The format provided should be thought of as the format the distortion compositor will use when reading
            the contents of the texture. To that end, it is highly recommended that the application requests texture swap chain
            formats that are in sRGB-space (e.g. Format.R8G8B8A8_UNORM_SRGB) as the distortion compositor does sRGB-correct
            rendering. Furthermore, the app should then make sure "glEnable(GL_FRAMEBUFFER_SRGB);" is called before rendering
            into these textures. Even though it is not recommended, if the application would like to treat the texture as a linear
            format and do linear-to-gamma conversion in GLSL, then the application can avoid calling "glEnable(GL_FRAMEBUFFER_SRGB);",
            but should still pass in an sRGB variant for the format. Failure to do so will cause the distortion compositor
            to apply incorrect gamma conversions leading to gamma-curve artifacts.		
            </remarks>
            <see cref="M:Ab3d.OculusWrap.OvrWrap.GetTextureSwapChainLength(System.IntPtr,System.IntPtr,System.Int32@)"/>
            <see cref="M:Ab3d.OculusWrap.OvrWrap.GetTextureSwapChainCurrentIndex(System.IntPtr,System.IntPtr,System.Int32@)"/>
            <see cref="M:Ab3d.OculusWrap.OvrWrap.GetTextureSwapChainDesc(System.IntPtr,System.IntPtr,Ab3d.OculusWrap.TextureSwapChainDesc@)"/>
            <see cref="M:Ab3d.OculusWrap.OvrWrap.GetTextureSwapChainBufferGL(System.IntPtr,System.IntPtr,System.Int32,System.UInt32@)"/>
            <see cref="M:Ab3d.OculusWrap.OvrWrap.DestroyTextureSwapChain(System.IntPtr,System.IntPtr)"/>
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap.GetTextureSwapChainBufferGL(System.IntPtr,System.IntPtr,System.Int32,System.UInt32@)">
            <summary>
            Get a specific buffer within the chain as a GL texture name
            </summary>
            <param name="sessionPtr">Specifies an IntPtr previously returned by Create.</param>
            <param name="chain">Specifies an IntPtr previously returned by CreateTextureSwapChainGL</param>
            <param name="index">
            Specifies the index within the chain to retrieve. Must be between 0 and length (see GetTextureSwapChainLength)
            or may pass -1 to get the buffer at the CurrentIndex location. (Saving a call to GetTextureSwapChainCurrentIndex)
            </param>
            <param name="textureId">Returns the GL texture object name associated with the specific index requested</param>
            <returns>
            Returns an ovrResult indicating success or failure. In the case of failure, use 
            GetLastErrorInfo to get more information.
            </returns>
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap.CreateMirrorTextureGL(System.IntPtr,Ab3d.OculusWrap.MirrorTextureDesc,System.IntPtr@)">
             <summary>
             Creates a Mirror Texture which is auto-refreshed to mirror Rift contents produced by this application.
            
             A second call to CreateMirrorTextureGL for a given IntPtr before destroying the first one
             is not supported and will result in an error return.
             </summary>
             <param name="sessionPtr">Specifies an IntPtr previously returned by Create.</param>
             <param name="desc">Specifies the requested mirror texture description.</param>
             <param name="mirrorTexturePtr">
             Specifies the created IntPtr, which will be valid upon a successful return value, else it will be null.
             This texture must be eventually destroyed via DestroyMirrorTexture before destroying the HMD with Destroy.
             </param>
             <returns>
             Returns an ovrResult indicating success or failure. In the case of failure, use 
             GetLastErrorInfo to get more information.
             </returns>
             <remarks>
             The format provided should be thought of as the format the distortion compositor will use when writing into the mirror
             texture. It is highly recommended that mirror textures are requested as sRGB formats because the distortion compositor
             does sRGB-correct rendering. If the application requests a non-sRGB format (e.g. R8G8B8A8_UNORM) as the mirror texture,
             then the application might have to apply a manual linear-to-gamma conversion when reading from the mirror texture.
             Failure to do so can result in incorrect gamma conversions leading to gamma-curve artifacts and color banding.
             </remarks>
             <see cref="M:Ab3d.OculusWrap.OvrWrap.GetMirrorTextureBufferGL(System.IntPtr,System.IntPtr,System.UInt32@)"/>
             <see cref="M:Ab3d.OculusWrap.OvrWrap.DestroyMirrorTexture(System.IntPtr,System.IntPtr)"/>
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap.GetMirrorTextureBufferGL(System.IntPtr,System.IntPtr,System.UInt32@)">
            <summary>
            Get a the underlying buffer as a GL texture name
            </summary>
            <param name="sessionPtr">Specifies an IntPtr previously returned by Create.</param>
            <param name="mirrorTexturePtr">Specifies an IntPtr previously returned by CreateMirrorTextureGL</param>
            <param name="textureId">Specifies the GL texture object name associated with the mirror texture</param>
            <returns>
            Returns an ovrResult indicating success or failure. In the case of failure, use 
            GetLastErrorInfo to get more information.
            </returns>
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap.IdentifyClient(System.String)">
            <summary>
            Identify client application info.
            </summary>
            <remarks>
            The string is one or more newline-delimited lines of optional info
            indicating engine name, engine version, engine plugin name, engine plugin
            version, engine editor. The order of the lines is not relevant. Individual
            lines are optional. A newline is not necessary at the end of the last line.
            Call after ovr_Initialize and before the first call to ovr_Create.
            Each value is limited to 20 characters. Key names such as 'EngineName:'
            'EngineVersion:' do not count towards this limit.
            </remarks>
            <param name="identity">
            Specifies one or more newline-delimited lines of optional info:<br/>
                        EngineName: %s\n<br/>
                        EngineVersion: %s\n<br/>
                        EnginePluginName: %s\n<br/>
                        EnginePluginVersion: %s\n<br/>
                        EngineEditor: ('true' or 'false')\n
            </param>
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap.GetTouchHapticsDesc(System.IntPtr,Ab3d.OculusWrap.ControllerType)">
            <summary>
            Gets information about Haptics engine for the specified Touch controller.
            </summary>
            <param name="sessionPtr">Specifies an IntPtr previously returned by ovr_Create.</param>
            <param name="controllerType">The controller to retrieve the information from.</param>
            <returns>
            Returns an TouchHapticsDesc.
            </returns>
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap.SubmitControllerVibration(System.IntPtr,Ab3d.OculusWrap.ControllerType,Ab3d.OculusWrap.HapticsBuffer)">
            <summary>
            Submits a Haptics buffer (used for vibration) to Touch (only) controllers.
            Note: ovr_SubmitControllerVibration cannot be used interchangeably with ovr_SetControllerVibration.
            </summary>
            <param name="sessionPtr">Specifies an IntPtr previously returned by ovr_Create.</param>
            <param name="controllerType">The controller to retrieve the information from.</param>
            <param name="buffer">Haptics buffer containing amplitude samples to be played.</param>
            <returns>
            Returns an ovrResult for which OVR_SUCCESS(result) is false upon error and true
                     upon success. Return values include but aren't limited to:
                 - ovrSuccess: The call succeeded and a result was returned.
                 - ovrSuccess_DeviceUnavailable: The call succeeded but the device referred to by controllerType is not available.
            </returns> 
            <seealso cref="T:Ab3d.OculusWrap.HapticsBuffer"/>       
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap.GetControllerVibrationState(System.IntPtr,Ab3d.OculusWrap.ControllerType,Ab3d.OculusWrap.HapticsPlaybackState@)">
            <summary>
            Gets the Haptics engine playback state of a specific Touch controller.
            </summary>
            <param name="sessionPtr">Specifies an IntPtr previously returned by ovr_Create.</param>
            <param name="controllerType">The controller to retrieve the information from.</param>
            <param name="state">state of the haptics engine.</param>
            <returns>
            Returns an ovrResult for which OVR_SUCCESS(result) is false upon error and true
                     upon success. Return values include but aren't limited to:
                 - ovrSuccess: The call succeeded and a result was returned.
                 - ovrSuccess_DeviceUnavailable: The call succeeded but the device referred to by controllerType is not available.
             </returns>   
            <seealso cref="T:Ab3d.OculusWrap.HapticsPlaybackState"/> 
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap.TestBoundary(System.IntPtr,Ab3d.OculusWrap.TrackedDeviceType,Ab3d.OculusWrap.BoundaryType,Ab3d.OculusWrap.BoundaryTestResult@)">
            <summary>
            Tests collision/proximity of position tracked devices (e.g. HMD and/or Touch) against the Boundary System.
            Note: this method is similar to ovr_BoundaryTestPoint but can be more precise as it may take into account device acceleration/momentum.
            </summary>
            <param name="sessionPtr">Specifies an IntPtr previously returned by ovr_Create.</param>
            <param name="deviceBitmask">Bitmask of one or more tracked devices to test.</param>
            <param name="boundaryType">Must be either ovrBoundary_Outer or ovrBoundary_PlayArea.</param>
            <param name="testResult">Result of collision/proximity test, contains information such as distance and closest point.</param>
            <returns>
            Returns an ovrResult for which OVR_SUCCESS(result) is false upon error and true
                    upon success. Return values include but aren't limited to:
                - ovrSuccess: The call succeeded and a result was returned.
                - ovrSuccess_BoundaryInvalid: The call succeeded but the result is not a valid boundary due to not being set up.
                - ovrSuccess_DeviceUnavailable: The call succeeded but the device referred to by deviceBitmask is not available.
            </returns>   
            <seealso cref="T:Ab3d.OculusWrap.BoundaryTestResult"/> 
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap.TestBoundaryPoint(System.IntPtr,Ab3d.OculusWrap.Vector3f,Ab3d.OculusWrap.BoundaryType,Ab3d.OculusWrap.BoundaryTestResult@)">
            <summary>
            Tests collision/proximity of a 3D point against the Boundary System.
            </summary>
            <param name="sessionPtr">Specifies an IntPtr previously returned by ovr_Create.</param>
            <param name="point">3D point to test.</param>
            <param name="singleBoundaryType">Must be either ovrBoundary_Outer or ovrBoundary_PlayArea to test against</param>
            <param name="testResult">Result of collision/proximity test, contains information such as distance and closest point.</param>
            <returns>
            Returns an ovrResult for which OVR_SUCCESS(result) is false upon error and true
                    upon success. Return values include but aren't limited to:
                - ovrSuccess: The call succeeded and a result was returned.
                - ovrSuccess_BoundaryInvalid: The call succeeded but the result is not a valid boundary due to not being set up.
            </returns>   
            <seealso cref="T:Ab3d.OculusWrap.BoundaryTestResult"/>         
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap.SetBoundaryLookAndFeel(System.IntPtr,Ab3d.OculusWrap.BoundaryLookAndFeel@)">
            <summary>
            Sets the look and feel of the Boundary System.
            </summary>
            <param name="sessionPtr">Specifies an IntPtr previously returned by ovr_Create.</param>
            <param name="lookAndFeel">Look and feel parameters.</param>
            <returns>
            Returns ovrSuccess upon success.
            </returns>   
            <seealso cref="T:Ab3d.OculusWrap.BoundaryLookAndFeel"/>   
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap.ResetBoundaryLookAndFeel(System.IntPtr)">
            <summary>
            Resets the look and feel of the Boundary System to its default state.
            </summary>
            <param name="sessionPtr">Specifies an IntPtr previously returned by ovr_Create.</param>
            <returns>
            Returns ovrSuccess upon success.
            </returns>
            <seealso cref="T:Ab3d.OculusWrap.BoundaryLookAndFeel"/>     
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap.GetBoundaryGeometry(System.IntPtr,Ab3d.OculusWrap.BoundaryType,Ab3d.OculusWrap.Vector3f[]@)">
            <summary>
            Gets the geometry of the Boundary System's "play area" or "outer boundary" as 3D floor points.
            </summary>
            <param name="sessionPtr">Specifies an IntPtr previously returned by ovr_Create.</param>
            <param name="boundaryType">Must be either ovrBoundary_Outer or ovrBoundary_PlayArea.</param>
            <param name="floorPoints">Array of 3D points (in clockwise order) defining the boundary at floor height</param>
            <returns>
            Returns an ovrResult for which OVR_SUCCESS(result) is false upon error and true
                    upon success. Return values include but aren't limited to:
                - ovrSuccess: The call succeeded and a result was returned.
                - ovrSuccess_BoundaryInvalid: The call succeeded but the result is not a valid boundary due to not being set up.
            </returns>   
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap.GetBoundaryDimensions(System.IntPtr,Ab3d.OculusWrap.BoundaryType,Ab3d.OculusWrap.Vector3f@)">
            <summary>
            Gets the dimension of the Boundary System's "play area" or "outer boundary".
            </summary>
            <param name="sessionPtr">Specifies an IntPtr previously returned by ovr_Create.</param>
            <param name="boundaryType">Must be either ovrBoundary_Outer or ovrBoundary_PlayArea.</param>
            <param name="dimensions">Dimensions of the axis aligned bounding box that encloses the area in meters (width, height and length).</param>
            <returns>
            Returns an ovrResult for which OVR_SUCCESS(result) is false upon error and true
                    upon success. Return values include but aren't limited to:
                - ovrSuccess: The call succeeded and a result was returned.
                - ovrSuccess_BoundaryInvalid: The call succeeded but the result is not a valid boundary due to not being set up.
            </returns>   
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap.GetBoundaryVisible(System.IntPtr,System.Boolean@)">
            <summary>
            Returns if the boundary is currently visible.
            Note: visibility is false if the user has turned off boundaries, otherwise, it's true if the app has requested 
            boundaries to be visible or if any tracked device is currently triggering it. This may not exactly match rendering 
            due to fade-in and fade-out effects.
            </summary>
            <param name="sessionPtr">Specifies an IntPtr previously returned by ovr_Create.</param>
            <param name="isVisible">ovrTrue, if the boundary is visible.</param>
            <returns>
            Returns an ovrResult for which OVR_SUCCESS(result) is false upon error and true
                    upon success. Return values include but aren't limited to:
                - ovrSuccess: Result was successful and a result was returned.
                - ovrSuccess_BoundaryInvalid: The call succeeded but the result is not a valid boundary due to not being set up.
            </returns>   
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap.RequestBoundaryVisible(System.IntPtr,System.Boolean)">
            <summary>
            Requests boundary to be visible.
            </summary>
            <param name="sessionPtr">Specifies an IntPtr previously returned by ovr_Create.</param>
            <param name="visible">forces the outer boundary to be visible. An application can't force it to be invisible, but can cancel its request by passing false.</param>
            <returns>
            Returns ovrSuccess upon success.
            </returns>   
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap.GetPerfStats(System.IntPtr,Ab3d.OculusWrap.PerfStats@)">
              <summary>
             Retrieves performance stats for the VR app as well as the SDK compositor.
            
             This function will return stats for the VR app that is currently visible in the HMD
             regardless of what VR app is actually calling this function.
            
             If the VR app is trying to make sure the stats returned belong to the same application,
             the caller can compare the VisibleProcessId with their own process ID. Normally this will
             be the case if the caller is only calling ovr_GetPerfStats when ovr_GetSessionStatus has
             IsVisible flag set to be true.
            
             If the VR app calling ovr_GetPerfStats is actually the one visible in the HMD,
             then new perf stats will only be populated after a new call to ovr_SubmitFrame.
             That means subsequent calls to ovr_GetPerfStats after the first one without calling
             ovr_SubmitFrame will receive a FrameStatsCount of zero.
            
             If the VR app is not visible, or was initially marked as ovrInit_Invisible, then each call
             to ovr_GetPerfStats will immediately fetch new perf stats from the compositor without
             a need for the ovr_SubmitFrame call.
            
             Even though invisible VR apps do not require ovr_SubmitFrame to be called to gather new
             perf stats, since stats are generated at the native refresh rate of the HMD (i.e. 90 Hz
             for CV1), calling it at a higher rate than that would be unnecessary.
             </summary>
             <param name="sessionPtr">Specifies an IntPtr previously returned by ovr_Create.</param>
             <param name="stats">Contains the performance stats for the application and SDK compositor</param>
             <returns>
              Returns an ovrResult for which OVR_SUCCESS(result) is false upon error and true
                     upon success.
              </returns> 
             <seealso cref="T:Ab3d.OculusWrap.PerfStats"/>  
             <seealso cref="T:Ab3d.OculusWrap.PerfStatsPerCompositorFrame"/>  
             <seealso cref="M:Ab3d.OculusWrap.OvrWrap.ResetPerfStats(System.IntPtr)"/>  
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap.ResetPerfStats(System.IntPtr)">
             <summary>
             Resets the accumulated stats reported in each ovrPerfStatsPerCompositorFrame back to zero.
            
             Only the integer values such as HmdVsyncIndex, AppDroppedFrameCount etc. will be reset
             as the other fields such as AppMotionToPhotonLatency are independent timing values updated
             per-frame.
             </summary>
             <param name="sessionPtr">Specifies an IntPtr previously returned by ovr_Create.</param>
             <returns>
             Returns an ovrResult for which OVR_SUCCESS(result) is false upon error and true
                     upon success.
             </returns>   
             <seealso cref="T:Ab3d.OculusWrap.PerfStats"/>  
             <seealso cref="T:Ab3d.OculusWrap.PerfStatsPerCompositorFrame"/>  
             <seealso cref="M:Ab3d.OculusWrap.OvrWrap.GetPerfStats(System.IntPtr,Ab3d.OculusWrap.PerfStats@)"/>          
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap.GetExternalCameras(System.IntPtr,Ab3d.OculusWrap.ExternalCamera[]@)">
            <summary>
            Returns the number of camera properties of all cameras
            </summary>
            <param name="sessionPtr">session Specifies an ovrSession previously returned by ovr_Create.</param>
            <param name="cameras"></param>
            <returns>Returns the ids of external cameras the system knows about. Returns ovrError_NoExternalCameraInfo if there is not any eternal camera information.</returns>
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap.SetExternalCameraProperties(System.IntPtr,System.String,Ab3d.OculusWrap.CameraIntrinsics@,Ab3d.OculusWrap.CameraExtrinsics@)">
            <summary>
            Sets the camera intrinsics and/or extrinsics stored for the cameraName camera Names must be less then 32 characters and null-terminated.
            </summary>
            <param name="sessionPtr">session Specifies an ovrSession previously returned by ovr_Create.</param>
            <param name="name">Specifies which camera to set the intrinsics or extrinsics for</param>
            <param name="intrinsics">Contains the intrinsic parameters to set, can be null</param>
            <param name="extrinsics">Contains the extrinsic parameters to set, can be null</param>
            <returns>Returns ovrSuccess or an ovrError code</returns>
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap.NativeMethods.LoadLibrary(System.String)">
            <summary>
            Loads a dll into process memory.
            </summary>
            <param name="lpFileName">Filename to load.</param>
            <returns>Pointer to the loaded library.</returns>
            <remarks>
            This method is used to load the DllOVR.dll into memory, before calling any of it's DllImported methods.
            </remarks>
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap.NativeMethods.FreeLibrary(System.IntPtr)">
            <summary>
            Frees a previously loaded dll, from process memory.
            </summary>
            <param name="hModule">Pointer to the previously loaded library (This pointer comes from a call to LoadLibrary).</param>
            <returns>Returns true if the library was successfully freed.</returns>
        </member>
        <member name="T:Ab3d.OculusWrap.OvrWrap32">
            <summary>
            OvrWrap32 is an instance of base <see cref="T:Ab3d.OculusWrap.OvrWrap"/> class that is created for x86 process. See remarks of the base class for more info.
            </summary>
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap32.SafeNativeMethods.ovr_Detect(System.Int32)">
             <summary>
             Detects Oculus Runtime and Device Status
            
             Checks for Oculus Runtime and Oculus HMD device status without loading the LibOVRRT
             shared library.  This may be called before ovr_Initialize() to help decide whether or
             not to initialize LibOVR.
             </summary>
             <param name="timeoutMilliseconds">Specifies a timeout to wait for HMD to be attached or 0 to poll.</param>
             <returns>Returns a DetectResult object indicating the result of detection.</returns>
             <see cref="T:Ab3d.OculusWrap.DetectResult"/>
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap32.SafeNativeMethods.ovr_Initialize(Ab3d.OculusWrap.InitParams)">
            <summary>
            Initializes all Oculus functionality.
            </summary>
            <param name="parameters">
            Initialize with extra parameters.
            Pass 0 to initialize with default parameters, suitable for released games.
            </param>
            <remarks>
            Library init/shutdown, must be called around all other OVR code.
            No other functions calls besides ovr_InitializeRenderingShim are allowed
            before ovr_Initialize succeeds or after ovr_Shutdown.
            
            LibOVRRT shared library search order:
                 1) Current working directory (often the same as the application directory).
                 2) Module directory (usually the same as the application directory, but not if the module is a separate shared library).
                 3) Application directory
                 4) Development directory (only if OVR_ENABLE_DEVELOPER_SEARCH is enabled, which is off by default).
                 5) Standard OS shared library search location(s) (OS-specific).
            </remarks>
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap32.SafeNativeMethods.ovr_GetLastErrorInfo(Ab3d.OculusWrap.ErrorInfo@)">
            <summary>
            Returns information about the most recent failed return value by the
            current thread for this library.
            
            This function itself can never generate an error.
            The last error is never cleared by LibOVR, but will be overwritten by new errors.
            Do not use this call to determine if there was an error in the last API 
            call as successful API calls don't clear the last ErrorInfo.
            To avoid any inconsistency, ovr_GetLastErrorInfo should be called immediately
            after an API function that returned a failed ovrResult, with no other API
            functions called in the interim.
            </summary>
            <param name="errorInfo">The last ErrorInfo for the current thread.</param>
            <remarks>
            Allocate an ErrorInfo and pass this as errorInfo argument.
            </remarks>
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap32.SafeNativeMethods.ovr_GetVersionString">
            <summary>
            Returns version string representing libOVR version. Static, so
            string remains valid for app lifespan
            </summary>
            <remarks>
            Use Marshal.PtrToStringAnsi() to retrieve version string.
            </remarks>
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap32.SafeNativeMethods.ovr_TraceMessage(System.Int32,System.String)">
            <summary>
            Send a message string to the system tracing mechanism if enabled (currently Event Tracing for Windows)
            </summary>
            <param name="level">
            One of the ovrLogLevel constants.
            </param>
            <param name="message">
            A UTF8-encoded null-terminated string.
            </param>
            <returns>
            Returns the length of the message, or -1 if message is too large
            </returns>
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap32.SafeNativeMethods.ovr_Shutdown">
            <summary>
            Shuts down all Oculus functionality.
            </summary>
            <remarks>
            No API functions may be called after ovr_Shutdown except ovr_Initialize.
            </remarks>
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap32.SafeNativeMethods.ovr_GetHmdDesc32(Ab3d.OculusWrap.HmdDesc@,System.IntPtr)">
            <summary>
            Returns information about the current HMD.
            
            ovr_Initialize must have first been called in order for this to succeed, otherwise HmdDesc.Type
            will be reported as None.
            
            Please note: This method will should only be called by a 32 bit process. 
            </summary>
            <param name="sessionPtr">
            Specifies an IntPtr previously returned by ovr_Create, else NULL in which
            case this function detects whether an HMD is present and returns its info if so.
            </param>
            <param name="result">
            Returns an ovrHmdDesc. If the hmd is null and ovrHmdDesc::Type is ovr_None then
            no HMD is present.
            </param>
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap32.SafeNativeMethods.ovr_GetHmdDesc64(Ab3d.OculusWrap.HmdDesc64@,System.IntPtr)">
            <summary>
            Returns information about the current HMD.
            
            ovr_Initialize must have first been called in order for this to succeed, otherwise HmdDesc.Type
            will be reported as None.
            
            Please note: This method will should only be called by a 64 bit process. 
            </summary>
            <param name="sessionPtr">
            Specifies an IntPtr previously returned by ovr_Create, else NULL in which
            case this function detects whether an HMD is present and returns its info if so.
            </param>
            <param name="result">
            Returns an ovrHmdDesc. If the hmd is null and ovrHmdDesc::Type is ovr_None then
            no HMD is present.
            </param>
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap32.SafeNativeMethods.ovr_GetTrackerCount(System.IntPtr)">
             <summary>
             Returns the number of sensors. 
            
             The number of sensors may change at any time, so this function should be called before use 
             as opposed to once on startup.
             </summary>
             <param name="sessionPtr">Specifies an IntPtr previously returned by ovr_Create.</param>
             <returns>Returns unsigned int count.</returns>
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap32.SafeNativeMethods.ovr_GetTrackerDesc(System.IntPtr,System.UInt32)">
             <summary>
             Returns a given sensor description.
            
             It's possible that sensor desc [0] may indicate a unconnnected or non-pose tracked sensor, but 
             sensor desc [1] may be connected.
             </summary>
             <param name="sessionPtr">Specifies an IntPtr previously returned by ovr_Create.</param>
             <param name="trackerDescIndex">
             Specifies a sensor index. The valid indexes are in the range of 0 to the sensor count returned by ovr_GetTrackerCount.
             </param>
             <returns>An empty ovrTrackerDesc will be returned if trackerDescIndex is out of range.</returns>
             <see cref="T:Ab3d.OculusWrap.TrackerDesc"/>
             <see cref="M:Ab3d.OculusWrap.OvrWrap32.GetTrackerCount(System.IntPtr)"/>
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap32.SafeNativeMethods.ovr_Create(System.IntPtr@,Ab3d.OculusWrap.GraphicsLuid@)">
            <summary>
            Creates a handle to a VR session.
            
            Upon success the returned IntPtr must be eventually freed with ovr_Destroy when it is no longer needed.
            A second call to ovr_Create will result in an error return value if the previous Hmd has not been destroyed.
            </summary>
            <param name="sessionPtr">
            Provides a pointer to an IntPtr which will be written to upon success.
            </param>
            <param name="pLuid">
            Provides a system specific graphics adapter identifier that locates which
            graphics adapter has the HMD attached. This must match the adapter used by the application
            or no rendering output will be possible. This is important for stability on multi-adapter systems. An
            application that simply chooses the default adapter will not run reliably on multi-adapter systems.
            </param>
            <remarks>
            Call Marshal.PtrToStructure(...) to convert the IntPtr to the OVR.ovrHmd type.
            </remarks>
            <returns>
            Returns an ovrResult indicating success or failure. Upon failure
            the returned pHmd will be null.
            </returns>
            <example>
            <code>
            IntPtr sessionPtr;
            ovrGraphicsLuid luid;
            ovrResult result = ovr_Create(ref session, ref luid);
            if(OVR_FAILURE(result))
            ...
            </code>
            </example>
            <see cref="M:Ab3d.OculusWrap.OvrWrap32.Destroy(System.IntPtr)"/>
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap32.SafeNativeMethods.ovr_Destroy(System.IntPtr)">
            <summary>
            Destroys the HMD.
            </summary>
            <param name="sessionPtr">Specifies an IntPtr previously returned by ovr_Create.</param>
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap32.SafeNativeMethods.ovr_GetSessionStatus(System.IntPtr,Ab3d.OculusWrap.SessionStatus@)">
            <summary>
            Returns status information for the application.
            </summary>
            <param name="sessionPtr">Specifies an IntPtr previously returned by ovr_Create.</param>
            <param name="sessionStatus">Provides a SessionStatus that is filled in.</param>
            <returns>
            Returns an ovrResult indicating success or failure. In the case of failure, use ovr_GetLastErrorInfo 
            to get more information.
            Return values include but aren't limited to:
            - Result.Success: Completed successfully.
            - Result.ServiceConnection: The service connection was lost and the application must destroy the session.
            </returns>
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap32.SafeNativeMethods.ovr_SetTrackingOriginType(System.IntPtr,Ab3d.OculusWrap.TrackingOrigin)">
             <summary>
             Sets the tracking origin type
            
             When the tracking origin is changed, all of the calls that either provide
             or accept ovrPosef will use the new tracking origin provided.
             </summary>
             <param name="sessionPtr">Specifies an IntPtr previously returned by ovr_Create.</param>
             <param name="origin">Specifies an ovrTrackingOrigin to be used for all ovrPosef</param>
             <returns>
             Returns an ovrResult indicating success or failure. 
             In the case of failure, use ovr_GetLastErrorInfo to get more information.
             </returns>
             <see cref="T:Ab3d.OculusWrap.TrackingOrigin"/>
             <see cref="M:Ab3d.OculusWrap.OvrWrap32.GetTrackingOriginType(System.IntPtr)"/>
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap32.SafeNativeMethods.ovr_GetTrackingOriginType(System.IntPtr)">
            <summary>
            Gets the tracking origin state
            </summary>
            <param name="sessionPtr">Specifies an IntPtr previously returned by ovr_Create.</param>
            <returns>Returns the TrackingOrigin that was either set by default, or previous set by the application.</returns>
            <see cref="T:Ab3d.OculusWrap.TrackingOrigin"/>
            <see cref="M:Ab3d.OculusWrap.OvrWrap32.SetTrackingOriginType(System.IntPtr,Ab3d.OculusWrap.TrackingOrigin)"/>
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap32.SafeNativeMethods.ovr_RecenterTrackingOrigin(System.IntPtr)">
             <summary>
             Re-centers the sensor position and orientation.
            
             This resets the (x,y,z) positional components and the yaw orientation component.
             The Roll and pitch orientation components are always determined by gravity and cannot
             be redefined. All future tracking will report values relative to this new reference position.
             If you are using ovrTrackerPoses then you will need to call ovr_GetTrackerPose after 
             this, because the sensor position(s) will change as a result of this.
             
             The headset cannot be facing vertically upward or downward but rather must be roughly
             level otherwise this function will fail with ovrError_InvalidHeadsetOrientation.
            
             For more info, see the notes on each ovrTrackingOrigin enumeration to understand how
             recenter will vary slightly in its behavior based on the current ovrTrackingOrigin setting.
             </summary>
             <param name="sessionPtr">Specifies an IntPtr previously returned by ovr_Create.</param>
             <returns>
             Returns an ovrResult indicating success or failure. In the case of failure, use
             ovr_GetLastErrorInfo to get more information. Return values include but aren't limited to:
             - Result.Success: Completed successfully.
             - Result.InvalidHeadsetOrientation: The headset was facing an invalid direction when attempting recentering, 
               such as facing vertically.
             </returns>
             <see cref="T:Ab3d.OculusWrap.TrackingOrigin"/>
             <see cref="M:Ab3d.OculusWrap.OvrWrap32.GetTrackerPose(System.IntPtr,System.UInt32)"/>
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap32.SafeNativeMethods.ovr_SpecifyTrackingOrigin(System.IntPtr,Ab3d.OculusWrap.Posef)">
             <summary>
             Allows manually tweaking the sensor position and orientation.
            
             This function is similar to ovr_RecenterTrackingOrigin in that it modifies the
             (x,y,z) positional components and the yaw orientation component of the tracking space for
             the HMD and controllers.
            
             While ovr_RecenterTrackingOrigin resets the tracking origin in reference to the HMD's
             current pose, ovr_SpecifyTrackingOrigin allows the caller to explicitly specify a transform
             for the tracking origin. This transform is expected to be an offset to the most recent
             recentered origin, so calling this function repeatedly with the same originPose will keep
             nudging the recentered origin in that direction.
            
             There are several use cases for this function. For example, if the application decides to
             limit the yaw, or translation of the recentered pose instead of directly using the HMD pose
             the application can query the current tracking state via ovr_GetTrackingState, and apply
             some limitations to the HMD pose because feeding this pose back into this function.
             Similarly, this can be used to "adjust the seating position" incrementally in apps that
             feature seated experiences such as cockpit-based games.
            
             This function can emulate ovr_RecenterTrackingOrigin as such:
                 ovrTrackingState ts = ovr_GetTrackingState(session, 0.0, ovrFalse);
                 ovr_SpecifyTrackingOrigin(session, ts.HeadPose.ThePose);
            
             The roll and pitch orientation components are determined by gravity and cannot be redefined.
             If you are using ovrTrackerPoses then you will need to call ovr_GetTrackerPose after
             this, because the sensor position(s) will change as a result of this.
            
             For more info, see the notes on each ovrTrackingOrigin enumeration to understand how
             recenter will vary slightly in its behavior based on the current ovrTrackingOrigin setting.
             </summary>
             <param name="sessionPtr">Specifies an IntPtr previously returned by ovr_Create.</param>
             <param name="originPose">originPose Specifies a pose that will be used to transform the current tracking origin.</param>
             <returns>
             Returns an ovrResult indicating success or failure. In the case of failure, use
             ovr_GetLastErrorInfo to get more information. Return values include but aren't limited to:
             - ovrSuccess: Completed successfully.
             - ovrError_InvalidParameter: The heading direction in originPose was invalid,
             such as facing vertically. This can happen if the caller is directly feeding the pose
             of a position-tracked device such as an HMD or controller into this function.
             </returns>
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap32.SafeNativeMethods.ovr_ClearShouldRecenterFlag(System.IntPtr)">
             <summary>
             Clears the ShouldRecenter status bit in IntPtrStatus.
            
             Clears the ShouldRecenter status bit in IntPtrStatus, allowing further recenter 
             requests to be detected. Since this is automatically done by ovr_RecenterTrackingOrigin,
             this is only needs to be called when application is doing its own re-centering.
             </summary>
             <param name="sessionPtr">Specifies an IntPtr previously returned by ovr_Create.</param>
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap32.SafeNativeMethods.ovr_GetTrackerPose(System.IntPtr,System.UInt32)">
            <summary>
            Returns the ovrTrackerPose for the given sensor.
            </summary>
            <param name="sessionPtr">Specifies an IntPtr previously returned by ovr_Create.</param>
            <param name="trackerPoseIndex">Index of the sensor being requested.</param>
            <returns>
            Returns the requested ovrTrackerPose. An empty ovrTrackerPose will be returned if trackerPoseIndex is out of range.
            </returns>
            <see cref="M:Ab3d.OculusWrap.OvrWrap32.GetTrackerCount(System.IntPtr)"/>
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap32.SafeNativeMethods.ovr_GetInputState(System.IntPtr,Ab3d.OculusWrap.ControllerType,Ab3d.OculusWrap.InputState@)">
            <summary>
            Returns the most recent input state for controllers, without positional tracking info.
            </summary>
            <param name="sessionPtr">Specifies an IntPtr previously returned by ovr_Create.</param>
            <param name="controllerType">Specifies which controller the input will be returned for.</param>
            <param name="inputState">Input state that will be filled in.</param>
            <returns>Returns Result.Success if the new state was successfully obtained.</returns>
            <see cref="T:Ab3d.OculusWrap.ControllerType"/>
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap32.SafeNativeMethods.ovr_GetConnectedControllerTypes(System.IntPtr)">
            <summary>
            Returns controller types connected to the system OR'ed together.
            </summary>
            <param name="sessionPtr">Specifies an IntPtr previously returned by ovr_Create.</param>
            <returns>A bitmask of ControllerTypes connected to the system.</returns>
            <see cref="T:Ab3d.OculusWrap.ControllerType"/>
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap32.SafeNativeMethods.ovr_GetTrackingState(Ab3d.OculusWrap.TrackingState@,System.IntPtr,System.Double,System.Byte)">
             <summary>
             Returns tracking state reading based on the specified absolute system time.
            
             Pass an absTime value of 0.0 to request the most recent sensor reading. In this case
             both PredictedPose and SamplePose will have the same value.
            
             This may also be used for more refined timing of front buffer rendering logic, and so on.
             This may be called by multiple threads.
             </summary>
             <param name="result">Returns the TrackingState that is predicted for the given absTime.</param>
             <param name="sessionPtr">
             Specifies an IntPtr previously returned by ovr_Create.
             </param>
             <param name="absTime">
             Specifies the absolute future time to predict the return
             TrackingState value. Use 0 to request the most recent tracking state.
             </param>
             <param name="latencyMarker">
             Specifies that this call is the point in time where
             the "App-to-Mid-Photon" latency timer starts from. If a given ovrLayer
             provides "SensorSampleTimestamp", that will override the value stored here.
             </param>
             <see cref="T:Ab3d.OculusWrap.TrackingState"/>
             <see cref="M:Ab3d.OculusWrap.OvrWrap32.GetEyePoses(System.IntPtr,System.Int64,System.Boolean,Ab3d.OculusWrap.Vector3f[],Ab3d.OculusWrap.Posef[]@,System.Double@)"/>
             <see cref="M:Ab3d.OculusWrap.OvrWrap32.GetTimeInSeconds"/>
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap32.SafeNativeMethods.ovr_GetDevicePoses(System.IntPtr,Ab3d.OculusWrap.TrackedDeviceType[],System.Int32,System.Double,Ab3d.OculusWrap.PoseStatef[])">
            Returns an array of poses, where each pose matches a device type provided by the deviceTypes
            array parameter.
            <param name="sessionPtr">Specifies an ovrSession previously returned by ovr_Create.</param>
            <param name="deviceTypes">Array of device types to query for their poses.</param>
            <param name="deviceCount">deviceCount Number of queried poses. This number must match the length of the outDevicePoses and deviceTypes array.</param>
            <param name="absTime">Specifies the absolute future time to predict the return ovrTrackingState value. Use 0 to request the most recent tracking state.</param>
            <param name="outDevicePoses">Array of poses, one for each device type in deviceTypes arrays (size must match the size of deviceTypes array).</param>
            <returns>Returns an ovrResult for which OVR_SUCCESS(result) is false upon error and true upon success.</returns>
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap32.SafeNativeMethods.ovr_SetControllerVibration(System.IntPtr,Ab3d.OculusWrap.ControllerType,System.Single,System.Single)">
             <summary>
             Turns on vibration of the given controller.
            
             To disable vibration, call ovr_SetControllerVibration with an amplitude of 0.
             Vibration automatically stops after a nominal amount of time, so if you want vibration 
             to be continuous over multiple seconds then you need to call this function periodically.
             </summary>
             <param name="sessionPtr">Specifies an IntPtr previously returned by ovr_Create.</param>
             <param name="controllerType">Specifies controllers to apply the vibration to.</param>
             <param name="frequency">
             Specifies a vibration frequency in the range of 0.0 to 1.0. 
             Currently the only valid values are 0.0, 0.5, and 1.0 and other values will
             be clamped to one of these.
             </param>
             <param name="amplitude">Specifies a vibration amplitude in the range of 0.0 to 1.0.</param>
             <returns>Returns ovrSuccess upon success.</returns>
             <see cref="T:Ab3d.OculusWrap.ControllerType"/>
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap32.SafeNativeMethods.ovr_GetTextureSwapChainLength(System.IntPtr,System.IntPtr,System.Int32@)">
            <summary>
            Gets the number of buffers in an IntPtr.
            </summary>
            <param name="sessionPtr">Specifies an IntPtr previously returned by ovr_Create.</param>
            <param name="chain">Specifies the IntPtr for which the length should be retrieved.</param>
            <param name="out_Length">Returns the number of buffers in the specified chain.</param>
            <returns>Returns an ovrResult for which the return code is negative upon error. </returns>
            <see cref="M:Ab3d.OculusWrap.OvrWrap32.CreateTextureSwapChainDX(System.IntPtr,System.IntPtr,Ab3d.OculusWrap.TextureSwapChainDesc@,System.IntPtr@)"/>
            <see cref="M:Ab3d.OculusWrap.OvrWrap32.CreateTextureSwapChainGL(System.IntPtr,Ab3d.OculusWrap.TextureSwapChainDesc,System.IntPtr@)"/>
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap32.SafeNativeMethods.ovr_GetTextureSwapChainCurrentIndex(System.IntPtr,System.IntPtr,System.Int32@)">
            <summary>
            Gets the current index in an IntPtr.
            </summary>
            <param name="sessionPtr">Specifies an IntPtr previously returned by ovr_Create.</param>
            <param name="chain">Specifies the IntPtr for which the index should be retrieved.</param>
            <param name="out_Index">Returns the current (free) index in specified chain.</param>
            <returns>Returns an ovrResult for which the return code is negative upon error. </returns>
            <see cref="M:Ab3d.OculusWrap.OvrWrap32.CreateTextureSwapChainDX(System.IntPtr,System.IntPtr,Ab3d.OculusWrap.TextureSwapChainDesc@,System.IntPtr@)"/>
            <see cref="M:Ab3d.OculusWrap.OvrWrap32.CreateTextureSwapChainGL(System.IntPtr,Ab3d.OculusWrap.TextureSwapChainDesc,System.IntPtr@)"/>
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap32.SafeNativeMethods.ovr_GetTextureSwapChainDesc(System.IntPtr,System.IntPtr,Ab3d.OculusWrap.TextureSwapChainDesc@)">
            <summary>
            Gets the description of the buffers in an IntPtr
            </summary>
            <param name="sessionPtr">Specifies an IntPtr previously returned by ovr_Create.</param>
            <param name="chain">Specifies the IntPtr for which the description should be retrieved.</param>
            <param name="out_Desc">Returns the description of the specified chain.</param>
            <returns>Returns an ovrResult for which the return code is negative upon error. </returns>
            <see cref="M:Ab3d.OculusWrap.OvrWrap32.CreateTextureSwapChainDX(System.IntPtr,System.IntPtr,Ab3d.OculusWrap.TextureSwapChainDesc@,System.IntPtr@)"/>
            <see cref="M:Ab3d.OculusWrap.OvrWrap32.CreateTextureSwapChainGL(System.IntPtr,Ab3d.OculusWrap.TextureSwapChainDesc,System.IntPtr@)"/>
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap32.SafeNativeMethods.ovr_CommitTextureSwapChain(System.IntPtr,System.IntPtr)">
            <summary>
            Commits any pending changes to an IntPtr, and advances its current index
            </summary>
            <param name="sessionPtr">Specifies an IntPtr previously returned by ovr_Create.</param>
            <param name="chain">Specifies the IntPtr to commit.</param>
            <returns>
            Returns an ovrResult for which the return code is negative upon error.
            Failures include but aren't limited to:
              - Result.TextureSwapChainFull: ovr_CommitTextureSwapChain was called too many times on a texture swapchain without calling submit to use the chain.
            </returns>
            <see cref="M:Ab3d.OculusWrap.OvrWrap32.CreateTextureSwapChainDX(System.IntPtr,System.IntPtr,Ab3d.OculusWrap.TextureSwapChainDesc@,System.IntPtr@)"/>
            <see cref="M:Ab3d.OculusWrap.OvrWrap32.CreateTextureSwapChainGL(System.IntPtr,Ab3d.OculusWrap.TextureSwapChainDesc,System.IntPtr@)"/>
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap32.SafeNativeMethods.ovr_DestroyTextureSwapChain(System.IntPtr,System.IntPtr)">
            <summary>
            Destroys an IntPtr and frees all the resources associated with it.
            </summary>
            <param name="sessionPtr">Specifies an IntPtr previously returned by ovr_Create.</param>
            <param name="chain">Specifies the IntPtr to destroy. If it is null then this function has no effect.</param>
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap32.SafeNativeMethods.ovr_DestroyMirrorTexture(System.IntPtr,System.IntPtr)">
            <summary>
            Destroys a mirror texture previously created by one of the mirror texture creation functions.
            </summary>
            <param name="sessionPtr">
            Specifies an IntPtr previously returned by ovr_Create.
            </param>
            <param name="mirrorTexturePtr">
            Specifies the ovrTexture to destroy. If it is null then this function has no effect.
            </param>
            <see cref="M:Ab3d.OculusWrap.OvrWrap32.CreateMirrorTextureDX(System.IntPtr,System.IntPtr,Ab3d.OculusWrap.MirrorTextureDesc@,System.IntPtr@)"/>
            <see cref="M:Ab3d.OculusWrap.OvrWrap32.CreateMirrorTextureGL(System.IntPtr,Ab3d.OculusWrap.MirrorTextureDesc,System.IntPtr@)"/>
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap32.SafeNativeMethods.ovr_GetFovTextureSize(System.IntPtr,Ab3d.OculusWrap.EyeType,Ab3d.OculusWrap.FovPort,System.Single)">
            <summary>
            Calculates the recommended viewport size for rendering a given eye within the HMD
            with a given FOV cone. 
            
            Higher FOV will generally require larger textures to maintain quality.
            Apps packing multiple eye views together on the same texture should ensure there are
            at least 8 pixels of padding between them to prevent texture filtering and chromatic
            aberration causing images to leak between the two eye views.
            </summary>
            <param name="sessionPtr">
            Specifies an IntPtr previously returned by ovr_Create.
            </param>
            <param name="eye">
            Specifies which eye (left or right) to calculate for.
            </param>
            <param name="fov">
            Specifies the ovrFovPort to use.
            </param>
            <param name="pixelsPerDisplayPixel">
            pixelsPerDisplayPixel Specifies the ratio of the number of render target pixels 
            to display pixels at the center of distortion. 1.0 is the default value. Lower
            values can improve performance, higher values give improved quality.
            </param>
            <returns>
            Returns the texture width and height size.
            </returns>
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap32.SafeNativeMethods.ovr_GetRenderDesc(System.IntPtr,Ab3d.OculusWrap.EyeType,Ab3d.OculusWrap.FovPort)">
            <summary>
            Computes the distortion viewport, view adjust, and other rendering parameters for
            the specified eye.
            </summary>
            <param name="sessionPtr">
            Specifies an IntPtr previously returned by ovr_Create.
            </param>
            <param name="eyeType">
            Specifies which eye (left or right) for which to perform calculations.
            </param>
            <param name="fov">
            Specifies the FovPort to use.
            </param>
            <returns>
            Returns the computed EyeRenderDesc for the given eyeType and field of view.
            </returns>
            <see cref="T:Ab3d.OculusWrap.EyeRenderDesc"/>
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap32.SafeNativeMethods.ovr_SubmitFrame(System.IntPtr,System.Int64,System.IntPtr,System.IntPtr,System.Int32)">
            <summary>
            Submits layers for distortion and display.
            
            ovr_SubmitFrame triggers distortion and processing which might happen asynchronously. 
            The function will return when there is room in the submission queue and surfaces
            are available. Distortion might or might not have completed.
            </summary>
            <param name="sessionPtr">
            Specifies an IntPtr previously returned by ovr_Create.
            </param>
            <param name="frameIndex">
            Specifies the targeted application frame index, or 0 to refer to one frame 
            after the last time ovr_SubmitFrame was called.
            </param>
            <param name="viewScaleDesc">
            Provides additional information needed only if layerPtrList contains
            an ovrLayerType_Quad. If null, a default version is used based on the current configuration and a 1.0 world scale.
            </param>
            <param name="layerPtrList">
            Specifies a list of ovrLayer pointers, which can include null entries to
            indicate that any previously shown layer at that index is to not be displayed.
            Each layer header must be a part of a layer structure such as ovrLayerEyeFov or ovrLayerQuad,
            with Header.Type identifying its type. A null layerPtrList entry in the array indicates the 
            absence of the given layer.
            </param>
            <param name="layerCount">
            Indicates the number of valid elements in layerPtrList. The maximum supported layerCount 
            is not currently specified, but may be specified in a future version.
            </param>
            <returns>
            Returns an ovrResult for which the return code is negative upon error and positive
            upon success. Return values include but aren't limited to:
                - Result.Success: rendering completed successfully.
                - Result.NotVisible: rendering completed successfully but was not displayed on the HMD,
                  usually because another application currently has ownership of the HMD. Applications receiving
                  this result should stop rendering new content, but continue to call ovr_SubmitFrame periodically
                  until it returns a value other than ovrSuccess_NotVisible.
                - Result.DisplayLost: The session has become invalid (such as due to a device removal)
                  and the shared resources need to be released (ovr_DestroyTextureSwapChain), the session needs to
                  destroyed (ovr_Destroy) and recreated (ovr_Create), and new resources need to be created
                  (ovr_CreateTextureSwapChainXXX). The application's existing private graphics resources do not
                  need to be recreated unless the new ovr_Create call returns a different GraphicsLuid.
                - Result.TextureSwapChainInvalid: The IntPtr is in an incomplete or inconsistent state. 
                  Ensure ovr_CommitTextureSwapChain was called at least once first.
            </returns>
            <remarks>
            layerPtrList must contain an array of pointers. 
            Each pointer must point to an object, which starts with a an LayerHeader property.
            </remarks>
            <see cref="M:Ab3d.OculusWrap.OvrWrap32.GetPredictedDisplayTime(System.IntPtr,System.Int64)"/>
            <see cref="T:Ab3d.OculusWrap.ViewScaleDesc"/>
            <see cref="T:Ab3d.OculusWrap.LayerHeader"/>
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap32.SafeNativeMethods.ovr_GetPredictedDisplayTime(System.IntPtr,System.Int64)">
             <summary>
             Gets the time of the specified frame midpoint.
            
             Predicts the time at which the given frame will be displayed. The predicted time 
             is the middle of the time period during which the corresponding eye images will 
             be displayed. 
             
             The application should increment frameIndex for each successively targeted frame,
             and pass that index to any relevent OVR functions that need to apply to the frame
             identified by that index. 
             
             This function is thread-safe and allows for multiple application threads to target 
             their processing to the same displayed frame.
             
             In the even that prediction fails due to various reasons (e.g. the display being off
             or app has yet to present any frames), the return value will be current CPU time.
             </summary>
             <param name="sessionPtr">
             Specifies an IntPtr previously returned by ovr_Create.
             </param>
             <param name="frameIndex">
             Identifies the frame the caller wishes to target.
             A value of zero returns the next frame index.
             </param>
             <returns>
             Returns the absolute frame midpoint time for the given frameIndex.
             </returns>
             <see cref="M:Ab3d.OculusWrap.OvrWrap32.GetTimeInSeconds"/>
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap32.SafeNativeMethods.ovr_GetTimeInSeconds">
             <summary>
             Returns global, absolute high-resolution time in seconds. 
            
             The time frame of reference for this function is not specified and should not be
             depended upon.
             </summary>
             <returns>
             Returns seconds as a floating point value.
             </returns>
             <see cref="T:Ab3d.OculusWrap.PoseStatef"/>
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap32.SafeNativeMethods.ovr_GetBool(System.IntPtr,System.String,System.Byte)">
            <summary>
            Reads a boolean property.
            </summary>
            <param name="sessionPtr">
            Specifies an IntPtr previously returned by ovr_Create.
            </param>
            <param name="propertyName">
            The name of the property, which needs to be valid for only the call.
            </param>
            <param name="defaultVal">
            Specifes the value to return if the property couldn't be read.
            </param>
            <returns>
            Returns the property interpreted as a boolean value. 
            Returns defaultVal if the property doesn't exist.
            </returns>
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap32.SafeNativeMethods.ovr_SetBool(System.IntPtr,System.String,System.Byte)">
            <summary>
            Writes or creates a boolean property.
            If the property wasn't previously a boolean property, it is changed to a boolean property.
            </summary>
            <param name="sessionPtr">
            Specifies an IntPtr previously returned by ovr_Create.
            </param>
            <param name="propertyName">
            The name of the property, which needs to be valid for only the call.
            </param>
            <param name="value">
            The value to write.
            </param>
            <returns>
            Returns true if successful, otherwise false. 
            A false result should only occur if the property name is empty or if the property is read-only.
            </returns>
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap32.SafeNativeMethods.ovr_GetInt(System.IntPtr,System.String,System.Int32)">
            <summary>
            Reads an integer property.
            </summary>
            <param name="sessionPtr">
            Specifies an IntPtr previously returned by ovr_Create.
            </param>
            <param name="propertyName">
            The name of the property, which needs to be valid for only the call.
            </param>
            <param name="defaultVal">
            Specifes the value to return if the property couldn't be read.
            </param>
            <returns>
            Returns the property interpreted as an integer value. 
            Returns defaultVal if the property doesn't exist.
            </returns>
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap32.SafeNativeMethods.ovr_SetInt(System.IntPtr,System.String,System.Int32)">
            <summary>
            Writes or creates an integer property.
            
            If the property wasn't previously an integer property, it is changed to an integer property.
            </summary>
            <param name="sessionPtr">
            Specifies an IntPtr previously returned by ovr_Create.
            </param>
            <param name="propertyName">
            The name of the property, which needs to be valid for only the call.
            </param>
            <param name="value">
            The value to write.
            </param>
            <returns>
            Returns true if successful, otherwise false. 
            A false result should only occur if the property name is empty or if the property is read-only.
            </returns>
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap32.SafeNativeMethods.ovr_GetFloat(System.IntPtr,System.String,System.Single)">
            <summary>
            Reads a float property.
            </summary>
            <param name="sessionPtr">
            Specifies an IntPtr previously returned by ovr_Create.
            </param>
            <param name="propertyName">
            The name of the property, which needs to be valid for only the call.
            </param>
            <param name="defaultVal">
            Specifes the value to return if the property couldn't be read.
            </param>
            <returns>
            Returns the property interpreted as an float value. 
            Returns defaultVal if the property doesn't exist.
            </returns>
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap32.SafeNativeMethods.ovr_SetFloat(System.IntPtr,System.String,System.Single)">
            <summary>
            Writes or creates a float property.
            
            If the property wasn't previously a float property, it's changed to a float property.
            </summary>
            <param name="sessionPtr">
            Specifies an IntPtr previously returned by ovr_Create.
            </param>
            <param name="propertyName">
            The name of the property, which needs to be valid for only the call.
            </param>
            <param name="value">
            The value to write.
            </param>
            <returns>
            Returns true if successful, otherwise false. 
            A false result should only occur if the property name is empty or if the property is read-only.
            </returns>
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap32.SafeNativeMethods.ovr_GetFloatArray(System.IntPtr,System.String,System.Single[],System.Int32)">
            <summary>
            Reads a float array property.
            </summary>
            <param name="sessionPtr">
            Specifies an IntPtr previously returned by ovr_Create.
            </param>
            <param name="propertyName">
            The name of the property, which needs to be valid for only the call.
            </param>
            <param name="values">
            An array of float to write to.
            </param>
            <param name="valuesCapacity">
            Specifies the maximum number of elements to write to the values array.
            </param>
            <returns>
            Returns the number of elements read, or 0 if property doesn't exist or is empty.
            </returns>
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap32.SafeNativeMethods.ovr_SetFloatArray(System.IntPtr,System.String,System.Single[],System.Int32)">
            <summary>
            Writes or creates a float array property.
            </summary>
            <param name="sessionPtr">
            Specifies an IntPtr previously returned by ovr_Create.
            </param>
            <param name="propertyName">
            The name of the property, which needs to be valid for only the call.
            </param>
            <param name="values">
            An array of float to write from.
            </param>
            <param name="valuesSize">
            Specifies the number of elements to write.
            </param>
            <returns>
            Returns true if successful, otherwise false. 
            A false result should only occur if the property name is empty or if the property is read-only.
            </returns>
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap32.SafeNativeMethods.ovr_GetString(System.IntPtr,System.String,System.String)">
            <summary>
            Reads a string property.
            Strings are UTF8-encoded and null-terminated.
            </summary>
            <param name="sessionPtr">
            Specifies an IntPtr previously returned by ovr_Create.
            </param>
            <param name="propertyName">
            The name of the property, which needs to be valid for only the call.
            </param>
            <param name="defaultVal">
            Specifes the value to return if the property couldn't be read.
            </param>
            <returns>
            Returns the string property if it exists. 
            
            Otherwise returns defaultVal, which can be specified as null.
            The return memory is guaranteed to be valid until next call to ovr_GetString or 
            until the HMD is destroyed, whichever occurs first.
            </returns>
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap32.SafeNativeMethods.ovr_SetString(System.IntPtr,System.String,System.String)">
            <summary>
            Writes or creates a string property.
            Strings are UTF8-encoded and null-terminated.
            </summary>
            <param name="sessionPtr">
            Specifies an IntPtr previously returned by ovr_Create.
            </param>
            <param name="propertyName">
            The name of the property, which needs to be valid for only the call.
            </param>
            <param name="value">
            The string property, which only needs to be valid for the duration of the call.
            </param>
            <returns>
            Returns true if successful, otherwise false. 
            
            A false result should only occur if the property name is empty or if the property is read-only.
            </returns>
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap32.SafeNativeMethods.ovrMatrix4f_Projection(Ab3d.OculusWrap.FovPort,System.Single,System.Single,Ab3d.OculusWrap.ProjectionModifier)">
            <summary>
            Used to generate projection from ovrEyeDesc::Fov.
            </summary>
            <param name="fov">
            Specifies the ovrFovPort to use.
            </param>
            <param name="znear">
            Distance to near Z limit.
            </param>
            <param name="zfar">
            Distance to far Z limit.
            </param>
            <param name="projectionModFlags">
            A combination of the ProjectionModifier flags.
            </param>
            <returns>
            Returns the calculated projection matrix.
            </returns>
            <see cref="T:Ab3d.OculusWrap.ProjectionModifier"/>
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap32.SafeNativeMethods.ovrTimewarpProjectionDesc_FromProjection(Ab3d.OculusWrap.Matrix4f,Ab3d.OculusWrap.ProjectionModifier)">
            <summary>
            Extracts the required data from the result of ovrMatrix4f_Projection.
            </summary>
            <param name="projection">Specifies the project matrix from which to extract ovrTimewarpProjectionDesc.</param>
            <param name="projectionModFlags">A combination of the ProjectionModifier flags.</param>
            <returns>Returns the extracted ovrTimewarpProjectionDesc.</returns>
            <see cref="T:Ab3d.OculusWrap.TimewarpProjectionDesc"/>
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap32.SafeNativeMethods.ovrMatrix4f_OrthoSubProjection(Ab3d.OculusWrap.Matrix4f,Ab3d.OculusWrap.Vector2f,System.Single,System.Single)">
             <summary>
             Generates an orthographic sub-projection.
            
             Used for 2D rendering, Y is down.
             </summary>
             <param name="projection">
             The perspective matrix that the orthographic matrix is derived from.
             </param>
             <param name="orthoScale">
             Equal to 1.0f / pixelsPerTanAngleAtCenter.
             </param>
             <param name="orthoDistance">
             Equal to the distance from the camera in meters, such as 0.8m.
             </param>
             <param name="hmdToEyeOffsetX">
             Specifies the offset of the eye from the center.
             </param>
             <returns>
             Returns the calculated projection matrix.
             </returns>
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap32.SafeNativeMethods.ovr_CalcEyePoses(Ab3d.OculusWrap.Posef,Ab3d.OculusWrap.Vector3f[],System.IntPtr)">
            <summary>
            Computes offset eye poses based on headPose returned by TrackingState.
            </summary>
            <param name="headPose">
            Indicates the HMD position and orientation to use for the calculation.
            </param>
            <param name="hmdToEyeOffset">
            Can EyeRenderDesc.HmdToEyeOffset returned from 
            ovr_GetRenderDesc. For monoscopic rendering, use a vector that is the average 
            of the two vectors for both eyes.
            </param>
            <param name="outEyePoses">
            If outEyePoses are used for rendering, they should be passed to 
            ovr_SubmitFrame in LayerEyeFov.RenderPose or LayerEyeFovDepth.RenderPose.
            </param>     
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap32.SafeNativeMethods.ovr_GetEyePoses(System.IntPtr,System.Int64,System.Byte,Ab3d.OculusWrap.Vector3f[],System.IntPtr,System.Double@)">
            <summary>
            Returns the predicted head pose in HmdTrackingState and offset eye poses in outEyePoses. 
            
            This is a thread-safe function where caller should increment frameIndex with every frame
            and pass that index where applicable to functions called on the rendering thread.
            Assuming outEyePoses are used for rendering, it should be passed as a part of ovrLayerEyeFov.
            The caller does not need to worry about applying HmdToEyeOffset to the returned outEyePoses variables.
            </summary>
            <param name="sessionPtr">IntPtr previously returned by ovr_Create.</param>
            <param name="frameIndex">
            Specifies the targeted frame index, or 0 to refer to one frame after 
            the last time ovr_SubmitFrame was called.
            </param>
            <param name="latencyMarker">
            Specifies that this call is the point in time where
            the "App-to-Mid-Photon" latency timer starts from. If a given ovrLayer
            provides "SensorSampleTimestamp", that will override the value stored here.
            </param>
            <param name="hmdToEyeOffset">
            Can be EyeRenderDesc.HmdToEyeOffset returned from ovr_GetRenderDesc. 
            For monoscopic rendering, use a vector that is the average of the two vectors for both eyes.
            </param>
            <param name="outEyePoses">
            The predicted eye poses.
            </param>
            <param name="outSensorSampleTime">
            The time when this function was called. 
            May be null, in which case it is ignored.
            </param>
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap32.SafeNativeMethods.ovrPosef_FlipHandedness(Ab3d.OculusWrap.Posef@,Ab3d.OculusWrap.Posef@)">
             <summary>
             Tracking poses provided by the SDK come in a right-handed coordinate system. If an application
             is passing in ovrProjection_LeftHanded into ovrMatrix4f_Projection, then it should also use
             this function to flip the HMD tracking poses to be left-handed.
            
             While this utility function is intended to convert a left-handed ovrPosef into a right-handed
             coordinate system, it will also work for converting right-handed to left-handed since the
             flip operation is the same for both cases.
             </summary>
             <param name="inPose">inPose that is right-handed</param>
             <param name="outPose">outPose that is requested to be left-handed (can be the same pointer to inPose)</param>
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap32.SafeNativeMethods.ovr_CreateTextureSwapChainDX(System.IntPtr,System.IntPtr,Ab3d.OculusWrap.TextureSwapChainDesc@,System.IntPtr@)">
            <summary>
            Create Texture Swap Chain suitable for use with Direct3D 11 and 12.
            </summary>
            <param name="sessionPtr">Specifies an IntPtr previously returned by ovr_Create.</param>
            <param name="d3dPtr">
            Specifies the application's D3D11Device to create resources with or the D3D12CommandQueue 
            which must be the same one the application renders to the eye textures with.</param>
            <param name="desc">Specifies requested texture properties. See notes for more info about texture format.</param>
            <param name="out_TextureSwapChain">
            Returns the created IntPtr, which will be valid upon a successful return value, else it will be null.
            This texture chain must be eventually destroyed via ovr_DestroyTextureSwapChain before destroying the HMD with ovr_Destroy.
            </param>
            <returns>
            Returns an ovrResult indicating success or failure. In the case of failure, use 
            ovr_GetLastErrorInfo to get more information.
            </returns>
            <remarks>
            The texture format provided in desc should be thought of as the format the distortion-compositor will use for the
            ShaderResourceView when reading the contents of the texture. To that end, it is highly recommended that the application
            requests texture swapchain formats that are in sRGB-space (e.g. OVR_FORMAT_R8G8B8A8_UNORM_SRGB) as the compositor
            does sRGB-correct rendering. As such, the compositor relies on the GPU's hardware sampler to do the sRGB-to-linear
            conversion. If the application still prefers to render to a linear format (e.g. OVR_FORMAT_R8G8B8A8_UNORM) while handling the
            linear-to-gamma conversion via HLSL code, then the application must still request the corresponding sRGB format and also use
            the ovrTextureMisc_DX_Typeless flag in the IntPtrDesc's Flag field. This will allow the application to create
            a RenderTargetView that is the desired linear format while the compositor continues to treat it as sRGB. Failure to do so
            will cause the compositor to apply unexpected gamma conversions leading to gamma-curve artifacts. The ovrTextureMisc_DX_Typeless
            flag for depth buffer formats (e.g. OVR_FORMAT_D32_FLOAT) is ignored as they are always converted to be typeless.
            </remarks>
            <see cref="M:Ab3d.OculusWrap.OvrWrap32.GetTextureSwapChainLength(System.IntPtr,System.IntPtr,System.Int32@)"/>
            <see cref="M:Ab3d.OculusWrap.OvrWrap32.GetTextureSwapChainCurrentIndex(System.IntPtr,System.IntPtr,System.Int32@)"/>
            <see cref="M:Ab3d.OculusWrap.OvrWrap32.GetTextureSwapChainDesc(System.IntPtr,System.IntPtr,Ab3d.OculusWrap.TextureSwapChainDesc@)"/>
            <see cref="M:Ab3d.OculusWrap.OvrWrap32.GetTextureSwapChainBufferDX(System.IntPtr,System.IntPtr,System.Int32,System.Guid,System.IntPtr@)"/>
            <see cref="M:Ab3d.OculusWrap.OvrWrap32.DestroyTextureSwapChain(System.IntPtr,System.IntPtr)"/>
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap32.SafeNativeMethods.ovr_GetTextureSwapChainBufferDX(System.IntPtr,System.IntPtr,System.Int32,System.Guid,System.IntPtr@)">
            <summary>
            Get a specific buffer within the chain as any compatible COM interface (similar to QueryInterface)
            </summary>
            <param name="sessionPtr">Specifies an IntPtr previously returned by ovr_Create.</param>
            <param name="chain">Specifies an IntPtr previously returned by ovr_CreateTextureSwapChainDX</param>
            <param name="index">
            Specifies the index within the chain to retrieve. Must be between 0 and length (see ovr_GetTextureSwapChainLength),
            or may pass -1 to get the buffer at the CurrentIndex location. (Saving a call to GetTextureSwapChainCurrentIndex).
            </param>
            <param name="iid">Specifies the interface ID of the interface pointer to query the buffer for.</param>
            <param name="out_Buffer">Returns the COM interface pointer retrieved.</param>
            <returns>
            Returns an ovrResult indicating success or failure. In the case of failure, use 
            ovr_GetLastErrorInfo to get more information.
            </returns>
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap32.SafeNativeMethods.ovr_CreateMirrorTextureDX(System.IntPtr,System.IntPtr,Ab3d.OculusWrap.MirrorTextureDesc@,System.IntPtr@)">
             <summary>
             Create Mirror Texture which is auto-refreshed to mirror Rift contents produced by this application.
            
             A second call to ovr_CreateMirrorTextureDX for a given IntPtr before destroying the first one
             is not supported and will result in an error return.
             </summary>
             <param name="sessionPtr">Specifies an IntPtr previously returned by ovr_Create.</param>
             <param name="d3dPtr">
             Specifies the application's D3D11Device to create resources with or the D3D12CommandQueue
             which must be the same one the application renders to the textures with.
             </param>
             <param name="desc">Specifies requested texture properties. See notes for more info about texture format.</param>
             <param name="out_MirrorTexture">
             Returns the created IntPtr, which will be valid upon a successful return value, else it will be null.
             This texture must be eventually destroyed via ovr_DestroyMirrorTexture before destroying the HMD with ovr_Destroy.
             </param>
             <returns>
             Returns an ovrResult indicating success or failure. In the case of failure, use 
             ovr_GetLastErrorInfo to get more information.
             </returns>
             <remarks>
             The texture format provided in desc should be thought of as the format the compositor will use for the RenderTargetView when
             writing into mirror texture. To that end, it is highly recommended that the application requests a mirror texture format that is
             in sRGB-space (e.g. OVR.TextureFormat.R8G8B8A8_UNORM_SRGB) as the compositor does sRGB-correct rendering. If however the application wants
             to still read the mirror texture as a linear format (e.g. OVR.TextureFormat.OVR_FORMAT_R8G8B8A8_UNORM) and handle the sRGB-to-linear conversion in
             HLSL code, then it is recommended the application still requests an sRGB format and also use the ovrTextureMisc_DX_Typeless flag in the
             IntPtrDesc's Flags field. This will allow the application to bind a ShaderResourceView that is a linear format while the
             compositor continues to treat is as sRGB. Failure to do so will cause the compositor to apply unexpected gamma conversions leading to 
             gamma-curve artifacts.
             </remarks>
             <see cref="M:Ab3d.OculusWrap.OvrWrap32.GetMirrorTextureBufferDX(System.IntPtr,System.IntPtr,System.Guid,System.IntPtr@)"/>
             <see cref="M:Ab3d.OculusWrap.OvrWrap32.DestroyMirrorTexture(System.IntPtr,System.IntPtr)"/>
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap32.SafeNativeMethods.ovr_GetMirrorTextureBufferDX(System.IntPtr,System.IntPtr,System.Guid,System.IntPtr@)">
            <summary>
            Get a the underlying buffer as any compatible COM interface (similar to QueryInterface) 
            </summary>
            <param name="sessionPtr">Specifies an IntPtr previously returned by ovr_Create.</param>
            <param name="mirrorTexturePtr">Specifies an IntPtr previously returned by ovr_CreateMirrorTextureDX</param>
            <param name="iid">Specifies the interface ID of the interface pointer to query the buffer for.</param>
            <param name="out_Buffer">Returns the COM interface pointer retrieved.</param>
            <returns>
            Returns an ovrResult indicating success or failure. In the case of failure, use 
            ovr_GetLastErrorInfo to get more information.
            </returns>
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap32.SafeNativeMethods.ovr_CreateTextureSwapChainGL(System.IntPtr,Ab3d.OculusWrap.TextureSwapChainDesc,System.IntPtr@)">
            <summary>
            Creates a TextureSwapChain suitable for use with OpenGL.
            </summary>
            <param name="sessionPtr">Specifies an IntPtr previously returned by ovr_Create.</param>
            <param name="desc">Specifies the requested texture properties. See notes for more info about texture format.</param>
            <param name="out_TextureSwapChain">
            Returns the created IntPtr, which will be valid upon
            a successful return value, else it will be null. This texture swap chain must be eventually
            destroyed via ovr_DestroyTextureSwapChain before destroying the HMD with ovr_Destroy.
            </param>
            <returns>
            Returns an ovrResult indicating success or failure. In the case of failure, use 
            ovr_GetLastErrorInfo to get more information.
            </returns>
            <remarks>
            The format provided should be thought of as the format the distortion compositor will use when reading
            the contents of the texture. To that end, it is highly recommended that the application requests texture swap chain
            formats that are in sRGB-space (e.g. Format.R8G8B8A8_UNORM_SRGB) as the distortion compositor does sRGB-correct
            rendering. Furthermore, the app should then make sure "glEnable(GL_FRAMEBUFFER_SRGB);" is called before rendering
            into these textures. Even though it is not recommended, if the application would like to treat the texture as a linear
            format and do linear-to-gamma conversion in GLSL, then the application can avoid calling "glEnable(GL_FRAMEBUFFER_SRGB);",
            but should still pass in an sRGB variant for the format. Failure to do so will cause the distortion compositor
            to apply incorrect gamma conversions leading to gamma-curve artifacts.		
            </remarks>
            <see cref="M:Ab3d.OculusWrap.OvrWrap32.GetTextureSwapChainLength(System.IntPtr,System.IntPtr,System.Int32@)"/>
            <see cref="M:Ab3d.OculusWrap.OvrWrap32.GetTextureSwapChainCurrentIndex(System.IntPtr,System.IntPtr,System.Int32@)"/>
            <see cref="M:Ab3d.OculusWrap.OvrWrap32.GetTextureSwapChainDesc(System.IntPtr,System.IntPtr,Ab3d.OculusWrap.TextureSwapChainDesc@)"/>
            <see cref="M:Ab3d.OculusWrap.OvrWrap32.GetTextureSwapChainBufferGL(System.IntPtr,System.IntPtr,System.Int32,System.UInt32@)"/>
            <see cref="M:Ab3d.OculusWrap.OvrWrap32.DestroyTextureSwapChain(System.IntPtr,System.IntPtr)"/>
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap32.SafeNativeMethods.ovr_GetTextureSwapChainBufferGL(System.IntPtr,System.IntPtr,System.Int32,System.UInt32@)">
            <summary>
            Get a specific buffer within the chain as a GL texture name
            </summary>
            <param name="sessionPtr">Specifies an IntPtr previously returned by ovr_Create.</param>
            <param name="chain">Specifies an IntPtr previously returned by ovr_CreateTextureSwapChainGL</param>
            <param name="index">
            Specifies the index within the chain to retrieve. Must be between 0 and length (see ovr_GetTextureSwapChainLength)
            or may pass -1 to get the buffer at the CurrentIndex location. (Saving a call to GetTextureSwapChainCurrentIndex)
            </param>
            <param name="out_TexId">Returns the GL texture object name associated with the specific index requested</param>
            <returns>
            Returns an ovrResult indicating success or failure. In the case of failure, use 
            ovr_GetLastErrorInfo to get more information.
            </returns>
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap32.SafeNativeMethods.ovr_CreateMirrorTextureGL(System.IntPtr,Ab3d.OculusWrap.MirrorTextureDesc,System.IntPtr@)">
             <summary>
             Creates a Mirror Texture which is auto-refreshed to mirror Rift contents produced by this application.
            
             A second call to ovr_CreateMirrorTextureGL for a given IntPtr before destroying the first one
             is not supported and will result in an error return.
             </summary>
             <param name="sessionPtr">Specifies an IntPtr previously returned by ovr_Create.</param>
             <param name="desc">Specifies the requested mirror texture description.</param>
             <param name="out_MirrorTexture">
             Specifies the created IntPtr, which will be valid upon a successful return value, else it will be null.
             This texture must be eventually destroyed via ovr_DestroyMirrorTexture before destroying the HMD with ovr_Destroy.
             </param>
             <returns>
             Returns an ovrResult indicating success or failure. In the case of failure, use 
             ovr_GetLastErrorInfo to get more information.
             </returns>
             <remarks>
             The format provided should be thought of as the format the distortion compositor will use when writing into the mirror
             texture. It is highly recommended that mirror textures are requested as sRGB formats because the distortion compositor
             does sRGB-correct rendering. If the application requests a non-sRGB format (e.g. R8G8B8A8_UNORM) as the mirror texture,
             then the application might have to apply a manual linear-to-gamma conversion when reading from the mirror texture.
             Failure to do so can result in incorrect gamma conversions leading to gamma-curve artifacts and color banding.
             </remarks>
             <see cref="M:Ab3d.OculusWrap.OvrWrap32.GetMirrorTextureBufferGL(System.IntPtr,System.IntPtr,System.UInt32@)"/>
             <see cref="M:Ab3d.OculusWrap.OvrWrap32.DestroyMirrorTexture(System.IntPtr,System.IntPtr)"/>
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap32.SafeNativeMethods.ovr_GetMirrorTextureBufferGL(System.IntPtr,System.IntPtr,System.UInt32@)">
            <summary>
            Get a the underlying buffer as a GL texture name
            </summary>
            <param name="sessionPtr">Specifies an IntPtr previously returned by ovr_Create.</param>
            <param name="mirrorTexturePtr">Specifies an IntPtr previously returned by ovr_CreateMirrorTextureGL</param>
            <param name="out_TexId">Specifies the GL texture object name associated with the mirror texture</param>
            <returns>
            Returns an ovrResult indicating success or failure. In the case of failure, use 
            ovr_GetLastErrorInfo to get more information.
            </returns>
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap32.SafeNativeMethods.ovr_IdentifyClient(System.String)">
            <summary>
            Identify client application info.
            </summary>
            <remarks>
            The string is one or more newline-delimited lines of optional info
            indicating engine name, engine version, engine plugin name, engine plugin
            version, engine editor. The order of the lines is not relevant. Individual
            lines are optional. A newline is not necessary at the end of the last line.
            Call after ovr_Initialize and before the first call to ovr_Create.
            Each value is limited to 20 characters. Key names such as 'EngineName:'
            'EngineVersion:' do not count towards this limit.
            </remarks>
            <param name="identity">
            Specifies one or more newline-delimited lines of optional info:<br/>
                        EngineName: %s\n<br/>
                        EngineVersion: %s\n<br/>
                        EnginePluginName: %s\n<br/>
                        EnginePluginVersion: %s\n<br/>
                        EngineEditor: ('true' or 'false')\n
            </param>
            <returns>
            Returns an ovrResult indicating success or failure. In the case of failure, use 
            ovr_GetLastErrorInfo to get more information.
            </returns>
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap32.SafeNativeMethods.ovr_GetTouchHapticsDesc(System.IntPtr,Ab3d.OculusWrap.ControllerType)">
            <summary>
            Gets information about Haptics engine for the specified Touch controller.
            </summary>
            <param name="sessionPtr">Specifies an IntPtr previously returned by ovr_Create.</param>
            <param name="controllerType">The controller to retrieve the information from.</param>
            <returns>
            Returns an TouchHapticsDesc.
            </returns>
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap32.SafeNativeMethods.ovr_SubmitControllerVibration(System.IntPtr,Ab3d.OculusWrap.ControllerType,Ab3d.OculusWrap.HapticsBuffer)">
            <summary>
            Submits a Haptics buffer (used for vibration) to Touch (only) controllers.
            Note: ovr_SubmitControllerVibration cannot be used interchangeably with ovr_SetControllerVibration.
            </summary>
            <param name="sessionPtr">Specifies an IntPtr previously returned by ovr_Create.</param>
            <param name="controllerType">The controller to retrieve the information from.</param>
            <param name="buffer">Haptics buffer containing amplitude samples to be played.</param>
            <returns>
            Returns an ovrResult for which OVR_SUCCESS(result) is false upon error and true
                     upon success. Return values include but aren't limited to:
                 - ovrSuccess: The call succeeded and a result was returned.
                 - ovrSuccess_DeviceUnavailable: The call succeeded but the device referred to by controllerType is not available.
            </returns> 
            <seealso cref="T:Ab3d.OculusWrap.HapticsBuffer"/>       
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap32.SafeNativeMethods.ovr_GetControllerVibrationState(System.IntPtr,Ab3d.OculusWrap.ControllerType,Ab3d.OculusWrap.HapticsPlaybackState@)">
            <summary>
            Gets the Haptics engine playback state of a specific Touch controller.
            </summary>
            <param name="sessionPtr">Specifies an IntPtr previously returned by ovr_Create.</param>
            <param name="controllerType">The controller to retrieve the information from.</param>
            <param name="out_State">State of the haptics engine.</param>
            <returns>
            Returns an ovrResult for which OVR_SUCCESS(result) is false upon error and true
                     upon success. Return values include but aren't limited to:
                 - ovrSuccess: The call succeeded and a result was returned.
                 - ovrSuccess_DeviceUnavailable: The call succeeded but the device referred to by controllerType is not available.
             </returns>   
            <seealso cref="T:Ab3d.OculusWrap.HapticsPlaybackState"/> 
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap32.SafeNativeMethods.ovr_TestBoundary(System.IntPtr,Ab3d.OculusWrap.TrackedDeviceType,Ab3d.OculusWrap.BoundaryType,Ab3d.OculusWrap.BoundaryTestResult@)">
            <summary>
            Tests collision/proximity of position tracked devices (e.g. HMD and/or Touch) against the Boundary System.
            Note: this method is similar to ovr_BoundaryTestPoint but can be more precise as it may take into account device acceleration/momentum.
            </summary>
            <param name="sessionPtr">Specifies an IntPtr previously returned by ovr_Create.</param>
            <param name="deviceBitmask">Bitmask of one or more tracked devices to test.</param>
            <param name="boundaryType">Must be either ovrBoundary_Outer or ovrBoundary_PlayArea.</param>
            <param name="out_TestResult">Result of collision/proximity test, contains information such as distance and closest point.</param>
            <returns>
            Returns an ovrResult for which OVR_SUCCESS(result) is false upon error and true
                    upon success. Return values include but aren't limited to:
                - ovrSuccess: The call succeeded and a result was returned.
                - ovrSuccess_BoundaryInvalid: The call succeeded but the result is not a valid boundary due to not being set up.
                - ovrSuccess_DeviceUnavailable: The call succeeded but the device referred to by deviceBitmask is not available.
            </returns>   
            <seealso cref="T:Ab3d.OculusWrap.BoundaryTestResult"/> 
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap32.SafeNativeMethods.ovr_TestBoundaryPoint(System.IntPtr,Ab3d.OculusWrap.Vector3f@,Ab3d.OculusWrap.BoundaryType,Ab3d.OculusWrap.BoundaryTestResult@)">
            <summary>
            Tests collision/proximity of a 3D point against the Boundary System.
            </summary>
            <param name="sessionPtr">Specifies an IntPtr previously returned by ovr_Create.</param>
            <param name="point">3D point to test.</param>
            <param name="singleBoundaryType">Must be either ovrBoundary_Outer or ovrBoundary_PlayArea to test against</param>
            <param name="out_TestResult">Result of collision/proximity test, contains information such as distance and closest point.</param>
            <returns>
            Returns an ovrResult for which OVR_SUCCESS(result) is false upon error and true
                    upon success. Return values include but aren't limited to:
                - ovrSuccess: The call succeeded and a result was returned.
                - ovrSuccess_BoundaryInvalid: The call succeeded but the result is not a valid boundary due to not being set up.
            </returns>   
            <seealso cref="T:Ab3d.OculusWrap.BoundaryTestResult"/>         
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap32.SafeNativeMethods.ovr_SetBoundaryLookAndFeel(System.IntPtr,Ab3d.OculusWrap.BoundaryLookAndFeel@)">
            <summary>
            Sets the look and feel of the Boundary System.
            </summary>
            <param name="sessionPtr">Specifies an IntPtr previously returned by ovr_Create.</param>
            <param name="lookAndFeel">Look and feel parameters.</param>
            <returns>
            Returns ovrSuccess upon success.
            </returns>   
            <seealso cref="T:Ab3d.OculusWrap.BoundaryLookAndFeel"/>   
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap32.SafeNativeMethods.ovr_ResetBoundaryLookAndFeel(System.IntPtr)">
            <summary>
            Resets the look and feel of the Boundary System to its default state.
            </summary>
            <param name="sessionPtr">Specifies an IntPtr previously returned by ovr_Create.</param>
            <returns>
            Returns ovrSuccess upon success.
            </returns>
            <seealso cref="T:Ab3d.OculusWrap.BoundaryLookAndFeel"/>     
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap32.SafeNativeMethods.ovr_GetBoundaryGeometry(System.IntPtr,Ab3d.OculusWrap.BoundaryType,System.IntPtr,System.Int32@)">
            <summary>
            Gets the geometry of the Boundary System's "play area" or "outer boundary" as 3D floor points.
            </summary>
            <param name="sessionPtr">Specifies an IntPtr previously returned by ovr_Create.</param>
            <param name="boundaryType">Must be either ovrBoundary_Outer or ovrBoundary_PlayArea.</param>
            <param name="out_floorPointPtr">IntPtr to array of 3D points (in clockwise order) defining the boundary at floor height (can be NULL to retrieve only the number of points).</param>
            <param name="out_FloorPointsCount"> Number of 3D points returned in the array.</param>
            <returns>
            Returns an ovrResult for which OVR_SUCCESS(result) is false upon error and true
                    upon success. Return values include but aren't limited to:
                - ovrSuccess: The call succeeded and a result was returned.
                - ovrSuccess_BoundaryInvalid: The call succeeded but the result is not a valid boundary due to not being set up.
            </returns>   
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap32.SafeNativeMethods.ovr_GetBoundaryDimensions(System.IntPtr,Ab3d.OculusWrap.BoundaryType,System.Single[])">
            <summary>
            Gets the dimension of the Boundary System's "play area" or "outer boundary".
            </summary>
            <param name="sessionPtr">Specifies an IntPtr previously returned by ovr_Create.</param>
            <param name="boundaryType">Must be either ovrBoundary_Outer or ovrBoundary_PlayArea.</param>
            <param name="out_Dimensions">Dimensions of the axis aligned bounding box that encloses the area in meters (width, height and length).</param>
            <returns>
            Returns an ovrResult for which OVR_SUCCESS(result) is false upon error and true
                    upon success. Return values include but aren't limited to:
                - ovrSuccess: The call succeeded and a result was returned.
                - ovrSuccess_BoundaryInvalid: The call succeeded but the result is not a valid boundary due to not being set up.
            </returns>   
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap32.SafeNativeMethods.ovr_GetBoundaryVisible(System.IntPtr,System.Byte@)">
            <summary>
            Returns if the boundary is currently visible.
            Note: visibility is false if the user has turned off boundaries, otherwise, it's true if the app has requested 
            boundaries to be visible or if any tracked device is currently triggering it. This may not exactly match rendering 
            due to fade-in and fade-out effects.
            </summary>
            <param name="sessionPtr">Specifies an IntPtr previously returned by ovr_Create.</param>
            <param name="out_IsVisible">ovrTrue, if the boundary is visible.</param>
            <returns>
            Returns an ovrResult for which OVR_SUCCESS(result) is false upon error and true
                    upon success. Return values include but aren't limited to:
                - ovrSuccess: Result was successful and a result was returned.
                - ovrSuccess_BoundaryInvalid: The call succeeded but the result is not a valid boundary due to not being set up.
            </returns>   
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap32.SafeNativeMethods.ovr_RequestBoundaryVisible(System.IntPtr,System.Byte)">
            <summary>
            Requests boundary to be visible.
            </summary>
            <param name="sessionPtr">Specifies an IntPtr previously returned by ovr_Create.</param>
            <param name="visible">forces the outer boundary to be visible. An application can't force it to be invisible, but can cancel its request by passing false.</param>
            <returns>
            Returns ovrSuccess upon success.
            </returns>   
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap32.SafeNativeMethods.ovr_GetPerfStats(System.IntPtr,Ab3d.OculusWrap.PerfStats@)">
             <summary>
             Retrieves performance stats for the VR app as well as the SDK compositor.
            
             If the app calling this function is not the one in focus (i.e. not visible in the HMD), then
             outStats will be zero'd out.
             New stats are populated after each successive call to ovr_SubmitFrame. So the app should call
             this function on the same thread it calls ovr_SubmitFrame, preferably immediately
             afterwards.
             </summary>
             <param name="sessionPtr">Specifies an IntPtr previously returned by ovr_Create.</param>
            <param name="outStats">Contains the performance stats for the application and SDK compositor</param>
            <returns>
             Returns an ovrResult for which OVR_SUCCESS(result) is false upon error and true
                    upon success.
             </returns> 
            <seealso cref="T:Ab3d.OculusWrap.PerfStats"/>  
            <seealso cref="T:Ab3d.OculusWrap.PerfStatsPerCompositorFrame"/>  
            <seealso cref="M:Ab3d.OculusWrap.OvrWrap32.SafeNativeMethods.ovr_ResetPerfStats(System.IntPtr)"/>  
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap32.SafeNativeMethods.ovr_ResetPerfStats(System.IntPtr)">
             <summary>
             Resets the accumulated stats reported in each ovrPerfStatsPerCompositorFrame back to zero.
            
             Only the integer values such as HmdVsyncIndex, AppDroppedFrameCount etc. will be reset
             as the other fields such as AppMotionToPhotonLatency are independent timing values updated
             per-frame.
             </summary>
             <param name="sessionPtr">Specifies an IntPtr previously returned by ovr_Create.</param>
             <returns>
             Returns an ovrResult for which OVR_SUCCESS(result) is false upon error and true
                     upon success.
             </returns>   
             <seealso cref="T:Ab3d.OculusWrap.PerfStats"/>  
             <seealso cref="T:Ab3d.OculusWrap.PerfStatsPerCompositorFrame"/>  
             <seealso cref="M:Ab3d.OculusWrap.OvrWrap32.SafeNativeMethods.ovr_GetPerfStats(System.IntPtr,Ab3d.OculusWrap.PerfStats@)"/>          
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap32.SafeNativeMethods.ovr_GetExternalCameras(System.IntPtr,Ab3d.OculusWrap.ExternalCamera[],System.Int32@)">
            <summary>
            Returns the number of camera properties of all cameras
            </summary>
            <param name="sessionPtr">session Specifies an ovrSession previously returned by ovr_Create.</param>
            <param name="cameras">cameras Pointer to the array. If null and the provided array capacity is sufficient, will return ovrError_NullArrayPointer.</param>
            <param name="inoutCameraCount">inoutCameraCount Supply the array capacity, will return the actual # of cameras defined. If *inoutCameraCount is too small, will return ovrError_InsufficientArraySize.</param>
            <returns>Returns the ids of external cameras the system knows about. Returns ovrError_NoExternalCameraInfo if there is not any eternal camera information.</returns>
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap32.SafeNativeMethods.ovr_SetExternalCameraProperties(System.IntPtr,System.String,Ab3d.OculusWrap.CameraIntrinsics@,Ab3d.OculusWrap.CameraExtrinsics@)">
            <summary>
            Sets the camera intrinsics and/or extrinsics stored for the cameraName camera Names must be less then 32 characters and null-terminated.
            </summary>
            <param name="sessionPtr">session Specifies an ovrSession previously returned by ovr_Create.</param>
            <param name="name">Specifies which camera to set the intrinsics or extrinsics for</param>
            <param name="intrinsics">Contains the intrinsic parameters to set, can be null</param>
            <param name="extrinsics">Contains the extrinsic parameters to set, can be null</param>
            <returns>Returns ovrSuccess or an ovrError code</returns>
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap32.Detect(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap32.Initialize(Ab3d.OculusWrap.InitParams)">
            <inheritdoc />
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap32.GetLastErrorInfo">
            <inheritdoc />
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap32.GetVersionString">
            <inheritdoc />
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap32.TraceMessage(Ab3d.OculusWrap.LogLevel,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap32.Shutdown">
            <inheritdoc />
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap32.GetTrackerCount(System.IntPtr)">
            <inheritdoc />
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap32.GetTrackerDesc(System.IntPtr,System.UInt32)">
            <inheritdoc />
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap32.Create(System.IntPtr@,Ab3d.OculusWrap.GraphicsLuid@)">
            <inheritdoc />
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap32.Destroy(System.IntPtr)">
            <inheritdoc />
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap32.GetSessionStatus(System.IntPtr,Ab3d.OculusWrap.SessionStatus@)">
            <inheritdoc />
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap32.SetTrackingOriginType(System.IntPtr,Ab3d.OculusWrap.TrackingOrigin)">
            <inheritdoc />
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap32.GetTrackingOriginType(System.IntPtr)">
            <inheritdoc />
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap32.RecenterTrackingOrigin(System.IntPtr)">
            <inheritdoc />
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap32.SpecifyTrackingOrigin(System.IntPtr,Ab3d.OculusWrap.Posef)">
            <inheritdoc />
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap32.ClearShouldRecenterFlag(System.IntPtr)">
            <inheritdoc />
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap32.GetTrackerPose(System.IntPtr,System.UInt32)">
            <inheritdoc />
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap32.GetInputState(System.IntPtr,Ab3d.OculusWrap.ControllerType,Ab3d.OculusWrap.InputState@)">
            <inheritdoc />
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap32.GetConnectedControllerTypes(System.IntPtr)">
            <inheritdoc />
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap32.GetTrackingState(System.IntPtr,System.Double,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap32.GetDevicePoses(System.IntPtr,Ab3d.OculusWrap.TrackedDeviceType[],System.Double,Ab3d.OculusWrap.PoseStatef[])">
            <inheritdoc />
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap32.SetControllerVibration(System.IntPtr,Ab3d.OculusWrap.ControllerType,System.Single,System.Single)">
            <inheritdoc />
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap32.GetTextureSwapChainLength(System.IntPtr,System.IntPtr,System.Int32@)">
            <inheritdoc />
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap32.GetTextureSwapChainCurrentIndex(System.IntPtr,System.IntPtr,System.Int32@)">
            <inheritdoc />
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap32.GetTextureSwapChainDesc(System.IntPtr,System.IntPtr,Ab3d.OculusWrap.TextureSwapChainDesc@)">
            <inheritdoc />
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap32.CommitTextureSwapChain(System.IntPtr,System.IntPtr)">
            <inheritdoc />
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap32.DestroyTextureSwapChain(System.IntPtr,System.IntPtr)">
            <inheritdoc />
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap32.DestroyMirrorTexture(System.IntPtr,System.IntPtr)">
            <inheritdoc />
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap32.GetFovTextureSize(System.IntPtr,Ab3d.OculusWrap.EyeType,Ab3d.OculusWrap.FovPort,System.Single)">
            <inheritdoc />
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap32.GetRenderDesc(System.IntPtr,Ab3d.OculusWrap.EyeType,Ab3d.OculusWrap.FovPort)">
            <inheritdoc />
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap32.SubmitFrame(System.IntPtr,System.Int64,System.IntPtr,System.IntPtr,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap32.GetPredictedDisplayTime(System.IntPtr,System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap32.GetTimeInSeconds">
            <inheritdoc />
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap32.GetBool(System.IntPtr,System.String,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap32.SetBool(System.IntPtr,System.String,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap32.GetInt(System.IntPtr,System.String,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap32.SetInt(System.IntPtr,System.String,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap32.GetFloat(System.IntPtr,System.String,System.Single)">
            <inheritdoc />
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap32.SetFloat(System.IntPtr,System.String,System.Single)">
            <inheritdoc />
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap32.GetFloatArray(System.IntPtr,System.String,System.Single[],System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap32.SetFloatArray(System.IntPtr,System.String,System.Single[],System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap32.GetString(System.IntPtr,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap32.SetString(System.IntPtr,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap32.Matrix4f_Projection(Ab3d.OculusWrap.FovPort,System.Single,System.Single,Ab3d.OculusWrap.ProjectionModifier)">
            <inheritdoc />
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap32.TimewarpProjectionDesc_FromProjection(Ab3d.OculusWrap.Matrix4f,Ab3d.OculusWrap.ProjectionModifier)">
            <inheritdoc />
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap32.Matrix4f_OrthoSubProjection(Ab3d.OculusWrap.Matrix4f,Ab3d.OculusWrap.Vector2f,System.Single,System.Single)">
            <inheritdoc />
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap32.CalcEyePoses(Ab3d.OculusWrap.Posef,Ab3d.OculusWrap.Vector3f[],Ab3d.OculusWrap.Posef[]@)">
            <inheritdoc />  
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap32.GetEyePoses(System.IntPtr,System.Int64,System.Boolean,Ab3d.OculusWrap.Vector3f[],Ab3d.OculusWrap.Posef[]@,System.Double@)">
            <inheritdoc />
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap32.Posef_FlipHandedness(Ab3d.OculusWrap.Posef@,Ab3d.OculusWrap.Posef@)">
            <inheritdoc />
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap32.CreateTextureSwapChainDX(System.IntPtr,System.IntPtr,Ab3d.OculusWrap.TextureSwapChainDesc@,System.IntPtr@)">
            <inheritdoc />
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap32.GetTextureSwapChainBufferDX(System.IntPtr,System.IntPtr,System.Int32,System.Guid,System.IntPtr@)">
            <inheritdoc />
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap32.CreateMirrorTextureDX(System.IntPtr,System.IntPtr,Ab3d.OculusWrap.MirrorTextureDesc@,System.IntPtr@)">
            <inheritdoc />
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap32.GetMirrorTextureBufferDX(System.IntPtr,System.IntPtr,System.Guid,System.IntPtr@)">
            <inheritdoc />
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap32.CreateTextureSwapChainGL(System.IntPtr,Ab3d.OculusWrap.TextureSwapChainDesc,System.IntPtr@)">
            <inheritdoc />
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap32.GetTextureSwapChainBufferGL(System.IntPtr,System.IntPtr,System.Int32,System.UInt32@)">
            <inheritdoc />
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap32.CreateMirrorTextureGL(System.IntPtr,Ab3d.OculusWrap.MirrorTextureDesc,System.IntPtr@)">
            <inheritdoc />
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap32.GetMirrorTextureBufferGL(System.IntPtr,System.IntPtr,System.UInt32@)">
            <inheritdoc />
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap32.IdentifyClient(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap32.GetTouchHapticsDesc(System.IntPtr,Ab3d.OculusWrap.ControllerType)">
            <inheritdoc />
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap32.SubmitControllerVibration(System.IntPtr,Ab3d.OculusWrap.ControllerType,Ab3d.OculusWrap.HapticsBuffer)">
            <inheritdoc />   
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap32.GetControllerVibrationState(System.IntPtr,Ab3d.OculusWrap.ControllerType,Ab3d.OculusWrap.HapticsPlaybackState@)">
            <inheritdoc />
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap32.TestBoundary(System.IntPtr,Ab3d.OculusWrap.TrackedDeviceType,Ab3d.OculusWrap.BoundaryType,Ab3d.OculusWrap.BoundaryTestResult@)">
            <inheritdoc />
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap32.TestBoundaryPoint(System.IntPtr,Ab3d.OculusWrap.Vector3f,Ab3d.OculusWrap.BoundaryType,Ab3d.OculusWrap.BoundaryTestResult@)">
            <inheritdoc />        
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap32.SetBoundaryLookAndFeel(System.IntPtr,Ab3d.OculusWrap.BoundaryLookAndFeel@)">
            <inheritdoc />   
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap32.ResetBoundaryLookAndFeel(System.IntPtr)">
            <inheritdoc />     
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap32.GetBoundaryGeometry(System.IntPtr,Ab3d.OculusWrap.BoundaryType,Ab3d.OculusWrap.Vector3f[]@)">
            <inheritdoc />  
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap32.GetBoundaryDimensions(System.IntPtr,Ab3d.OculusWrap.BoundaryType,Ab3d.OculusWrap.Vector3f@)">
            <inheritdoc />  
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap32.GetBoundaryVisible(System.IntPtr,System.Boolean@)">
            <inheritdoc /> 
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap32.RequestBoundaryVisible(System.IntPtr,System.Boolean)">
            <inheritdoc />   
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap32.GetPerfStats(System.IntPtr,Ab3d.OculusWrap.PerfStats@)">
            <inheritdoc /> 
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap32.ResetPerfStats(System.IntPtr)">
            <inheritdoc />          
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap32.GetExternalCameras(System.IntPtr,Ab3d.OculusWrap.ExternalCamera[]@)">
            <inheritdoc />     
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap32.SetExternalCameraProperties(System.IntPtr,System.String,Ab3d.OculusWrap.CameraIntrinsics@,Ab3d.OculusWrap.CameraExtrinsics@)">
            <summary>
            Sets the camera intrinsics and/or extrinsics stored for the cameraName camera Names must be less then 32 characters and null-terminated.
            </summary>
            <param name="sessionPtr">session Specifies an ovrSession previously returned by ovr_Create.</param>
            <param name="name">Specifies which camera to set the intrinsics or extrinsics for</param>
            <param name="intrinsics">Contains the intrinsic parameters to set, can be null</param>
            <param name="extrinsics">Contains the extrinsic parameters to set, can be null</param>
            <returns>Returns ovrSuccess or an ovrError code</returns>
        </member>
        <member name="P:Ab3d.OculusWrap.OvrWrap32.OvrDllName">
            <inheritdoc />
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap32.GetHmdDesc(System.IntPtr)">
            <inheritdoc />
        </member>
        <member name="T:Ab3d.OculusWrap.OvrWrap64">
            <summary>
            OvrWrap64 is an instance of base <see cref="T:Ab3d.OculusWrap.OvrWrap"/> class that is created for x64 process. See remarks of the base class for more info.
            </summary>
        </member>
        <member name="P:Ab3d.OculusWrap.OvrWrap64.OvrDllName">
            <inheritdoc />
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap64.GetHmdDesc(System.IntPtr)">
            <inheritdoc />
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap64.Detect(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap64.Initialize(Ab3d.OculusWrap.InitParams)">
            <inheritdoc />
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap64.GetLastErrorInfo">
            <inheritdoc />
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap64.GetVersionString">
            <inheritdoc />
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap64.TraceMessage(Ab3d.OculusWrap.LogLevel,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap64.Shutdown">
            <inheritdoc />
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap64.GetTrackerCount(System.IntPtr)">
            <inheritdoc />
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap64.GetTrackerDesc(System.IntPtr,System.UInt32)">
            <inheritdoc />
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap64.Create(System.IntPtr@,Ab3d.OculusWrap.GraphicsLuid@)">
            <inheritdoc />
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap64.Destroy(System.IntPtr)">
            <inheritdoc />
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap64.GetSessionStatus(System.IntPtr,Ab3d.OculusWrap.SessionStatus@)">
            <inheritdoc />
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap64.SetTrackingOriginType(System.IntPtr,Ab3d.OculusWrap.TrackingOrigin)">
            <inheritdoc />
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap64.GetTrackingOriginType(System.IntPtr)">
            <inheritdoc />
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap64.RecenterTrackingOrigin(System.IntPtr)">
            <inheritdoc />
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap64.SpecifyTrackingOrigin(System.IntPtr,Ab3d.OculusWrap.Posef)">
            <inheritdoc />
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap64.ClearShouldRecenterFlag(System.IntPtr)">
            <inheritdoc />
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap64.GetTrackerPose(System.IntPtr,System.UInt32)">
            <inheritdoc />
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap64.GetInputState(System.IntPtr,Ab3d.OculusWrap.ControllerType,Ab3d.OculusWrap.InputState@)">
            <inheritdoc />
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap64.GetConnectedControllerTypes(System.IntPtr)">
            <inheritdoc />
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap64.GetTrackingState(System.IntPtr,System.Double,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap64.GetDevicePoses(System.IntPtr,Ab3d.OculusWrap.TrackedDeviceType[],System.Double,Ab3d.OculusWrap.PoseStatef[])">
            <inheritdoc />
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap64.SetControllerVibration(System.IntPtr,Ab3d.OculusWrap.ControllerType,System.Single,System.Single)">
            <inheritdoc />
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap64.GetTextureSwapChainLength(System.IntPtr,System.IntPtr,System.Int32@)">
            <inheritdoc />
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap64.GetTextureSwapChainCurrentIndex(System.IntPtr,System.IntPtr,System.Int32@)">
            <inheritdoc />
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap64.GetTextureSwapChainDesc(System.IntPtr,System.IntPtr,Ab3d.OculusWrap.TextureSwapChainDesc@)">
            <inheritdoc />
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap64.CommitTextureSwapChain(System.IntPtr,System.IntPtr)">
            <inheritdoc />
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap64.DestroyTextureSwapChain(System.IntPtr,System.IntPtr)">
            <inheritdoc />
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap64.DestroyMirrorTexture(System.IntPtr,System.IntPtr)">
            <inheritdoc />
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap64.GetFovTextureSize(System.IntPtr,Ab3d.OculusWrap.EyeType,Ab3d.OculusWrap.FovPort,System.Single)">
            <inheritdoc />
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap64.GetRenderDesc(System.IntPtr,Ab3d.OculusWrap.EyeType,Ab3d.OculusWrap.FovPort)">
            <inheritdoc />
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap64.SubmitFrame(System.IntPtr,System.Int64,System.IntPtr,System.IntPtr,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap64.GetPredictedDisplayTime(System.IntPtr,System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap64.GetTimeInSeconds">
            <inheritdoc />
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap64.GetBool(System.IntPtr,System.String,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap64.SetBool(System.IntPtr,System.String,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap64.GetInt(System.IntPtr,System.String,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap64.SetInt(System.IntPtr,System.String,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap64.GetFloat(System.IntPtr,System.String,System.Single)">
            <inheritdoc />
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap64.SetFloat(System.IntPtr,System.String,System.Single)">
            <inheritdoc />
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap64.GetFloatArray(System.IntPtr,System.String,System.Single[],System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap64.SetFloatArray(System.IntPtr,System.String,System.Single[],System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap64.GetString(System.IntPtr,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap64.SetString(System.IntPtr,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap64.Matrix4f_Projection(Ab3d.OculusWrap.FovPort,System.Single,System.Single,Ab3d.OculusWrap.ProjectionModifier)">
            <inheritdoc />
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap64.TimewarpProjectionDesc_FromProjection(Ab3d.OculusWrap.Matrix4f,Ab3d.OculusWrap.ProjectionModifier)">
            <inheritdoc />
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap64.Matrix4f_OrthoSubProjection(Ab3d.OculusWrap.Matrix4f,Ab3d.OculusWrap.Vector2f,System.Single,System.Single)">
            <inheritdoc />
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap64.CalcEyePoses(Ab3d.OculusWrap.Posef,Ab3d.OculusWrap.Vector3f[],Ab3d.OculusWrap.Posef[]@)">
            <inheritdoc />   
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap64.GetEyePoses(System.IntPtr,System.Int64,System.Boolean,Ab3d.OculusWrap.Vector3f[],Ab3d.OculusWrap.Posef[]@,System.Double@)">
            <inheritdoc />
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap64.Posef_FlipHandedness(Ab3d.OculusWrap.Posef@,Ab3d.OculusWrap.Posef@)">
            <inheritdoc />
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap64.CreateTextureSwapChainDX(System.IntPtr,System.IntPtr,Ab3d.OculusWrap.TextureSwapChainDesc@,System.IntPtr@)">
            <inheritdoc />
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap64.GetTextureSwapChainBufferDX(System.IntPtr,System.IntPtr,System.Int32,System.Guid,System.IntPtr@)">
            <inheritdoc />
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap64.CreateMirrorTextureDX(System.IntPtr,System.IntPtr,Ab3d.OculusWrap.MirrorTextureDesc@,System.IntPtr@)">
            <inheritdoc />
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap64.GetMirrorTextureBufferDX(System.IntPtr,System.IntPtr,System.Guid,System.IntPtr@)">
            <inheritdoc />
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap64.CreateTextureSwapChainGL(System.IntPtr,Ab3d.OculusWrap.TextureSwapChainDesc,System.IntPtr@)">
            <inheritdoc />
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap64.GetTextureSwapChainBufferGL(System.IntPtr,System.IntPtr,System.Int32,System.UInt32@)">
            <inheritdoc />
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap64.CreateMirrorTextureGL(System.IntPtr,Ab3d.OculusWrap.MirrorTextureDesc,System.IntPtr@)">
            <inheritdoc />
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap64.GetMirrorTextureBufferGL(System.IntPtr,System.IntPtr,System.UInt32@)">
            <inheritdoc />
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap64.IdentifyClient(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap64.GetTouchHapticsDesc(System.IntPtr,Ab3d.OculusWrap.ControllerType)">
            <inheritdoc />
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap64.SubmitControllerVibration(System.IntPtr,Ab3d.OculusWrap.ControllerType,Ab3d.OculusWrap.HapticsBuffer)">
            <inheritdoc />      
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap64.GetControllerVibrationState(System.IntPtr,Ab3d.OculusWrap.ControllerType,Ab3d.OculusWrap.HapticsPlaybackState@)">
            <inheritdoc />
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap64.TestBoundary(System.IntPtr,Ab3d.OculusWrap.TrackedDeviceType,Ab3d.OculusWrap.BoundaryType,Ab3d.OculusWrap.BoundaryTestResult@)">
            <inheritdoc />
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap64.TestBoundaryPoint(System.IntPtr,Ab3d.OculusWrap.Vector3f,Ab3d.OculusWrap.BoundaryType,Ab3d.OculusWrap.BoundaryTestResult@)">
            <inheritdoc />        
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap64.SetBoundaryLookAndFeel(System.IntPtr,Ab3d.OculusWrap.BoundaryLookAndFeel@)">
            <inheritdoc />   
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap64.ResetBoundaryLookAndFeel(System.IntPtr)">
            <inheritdoc />   
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap64.GetBoundaryGeometry(System.IntPtr,Ab3d.OculusWrap.BoundaryType,Ab3d.OculusWrap.Vector3f[]@)">
            <inheritdoc />  
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap64.GetBoundaryDimensions(System.IntPtr,Ab3d.OculusWrap.BoundaryType,Ab3d.OculusWrap.Vector3f@)">
            <inheritdoc />  
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap64.GetBoundaryVisible(System.IntPtr,System.Boolean@)">
            <inheritdoc />   
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap64.RequestBoundaryVisible(System.IntPtr,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap64.GetPerfStats(System.IntPtr,Ab3d.OculusWrap.PerfStats@)">
            <inheritdoc />  
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap64.ResetPerfStats(System.IntPtr)">
            <inheritdoc />         
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap64.GetExternalCameras(System.IntPtr,Ab3d.OculusWrap.ExternalCamera[]@)">
            <inheritdoc />     
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap64.SetExternalCameraProperties(System.IntPtr,System.String,Ab3d.OculusWrap.CameraIntrinsics@,Ab3d.OculusWrap.CameraExtrinsics@)">
            <summary>
            Sets the camera intrinsics and/or extrinsics stored for the cameraName camera Names must be less then 32 characters and null-terminated.
            </summary>
            <param name="sessionPtr">session Specifies an ovrSession previously returned by ovr_Create.</param>
            <param name="name">Specifies which camera to set the intrinsics or extrinsics for</param>
            <param name="intrinsics">Contains the intrinsic parameters to set, can be null</param>
            <param name="extrinsics">Contains the extrinsic parameters to set, can be null</param>
            <returns>Returns ovrSuccess or an ovrError code</returns>
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap64.SafeNativeMethods.ovr_Detect(System.Int32)">
             <summary>
             Detects Oculus Runtime and Device Status
            
             Checks for Oculus Runtime and Oculus HMD device status without loading the LibOVRRT
             shared library.  This may be called before ovr_Initialize() to help decide whether or
             not to initialize LibOVR.
             </summary>
             <param name="timeoutMilliseconds">Specifies a timeout to wait for HMD to be attached or 0 to poll.</param>
             <returns>Returns a DetectResult object indicating the result of detection.</returns>
             <see cref="T:Ab3d.OculusWrap.DetectResult"/>
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap64.SafeNativeMethods.ovr_Initialize(Ab3d.OculusWrap.InitParams)">
            <summary>
            Initializes all Oculus functionality.
            </summary>
            <param name="parameters">
            Initialize with extra parameters.
            Pass 0 to initialize with default parameters, suitable for released games.
            </param>
            <remarks>
            Library init/shutdown, must be called around all other OVR code.
            No other functions calls besides ovr_InitializeRenderingShim are allowed
            before ovr_Initialize succeeds or after ovr_Shutdown.
            
            LibOVRRT shared library search order:
                 1) Current working directory (often the same as the application directory).
                 2) Module directory (usually the same as the application directory, but not if the module is a separate shared library).
                 3) Application directory
                 4) Development directory (only if OVR_ENABLE_DEVELOPER_SEARCH is enabled, which is off by default).
                 5) Standard OS shared library search location(s) (OS-specific).
            </remarks>
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap64.SafeNativeMethods.ovr_GetLastErrorInfo(Ab3d.OculusWrap.ErrorInfo@)">
            <summary>
            Returns information about the most recent failed return value by the
            current thread for this library.
            
            This function itself can never generate an error.
            The last error is never cleared by LibOVR, but will be overwritten by new errors.
            Do not use this call to determine if there was an error in the last API 
            call as successful API calls don't clear the last ErrorInfo.
            To avoid any inconsistency, ovr_GetLastErrorInfo should be called immediately
            after an API function that returned a failed ovrResult, with no other API
            functions called in the interim.
            </summary>
            <param name="errorInfo">The last ErrorInfo for the current thread.</param>
            <remarks>
            Allocate an ErrorInfo and pass this as errorInfo argument.
            </remarks>
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap64.SafeNativeMethods.ovr_GetVersionString">
            <summary>
            Returns version string representing libOVR version. Static, so
            string remains valid for app lifespan
            </summary>
            <remarks>
            Use Marshal.PtrToStringAnsi() to retrieve version string.
            </remarks>
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap64.SafeNativeMethods.ovr_TraceMessage(System.Int32,System.String)">
            <summary>
            Send a message string to the system tracing mechanism if enabled (currently Event Tracing for Windows)
            </summary>
            <param name="level">
            One of the ovrLogLevel constants.
            </param>
            <param name="message">
            A UTF8-encoded null-terminated string.
            </param>
            <returns>
            Returns the length of the message, or -1 if message is too large
            </returns>
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap64.SafeNativeMethods.ovr_Shutdown">
            <summary>
            Shuts down all Oculus functionality.
            </summary>
            <remarks>
            No API functions may be called after ovr_Shutdown except ovr_Initialize.
            </remarks>
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap64.SafeNativeMethods.ovr_GetHmdDesc32(Ab3d.OculusWrap.HmdDesc@,System.IntPtr)">
            <summary>
            Returns information about the current HMD.
            
            ovr_Initialize must have first been called in order for this to succeed, otherwise HmdDesc.Type
            will be reported as None.
            
            Please note: This method will should only be called by a 32 bit process. 
            </summary>
            <param name="sessionPtr">
            Specifies an IntPtr previously returned by ovr_Create, else NULL in which
            case this function detects whether an HMD is present and returns its info if so.
            </param>
            <param name="result">
            Returns an ovrHmdDesc. If the hmd is null and ovrHmdDesc::Type is ovr_None then
            no HMD is present.
            </param>
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap64.SafeNativeMethods.ovr_GetHmdDesc64(Ab3d.OculusWrap.HmdDesc64@,System.IntPtr)">
            <summary>
            Returns information about the current HMD.
            
            ovr_Initialize must have first been called in order for this to succeed, otherwise HmdDesc.Type
            will be reported as None.
            
            Please note: This method will should only be called by a 64 bit process. 
            </summary>
            <param name="sessionPtr">
            Specifies an IntPtr previously returned by ovr_Create, else NULL in which
            case this function detects whether an HMD is present and returns its info if so.
            </param>
            <param name="result">
            Returns an ovrHmdDesc. If the hmd is null and ovrHmdDesc::Type is ovr_None then
            no HMD is present.
            </param>
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap64.SafeNativeMethods.ovr_GetTrackerCount(System.IntPtr)">
             <summary>
             Returns the number of sensors. 
            
             The number of sensors may change at any time, so this function should be called before use 
             as opposed to once on startup.
             </summary>
             <param name="sessionPtr">Specifies an IntPtr previously returned by ovr_Create.</param>
             <returns>Returns unsigned int count.</returns>
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap64.SafeNativeMethods.ovr_GetTrackerDesc(System.IntPtr,System.UInt32)">
             <summary>
             Returns a given sensor description.
            
             It's possible that sensor desc [0] may indicate a unconnnected or non-pose tracked sensor, but 
             sensor desc [1] may be connected.
             </summary>
             <param name="sessionPtr">Specifies an IntPtr previously returned by ovr_Create.</param>
             <param name="trackerDescIndex">
             Specifies a sensor index. The valid indexes are in the range of 0 to the sensor count returned by ovr_GetTrackerCount.
             </param>
             <returns>An empty ovrTrackerDesc will be returned if trackerDescIndex is out of range.</returns>
             <see cref="T:Ab3d.OculusWrap.TrackerDesc"/>
             <see cref="M:Ab3d.OculusWrap.OvrWrap64.GetTrackerCount(System.IntPtr)"/>
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap64.SafeNativeMethods.ovr_Create(System.IntPtr@,Ab3d.OculusWrap.GraphicsLuid@)">
            <summary>
            Creates a handle to a VR session.
            
            Upon success the returned IntPtr must be eventually freed with ovr_Destroy when it is no longer needed.
            A second call to ovr_Create will result in an error return value if the previous Hmd has not been destroyed.
            </summary>
            <param name="sessionPtr">
            Provides a pointer to an IntPtr which will be written to upon success.
            </param>
            <param name="pLuid">
            Provides a system specific graphics adapter identifier that locates which
            graphics adapter has the HMD attached. This must match the adapter used by the application
            or no rendering output will be possible. This is important for stability on multi-adapter systems. An
            application that simply chooses the default adapter will not run reliably on multi-adapter systems.
            </param>
            <remarks>
            Call Marshal.PtrToStructure(...) to convert the IntPtr to the OVR.ovrHmd type.
            </remarks>
            <returns>
            Returns an ovrResult indicating success or failure. Upon failure
            the returned pHmd will be null.
            </returns>
            <example>
            <code>
            IntPtr sessionPtr;
            ovrGraphicsLuid luid;
            ovrResult result = ovr_Create(ref session, ref luid);
            if(OVR_FAILURE(result))
            ...
            </code>
            </example>
            <see cref="M:Ab3d.OculusWrap.OvrWrap64.Destroy(System.IntPtr)"/>
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap64.SafeNativeMethods.ovr_Destroy(System.IntPtr)">
            <summary>
            Destroys the HMD.
            </summary>
            <param name="sessionPtr">Specifies an IntPtr previously returned by ovr_Create.</param>
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap64.SafeNativeMethods.ovr_GetSessionStatus(System.IntPtr,Ab3d.OculusWrap.SessionStatus@)">
            <summary>
            Returns status information for the application.
            </summary>
            <param name="sessionPtr">Specifies an IntPtr previously returned by ovr_Create.</param>
            <param name="sessionStatus">Provides a SessionStatus that is filled in.</param>
            <returns>
            Returns an ovrResult indicating success or failure. In the case of failure, use ovr_GetLastErrorInfo 
            to get more information.
            Return values include but aren't limited to:
            - Result.Success: Completed successfully.
            - Result.ServiceConnection: The service connection was lost and the application must destroy the session.
            </returns>
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap64.SafeNativeMethods.ovr_SetTrackingOriginType(System.IntPtr,Ab3d.OculusWrap.TrackingOrigin)">
             <summary>
             Sets the tracking origin type
            
             When the tracking origin is changed, all of the calls that either provide
             or accept ovrPosef will use the new tracking origin provided.
             </summary>
             <param name="sessionPtr">Specifies an IntPtr previously returned by ovr_Create.</param>
             <param name="origin">Specifies an ovrTrackingOrigin to be used for all ovrPosef</param>
             <returns>
             Returns an ovrResult indicating success or failure. 
             In the case of failure, use ovr_GetLastErrorInfo to get more information.
             </returns>
             <see cref="T:Ab3d.OculusWrap.TrackingOrigin"/>
             <see cref="M:Ab3d.OculusWrap.OvrWrap64.GetTrackingOriginType(System.IntPtr)"/>
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap64.SafeNativeMethods.ovr_GetTrackingOriginType(System.IntPtr)">
            <summary>
            Gets the tracking origin state
            </summary>
            <param name="sessionPtr">Specifies an IntPtr previously returned by ovr_Create.</param>
            <returns>Returns the TrackingOrigin that was either set by default, or previous set by the application.</returns>
            <see cref="T:Ab3d.OculusWrap.TrackingOrigin"/>
            <see cref="M:Ab3d.OculusWrap.OvrWrap64.SetTrackingOriginType(System.IntPtr,Ab3d.OculusWrap.TrackingOrigin)"/>
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap64.SafeNativeMethods.ovr_RecenterTrackingOrigin(System.IntPtr)">
             <summary>
             Re-centers the sensor position and orientation.
            
             This resets the (x,y,z) positional components and the yaw orientation component.
             The Roll and pitch orientation components are always determined by gravity and cannot
             be redefined. All future tracking will report values relative to this new reference position.
             If you are using ovrTrackerPoses then you will need to call ovr_GetTrackerPose after 
             this, because the sensor position(s) will change as a result of this.
             
             The headset cannot be facing vertically upward or downward but rather must be roughly
             level otherwise this function will fail with ovrError_InvalidHeadsetOrientation.
            
             For more info, see the notes on each ovrTrackingOrigin enumeration to understand how
             recenter will vary slightly in its behavior based on the current ovrTrackingOrigin setting.
             </summary>
             <param name="sessionPtr">Specifies an IntPtr previously returned by ovr_Create.</param>
             <returns>
             Returns an ovrResult indicating success or failure. In the case of failure, use
             ovr_GetLastErrorInfo to get more information. Return values include but aren't limited to:
             - Result.Success: Completed successfully.
             - Result.InvalidHeadsetOrientation: The headset was facing an invalid direction when attempting recentering, 
               such as facing vertically.
             </returns>
             <see cref="T:Ab3d.OculusWrap.TrackingOrigin"/>
             <see cref="M:Ab3d.OculusWrap.OvrWrap64.GetTrackerPose(System.IntPtr,System.UInt32)"/>
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap64.SafeNativeMethods.ovr_SpecifyTrackingOrigin(System.IntPtr,Ab3d.OculusWrap.Posef)">
             <summary>
             Allows manually tweaking the sensor position and orientation.
            
             This function is similar to ovr_RecenterTrackingOrigin in that it modifies the
             (x,y,z) positional components and the yaw orientation component of the tracking space for
             the HMD and controllers.
            
             While ovr_RecenterTrackingOrigin resets the tracking origin in reference to the HMD's
             current pose, ovr_SpecifyTrackingOrigin allows the caller to explicitly specify a transform
             for the tracking origin. This transform is expected to be an offset to the most recent
             recentered origin, so calling this function repeatedly with the same originPose will keep
             nudging the recentered origin in that direction.
            
             There are several use cases for this function. For example, if the application decides to
             limit the yaw, or translation of the recentered pose instead of directly using the HMD pose
             the application can query the current tracking state via ovr_GetTrackingState, and apply
             some limitations to the HMD pose because feeding this pose back into this function.
             Similarly, this can be used to "adjust the seating position" incrementally in apps that
             feature seated experiences such as cockpit-based games.
            
             This function can emulate ovr_RecenterTrackingOrigin as such:
                 ovrTrackingState ts = ovr_GetTrackingState(session, 0.0, ovrFalse);
                 ovr_SpecifyTrackingOrigin(session, ts.HeadPose.ThePose);
            
             The roll and pitch orientation components are determined by gravity and cannot be redefined.
             If you are using ovrTrackerPoses then you will need to call ovr_GetTrackerPose after
             this, because the sensor position(s) will change as a result of this.
            
             For more info, see the notes on each ovrTrackingOrigin enumeration to understand how
             recenter will vary slightly in its behavior based on the current ovrTrackingOrigin setting.
             </summary>
             <param name="sessionPtr">Specifies an IntPtr previously returned by ovr_Create.</param>
             <param name="originPose">originPose Specifies a pose that will be used to transform the current tracking origin.</param>
             <returns>
             Returns an ovrResult indicating success or failure. In the case of failure, use
             ovr_GetLastErrorInfo to get more information. Return values include but aren't limited to:
             - ovrSuccess: Completed successfully.
             - ovrError_InvalidParameter: The heading direction in originPose was invalid,
             such as facing vertically. This can happen if the caller is directly feeding the pose
             of a position-tracked device such as an HMD or controller into this function.
             </returns>
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap64.SafeNativeMethods.ovr_ClearShouldRecenterFlag(System.IntPtr)">
             <summary>
             Clears the ShouldRecenter status bit in IntPtrStatus.
            
             Clears the ShouldRecenter status bit in IntPtrStatus, allowing further recenter 
             requests to be detected. Since this is automatically done by ovr_RecenterTrackingOrigin,
             this is only needs to be called when application is doing its own re-centering.
             </summary>
             <param name="sessionPtr">Specifies an IntPtr previously returned by ovr_Create.</param>
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap64.SafeNativeMethods.ovr_GetTrackerPose(System.IntPtr,System.UInt32)">
            <summary>
            Returns the ovrTrackerPose for the given sensor.
            </summary>
            <param name="sessionPtr">Specifies an IntPtr previously returned by ovr_Create.</param>
            <param name="trackerPoseIndex">Index of the sensor being requested.</param>
            <returns>
            Returns the requested ovrTrackerPose. An empty ovrTrackerPose will be returned if trackerPoseIndex is out of range.
            </returns>
            <see cref="M:Ab3d.OculusWrap.OvrWrap64.GetTrackerCount(System.IntPtr)"/>
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap64.SafeNativeMethods.ovr_GetInputState(System.IntPtr,Ab3d.OculusWrap.ControllerType,Ab3d.OculusWrap.InputState@)">
            <summary>
            Returns the most recent input state for controllers, without positional tracking info.
            </summary>
            <param name="sessionPtr">Specifies an IntPtr previously returned by ovr_Create.</param>
            <param name="controllerType">Specifies which controller the input will be returned for.</param>
            <param name="inputState">Input state that will be filled in.</param>
            <returns>Returns Result.Success if the new state was successfully obtained.</returns>
            <see cref="T:Ab3d.OculusWrap.ControllerType"/>
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap64.SafeNativeMethods.ovr_GetConnectedControllerTypes(System.IntPtr)">
            <summary>
            Returns controller types connected to the system OR'ed together.
            </summary>
            <param name="sessionPtr">Specifies an IntPtr previously returned by ovr_Create.</param>
            <returns>A bitmask of ControllerTypes connected to the system.</returns>
            <see cref="T:Ab3d.OculusWrap.ControllerType"/>
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap64.SafeNativeMethods.ovr_GetTrackingState(Ab3d.OculusWrap.TrackingState@,System.IntPtr,System.Double,System.Byte)">
             <summary>
             Returns tracking state reading based on the specified absolute system time.
            
             Pass an absTime value of 0.0 to request the most recent sensor reading. In this case
             both PredictedPose and SamplePose will have the same value.
            
             This may also be used for more refined timing of front buffer rendering logic, and so on.
             This may be called by multiple threads.
             </summary>
             <param name="result">Returns the TrackingState that is predicted for the given absTime.</param>
             <param name="sessionPtr">
             Specifies an IntPtr previously returned by ovr_Create.
             </param>
             <param name="absTime">
             Specifies the absolute future time to predict the return
             TrackingState value. Use 0 to request the most recent tracking state.
             </param>
             <param name="latencyMarker">
             Specifies that this call is the point in time where
             the "App-to-Mid-Photon" latency timer starts from. If a given ovrLayer
             provides "SensorSampleTimestamp", that will override the value stored here.
             </param>
             <see cref="T:Ab3d.OculusWrap.TrackingState"/>
             <see cref="M:Ab3d.OculusWrap.OvrWrap64.GetEyePoses(System.IntPtr,System.Int64,System.Boolean,Ab3d.OculusWrap.Vector3f[],Ab3d.OculusWrap.Posef[]@,System.Double@)"/>
             <see cref="M:Ab3d.OculusWrap.OvrWrap64.GetTimeInSeconds"/>
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap64.SafeNativeMethods.ovr_GetDevicePoses(System.IntPtr,Ab3d.OculusWrap.TrackedDeviceType[],System.Int32,System.Double,Ab3d.OculusWrap.PoseStatef[])">
            Returns an array of poses, where each pose matches a device type provided by the deviceTypes
            array parameter.
            <param name="sessionPtr">Specifies an ovrSession previously returned by ovr_Create.</param>
            <param name="deviceTypes">Array of device types to query for their poses.</param>
            <param name="deviceCount">deviceCount Number of queried poses. This number must match the length of the outDevicePoses and deviceTypes array.</param>
            <param name="absTime">Specifies the absolute future time to predict the return ovrTrackingState value. Use 0 to request the most recent tracking state.</param>
            <param name="outDevicePoses">Array of poses, one for each device type in deviceTypes arrays (size must match the size of deviceTypes array).</param>
            <returns>Returns an ovrResult for which OVR_SUCCESS(result) is false upon error and true upon success.</returns>
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap64.SafeNativeMethods.ovr_SetControllerVibration(System.IntPtr,Ab3d.OculusWrap.ControllerType,System.Single,System.Single)">
             <summary>
             Turns on vibration of the given controller.
            
             To disable vibration, call ovr_SetControllerVibration with an amplitude of 0.
             Vibration automatically stops after a nominal amount of time, so if you want vibration 
             to be continuous over multiple seconds then you need to call this function periodically.
             </summary>
             <param name="sessionPtr">Specifies an IntPtr previously returned by ovr_Create.</param>
             <param name="controllerType">Specifies controllers to apply the vibration to.</param>
             <param name="frequency">
             Specifies a vibration frequency in the range of 0.0 to 1.0. 
             Currently the only valid values are 0.0, 0.5, and 1.0 and other values will
             be clamped to one of these.
             </param>
             <param name="amplitude">Specifies a vibration amplitude in the range of 0.0 to 1.0.</param>
             <returns>Returns ovrSuccess upon success.</returns>
             <see cref="T:Ab3d.OculusWrap.ControllerType"/>
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap64.SafeNativeMethods.ovr_GetTextureSwapChainLength(System.IntPtr,System.IntPtr,System.Int32@)">
            <summary>
            Gets the number of buffers in an IntPtr.
            </summary>
            <param name="sessionPtr">Specifies an IntPtr previously returned by ovr_Create.</param>
            <param name="chain">Specifies the IntPtr for which the length should be retrieved.</param>
            <param name="out_Length">Returns the number of buffers in the specified chain.</param>
            <returns>Returns an ovrResult for which the return code is negative upon error. </returns>
            <see cref="M:Ab3d.OculusWrap.OvrWrap64.CreateTextureSwapChainDX(System.IntPtr,System.IntPtr,Ab3d.OculusWrap.TextureSwapChainDesc@,System.IntPtr@)"/>
            <see cref="M:Ab3d.OculusWrap.OvrWrap64.CreateTextureSwapChainGL(System.IntPtr,Ab3d.OculusWrap.TextureSwapChainDesc,System.IntPtr@)"/>
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap64.SafeNativeMethods.ovr_GetTextureSwapChainCurrentIndex(System.IntPtr,System.IntPtr,System.Int32@)">
            <summary>
            Gets the current index in an IntPtr.
            </summary>
            <param name="sessionPtr">Specifies an IntPtr previously returned by ovr_Create.</param>
            <param name="chain">Specifies the IntPtr for which the index should be retrieved.</param>
            <param name="out_Index">Returns the current (free) index in specified chain.</param>
            <returns>Returns an ovrResult for which the return code is negative upon error. </returns>
            <see cref="M:Ab3d.OculusWrap.OvrWrap64.CreateTextureSwapChainDX(System.IntPtr,System.IntPtr,Ab3d.OculusWrap.TextureSwapChainDesc@,System.IntPtr@)"/>
            <see cref="M:Ab3d.OculusWrap.OvrWrap64.CreateTextureSwapChainGL(System.IntPtr,Ab3d.OculusWrap.TextureSwapChainDesc,System.IntPtr@)"/>
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap64.SafeNativeMethods.ovr_GetTextureSwapChainDesc(System.IntPtr,System.IntPtr,Ab3d.OculusWrap.TextureSwapChainDesc@)">
            <summary>
            Gets the description of the buffers in an IntPtr
            </summary>
            <param name="sessionPtr">Specifies an IntPtr previously returned by ovr_Create.</param>
            <param name="chain">Specifies the IntPtr for which the description should be retrieved.</param>
            <param name="out_Desc">Returns the description of the specified chain.</param>
            <returns>Returns an ovrResult for which the return code is negative upon error. </returns>
            <see cref="M:Ab3d.OculusWrap.OvrWrap64.CreateTextureSwapChainDX(System.IntPtr,System.IntPtr,Ab3d.OculusWrap.TextureSwapChainDesc@,System.IntPtr@)"/>
            <see cref="M:Ab3d.OculusWrap.OvrWrap64.CreateTextureSwapChainGL(System.IntPtr,Ab3d.OculusWrap.TextureSwapChainDesc,System.IntPtr@)"/>
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap64.SafeNativeMethods.ovr_CommitTextureSwapChain(System.IntPtr,System.IntPtr)">
            <summary>
            Commits any pending changes to an IntPtr, and advances its current index
            </summary>
            <param name="sessionPtr">Specifies an IntPtr previously returned by ovr_Create.</param>
            <param name="chain">Specifies the IntPtr to commit.</param>
            <returns>
            Returns an ovrResult for which the return code is negative upon error.
            Failures include but aren't limited to:
              - Result.TextureSwapChainFull: ovr_CommitTextureSwapChain was called too many times on a texture swapchain without calling submit to use the chain.
            </returns>
            <see cref="M:Ab3d.OculusWrap.OvrWrap64.CreateTextureSwapChainDX(System.IntPtr,System.IntPtr,Ab3d.OculusWrap.TextureSwapChainDesc@,System.IntPtr@)"/>
            <see cref="M:Ab3d.OculusWrap.OvrWrap64.CreateTextureSwapChainGL(System.IntPtr,Ab3d.OculusWrap.TextureSwapChainDesc,System.IntPtr@)"/>
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap64.SafeNativeMethods.ovr_DestroyTextureSwapChain(System.IntPtr,System.IntPtr)">
            <summary>
            Destroys an IntPtr and frees all the resources associated with it.
            </summary>
            <param name="sessionPtr">Specifies an IntPtr previously returned by ovr_Create.</param>
            <param name="chain">Specifies the IntPtr to destroy. If it is null then this function has no effect.</param>
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap64.SafeNativeMethods.ovr_DestroyMirrorTexture(System.IntPtr,System.IntPtr)">
            <summary>
            Destroys a mirror texture previously created by one of the mirror texture creation functions.
            </summary>
            <param name="sessionPtr">
            Specifies an IntPtr previously returned by ovr_Create.
            </param>
            <param name="mirrorTexturePtr">
            Specifies the ovrTexture to destroy. If it is null then this function has no effect.
            </param>
            <see cref="M:Ab3d.OculusWrap.OvrWrap64.CreateMirrorTextureDX(System.IntPtr,System.IntPtr,Ab3d.OculusWrap.MirrorTextureDesc@,System.IntPtr@)"/>
            <see cref="M:Ab3d.OculusWrap.OvrWrap64.CreateMirrorTextureGL(System.IntPtr,Ab3d.OculusWrap.MirrorTextureDesc,System.IntPtr@)"/>
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap64.SafeNativeMethods.ovr_GetFovTextureSize(System.IntPtr,Ab3d.OculusWrap.EyeType,Ab3d.OculusWrap.FovPort,System.Single)">
            <summary>
            Calculates the recommended viewport size for rendering a given eye within the HMD
            with a given FOV cone. 
            
            Higher FOV will generally require larger textures to maintain quality.
            Apps packing multiple eye views together on the same texture should ensure there are
            at least 8 pixels of padding between them to prevent texture filtering and chromatic
            aberration causing images to leak between the two eye views.
            </summary>
            <param name="sessionPtr">
            Specifies an IntPtr previously returned by ovr_Create.
            </param>
            <param name="eye">
            Specifies which eye (left or right) to calculate for.
            </param>
            <param name="fov">
            Specifies the ovrFovPort to use.
            </param>
            <param name="pixelsPerDisplayPixel">
            pixelsPerDisplayPixel Specifies the ratio of the number of render target pixels 
            to display pixels at the center of distortion. 1.0 is the default value. Lower
            values can improve performance, higher values give improved quality.
            </param>
            <returns>
            Returns the texture width and height size.
            </returns>
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap64.SafeNativeMethods.ovr_GetRenderDesc(System.IntPtr,Ab3d.OculusWrap.EyeType,Ab3d.OculusWrap.FovPort)">
            <summary>
            Computes the distortion viewport, view adjust, and other rendering parameters for
            the specified eye.
            </summary>
            <param name="sessionPtr">
            Specifies an IntPtr previously returned by ovr_Create.
            </param>
            <param name="eyeType">
            Specifies which eye (left or right) for which to perform calculations.
            </param>
            <param name="fov">
            Specifies the FovPort to use.
            </param>
            <returns>
            Returns the computed EyeRenderDesc for the given eyeType and field of view.
            </returns>
            <see cref="T:Ab3d.OculusWrap.EyeRenderDesc"/>
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap64.SafeNativeMethods.ovr_SubmitFrame(System.IntPtr,System.Int64,System.IntPtr,System.IntPtr,System.Int32)">
            <summary>
            Submits layers for distortion and display.
            
            ovr_SubmitFrame triggers distortion and processing which might happen asynchronously. 
            The function will return when there is room in the submission queue and surfaces
            are available. Distortion might or might not have completed.
            </summary>
            <param name="sessionPtr">
            Specifies an IntPtr previously returned by ovr_Create.
            </param>
            <param name="frameIndex">
            Specifies the targeted application frame index, or 0 to refer to one frame 
            after the last time ovr_SubmitFrame was called.
            </param>
            <param name="viewScaleDesc">
            Provides additional information needed only if layerPtrList contains
            an ovrLayerType_Quad. If null, a default version is used based on the current configuration and a 1.0 world scale.
            </param>
            <param name="layerPtrList">
            Specifies a list of ovrLayer pointers, which can include null entries to
            indicate that any previously shown layer at that index is to not be displayed.
            Each layer header must be a part of a layer structure such as ovrLayerEyeFov or ovrLayerQuad,
            with Header.Type identifying its type. A null layerPtrList entry in the array indicates the 
            absence of the given layer.
            </param>
            <param name="layerCount">
            Indicates the number of valid elements in layerPtrList. The maximum supported layerCount 
            is not currently specified, but may be specified in a future version.
            </param>
            <returns>
            Returns an ovrResult for which the return code is negative upon error and positive
            upon success. Return values include but aren't limited to:
                - Result.Success: rendering completed successfully.
                - Result.NotVisible: rendering completed successfully but was not displayed on the HMD,
                  usually because another application currently has ownership of the HMD. Applications receiving
                  this result should stop rendering new content, but continue to call ovr_SubmitFrame periodically
                  until it returns a value other than ovrSuccess_NotVisible.
                - Result.DisplayLost: The session has become invalid (such as due to a device removal)
                  and the shared resources need to be released (ovr_DestroyTextureSwapChain), the session needs to
                  destroyed (ovr_Destroy) and recreated (ovr_Create), and new resources need to be created
                  (ovr_CreateTextureSwapChainXXX). The application's existing private graphics resources do not
                  need to be recreated unless the new ovr_Create call returns a different GraphicsLuid.
                - Result.TextureSwapChainInvalid: The IntPtr is in an incomplete or inconsistent state. 
                  Ensure ovr_CommitTextureSwapChain was called at least once first.
            </returns>
            <remarks>
            layerPtrList must contain an array of pointers. 
            Each pointer must point to an object, which starts with a an LayerHeader property.
            </remarks>
            <see cref="M:Ab3d.OculusWrap.OvrWrap64.GetPredictedDisplayTime(System.IntPtr,System.Int64)"/>
            <see cref="T:Ab3d.OculusWrap.ViewScaleDesc"/>
            <see cref="T:Ab3d.OculusWrap.LayerHeader"/>
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap64.SafeNativeMethods.ovr_GetPredictedDisplayTime(System.IntPtr,System.Int64)">
             <summary>
             Gets the time of the specified frame midpoint.
            
             Predicts the time at which the given frame will be displayed. The predicted time 
             is the middle of the time period during which the corresponding eye images will 
             be displayed. 
             
             The application should increment frameIndex for each successively targeted frame,
             and pass that index to any relevent OVR functions that need to apply to the frame
             identified by that index. 
             
             This function is thread-safe and allows for multiple application threads to target 
             their processing to the same displayed frame.
             
             In the even that prediction fails due to various reasons (e.g. the display being off
             or app has yet to present any frames), the return value will be current CPU time.
             </summary>
             <param name="sessionPtr">
             Specifies an IntPtr previously returned by ovr_Create.
             </param>
             <param name="frameIndex">
             Identifies the frame the caller wishes to target.
             A value of zero returns the next frame index.
             </param>
             <returns>
             Returns the absolute frame midpoint time for the given frameIndex.
             </returns>
             <see cref="M:Ab3d.OculusWrap.OvrWrap64.GetTimeInSeconds"/>
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap64.SafeNativeMethods.ovr_GetTimeInSeconds">
             <summary>
             Returns global, absolute high-resolution time in seconds. 
            
             The time frame of reference for this function is not specified and should not be
             depended upon.
             </summary>
             <returns>
             Returns seconds as a floating point value.
             </returns>
             <see cref="T:Ab3d.OculusWrap.PoseStatef"/>
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap64.SafeNativeMethods.ovr_GetBool(System.IntPtr,System.String,System.Byte)">
            <summary>
            Reads a boolean property.
            </summary>
            <param name="sessionPtr">
            Specifies an IntPtr previously returned by ovr_Create.
            </param>
            <param name="propertyName">
            The name of the property, which needs to be valid for only the call.
            </param>
            <param name="defaultVal">
            Specifes the value to return if the property couldn't be read.
            </param>
            <returns>
            Returns the property interpreted as a boolean value. 
            Returns defaultVal if the property doesn't exist.
            </returns>
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap64.SafeNativeMethods.ovr_SetBool(System.IntPtr,System.String,System.Byte)">
            <summary>
            Writes or creates a boolean property.
            If the property wasn't previously a boolean property, it is changed to a boolean property.
            </summary>
            <param name="sessionPtr">
            Specifies an IntPtr previously returned by ovr_Create.
            </param>
            <param name="propertyName">
            The name of the property, which needs to be valid for only the call.
            </param>
            <param name="value">
            The value to write.
            </param>
            <returns>
            Returns true if successful, otherwise false. 
            A false result should only occur if the property name is empty or if the property is read-only.
            </returns>
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap64.SafeNativeMethods.ovr_GetInt(System.IntPtr,System.String,System.Int32)">
            <summary>
            Reads an integer property.
            </summary>
            <param name="sessionPtr">
            Specifies an IntPtr previously returned by ovr_Create.
            </param>
            <param name="propertyName">
            The name of the property, which needs to be valid for only the call.
            </param>
            <param name="defaultVal">
            Specifes the value to return if the property couldn't be read.
            </param>
            <returns>
            Returns the property interpreted as an integer value. 
            Returns defaultVal if the property doesn't exist.
            </returns>
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap64.SafeNativeMethods.ovr_SetInt(System.IntPtr,System.String,System.Int32)">
            <summary>
            Writes or creates an integer property.
            
            If the property wasn't previously an integer property, it is changed to an integer property.
            </summary>
            <param name="sessionPtr">
            Specifies an IntPtr previously returned by ovr_Create.
            </param>
            <param name="propertyName">
            The name of the property, which needs to be valid for only the call.
            </param>
            <param name="value">
            The value to write.
            </param>
            <returns>
            Returns true if successful, otherwise false. 
            A false result should only occur if the property name is empty or if the property is read-only.
            </returns>
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap64.SafeNativeMethods.ovr_GetFloat(System.IntPtr,System.String,System.Single)">
            <summary>
            Reads a float property.
            </summary>
            <param name="sessionPtr">
            Specifies an IntPtr previously returned by ovr_Create.
            </param>
            <param name="propertyName">
            The name of the property, which needs to be valid for only the call.
            </param>
            <param name="defaultVal">
            Specifes the value to return if the property couldn't be read.
            </param>
            <returns>
            Returns the property interpreted as an float value. 
            Returns defaultVal if the property doesn't exist.
            </returns>
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap64.SafeNativeMethods.ovr_SetFloat(System.IntPtr,System.String,System.Single)">
            <summary>
            Writes or creates a float property.
            
            If the property wasn't previously a float property, it's changed to a float property.
            </summary>
            <param name="sessionPtr">
            Specifies an IntPtr previously returned by ovr_Create.
            </param>
            <param name="propertyName">
            The name of the property, which needs to be valid for only the call.
            </param>
            <param name="value">
            The value to write.
            </param>
            <returns>
            Returns true if successful, otherwise false. 
            A false result should only occur if the property name is empty or if the property is read-only.
            </returns>
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap64.SafeNativeMethods.ovr_GetFloatArray(System.IntPtr,System.String,System.Single[],System.Int32)">
            <summary>
            Reads a float array property.
            </summary>
            <param name="sessionPtr">
            Specifies an IntPtr previously returned by ovr_Create.
            </param>
            <param name="propertyName">
            The name of the property, which needs to be valid for only the call.
            </param>
            <param name="values">
            An array of float to write to.
            </param>
            <param name="valuesCapacity">
            Specifies the maximum number of elements to write to the values array.
            </param>
            <returns>
            Returns the number of elements read, or 0 if property doesn't exist or is empty.
            </returns>
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap64.SafeNativeMethods.ovr_SetFloatArray(System.IntPtr,System.String,System.Single[],System.Int32)">
            <summary>
            Writes or creates a float array property.
            </summary>
            <param name="sessionPtr">
            Specifies an IntPtr previously returned by ovr_Create.
            </param>
            <param name="propertyName">
            The name of the property, which needs to be valid for only the call.
            </param>
            <param name="values">
            An array of float to write from.
            </param>
            <param name="valuesSize">
            Specifies the number of elements to write.
            </param>
            <returns>
            Returns true if successful, otherwise false. 
            A false result should only occur if the property name is empty or if the property is read-only.
            </returns>
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap64.SafeNativeMethods.ovr_GetString(System.IntPtr,System.String,System.String)">
            <summary>
            Reads a string property.
            Strings are UTF8-encoded and null-terminated.
            </summary>
            <param name="sessionPtr">
            Specifies an IntPtr previously returned by ovr_Create.
            </param>
            <param name="propertyName">
            The name of the property, which needs to be valid for only the call.
            </param>
            <param name="defaultVal">
            Specifes the value to return if the property couldn't be read.
            </param>
            <returns>
            Returns the string property if it exists. 
            
            Otherwise returns defaultVal, which can be specified as null.
            The return memory is guaranteed to be valid until next call to ovr_GetString or 
            until the HMD is destroyed, whichever occurs first.
            </returns>
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap64.SafeNativeMethods.ovr_SetString(System.IntPtr,System.String,System.String)">
            <summary>
            Writes or creates a string property.
            Strings are UTF8-encoded and null-terminated.
            </summary>
            <param name="sessionPtr">
            Specifies an IntPtr previously returned by ovr_Create.
            </param>
            <param name="propertyName">
            The name of the property, which needs to be valid for only the call.
            </param>
            <param name="value">
            The string property, which only needs to be valid for the duration of the call.
            </param>
            <returns>
            Returns true if successful, otherwise false. 
            
            A false result should only occur if the property name is empty or if the property is read-only.
            </returns>
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap64.SafeNativeMethods.ovrMatrix4f_Projection(Ab3d.OculusWrap.FovPort,System.Single,System.Single,Ab3d.OculusWrap.ProjectionModifier)">
            <summary>
            Used to generate projection from ovrEyeDesc::Fov.
            </summary>
            <param name="fov">
            Specifies the ovrFovPort to use.
            </param>
            <param name="znear">
            Distance to near Z limit.
            </param>
            <param name="zfar">
            Distance to far Z limit.
            </param>
            <param name="projectionModFlags">
            A combination of the ProjectionModifier flags.
            </param>
            <returns>
            Returns the calculated projection matrix.
            </returns>
            <see cref="T:Ab3d.OculusWrap.ProjectionModifier"/>
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap64.SafeNativeMethods.ovrTimewarpProjectionDesc_FromProjection(Ab3d.OculusWrap.Matrix4f,Ab3d.OculusWrap.ProjectionModifier)">
            <summary>
            Extracts the required data from the result of ovrMatrix4f_Projection.
            </summary>
            <param name="projection">Specifies the project matrix from which to extract ovrTimewarpProjectionDesc.</param>
            <param name="projectionModFlags">A combination of the ProjectionModifier flags.</param>
            <returns>Returns the extracted ovrTimewarpProjectionDesc.</returns>
            <see cref="T:Ab3d.OculusWrap.TimewarpProjectionDesc"/>
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap64.SafeNativeMethods.ovrMatrix4f_OrthoSubProjection(Ab3d.OculusWrap.Matrix4f,Ab3d.OculusWrap.Vector2f,System.Single,System.Single)">
             <summary>
             Generates an orthographic sub-projection.
            
             Used for 2D rendering, Y is down.
             </summary>
             <param name="projection">
             The perspective matrix that the orthographic matrix is derived from.
             </param>
             <param name="orthoScale">
             Equal to 1.0f / pixelsPerTanAngleAtCenter.
             </param>
             <param name="orthoDistance">
             Equal to the distance from the camera in meters, such as 0.8m.
             </param>
             <param name="hmdToEyeOffsetX">
             Specifies the offset of the eye from the center.
             </param>
             <returns>
             Returns the calculated projection matrix.
             </returns>
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap64.SafeNativeMethods.ovr_CalcEyePoses(Ab3d.OculusWrap.Posef,Ab3d.OculusWrap.Vector3f[],System.IntPtr)">
            <summary>
            Computes offset eye poses based on headPose returned by TrackingState.
            </summary>
            <param name="headPose">
            Indicates the HMD position and orientation to use for the calculation.
            </param>
            <param name="hmdToEyeOffset">
            Can EyeRenderDesc.HmdToEyeOffset returned from 
            ovr_GetRenderDesc. For monoscopic rendering, use a vector that is the average 
            of the two vectors for both eyes.
            </param>
            <param name="outEyePoses">
            If outEyePoses are used for rendering, they should be passed to 
            ovr_SubmitFrame in LayerEyeFov.RenderPose or LayerEyeFovDepth.RenderPose.
            </param>         
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap64.SafeNativeMethods.ovr_GetEyePoses(System.IntPtr,System.Int64,System.Byte,Ab3d.OculusWrap.Vector3f[],System.IntPtr,System.Double@)">
            <summary>
            Returns the predicted head pose in HmdTrackingState and offset eye poses in outEyePoses. 
            
            This is a thread-safe function where caller should increment frameIndex with every frame
            and pass that index where applicable to functions called on the rendering thread.
            Assuming outEyePoses are used for rendering, it should be passed as a part of ovrLayerEyeFov.
            The caller does not need to worry about applying HmdToEyeOffset to the returned outEyePoses variables.
            </summary>
            <param name="sessionPtr">IntPtr previously returned by ovr_Create.</param>
            <param name="frameIndex">
            Specifies the targeted frame index, or 0 to refer to one frame after 
            the last time ovr_SubmitFrame was called.
            </param>
            <param name="latencyMarker">
            Specifies that this call is the point in time where
            the "App-to-Mid-Photon" latency timer starts from. If a given ovrLayer
            provides "SensorSampleTimestamp", that will override the value stored here.
            </param>
            <param name="hmdToEyeOffset">
            Can be EyeRenderDesc.HmdToEyeOffset returned from ovr_GetRenderDesc. 
            For monoscopic rendering, use a vector that is the average of the two vectors for both eyes.
            </param>
            <param name="outEyePoses">
            The predicted eye poses.
            </param>
            <param name="outSensorSampleTime">
            The time when this function was called. 
            May be null, in which case it is ignored.
            </param>
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap64.SafeNativeMethods.ovrPosef_FlipHandedness(Ab3d.OculusWrap.Posef@,Ab3d.OculusWrap.Posef@)">
             <summary>
             Tracking poses provided by the SDK come in a right-handed coordinate system. If an application
             is passing in ovrProjection_LeftHanded into ovrMatrix4f_Projection, then it should also use
             this function to flip the HMD tracking poses to be left-handed.
            
             While this utility function is intended to convert a left-handed ovrPosef into a right-handed
             coordinate system, it will also work for converting right-handed to left-handed since the
             flip operation is the same for both cases.
             </summary>
             <param name="inPose">inPose that is right-handed</param>
             <param name="outPose">outPose that is requested to be left-handed (can be the same pointer to inPose)</param>
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap64.SafeNativeMethods.ovr_CreateTextureSwapChainDX(System.IntPtr,System.IntPtr,Ab3d.OculusWrap.TextureSwapChainDesc@,System.IntPtr@)">
            <summary>
            Create Texture Swap Chain suitable for use with Direct3D 11 and 12.
            </summary>
            <param name="sessionPtr">Specifies an IntPtr previously returned by ovr_Create.</param>
            <param name="d3dPtr">
            Specifies the application's D3D11Device to create resources with or the D3D12CommandQueue 
            which must be the same one the application renders to the eye textures with.</param>
            <param name="desc">Specifies requested texture properties. See notes for more info about texture format.</param>
            <param name="out_TextureSwapChain">
            Returns the created IntPtr, which will be valid upon a successful return value, else it will be null.
            This texture chain must be eventually destroyed via ovr_DestroyTextureSwapChain before destroying the HMD with ovr_Destroy.
            </param>
            <returns>
            Returns an ovrResult indicating success or failure. In the case of failure, use 
            ovr_GetLastErrorInfo to get more information.
            </returns>
            <remarks>
            The texture format provided in desc should be thought of as the format the distortion-compositor will use for the
            ShaderResourceView when reading the contents of the texture. To that end, it is highly recommended that the application
            requests texture swapchain formats that are in sRGB-space (e.g. OVR_FORMAT_R8G8B8A8_UNORM_SRGB) as the compositor
            does sRGB-correct rendering. As such, the compositor relies on the GPU's hardware sampler to do the sRGB-to-linear
            conversion. If the application still prefers to render to a linear format (e.g. OVR_FORMAT_R8G8B8A8_UNORM) while handling the
            linear-to-gamma conversion via HLSL code, then the application must still request the corresponding sRGB format and also use
            the ovrTextureMisc_DX_Typeless flag in the IntPtrDesc's Flag field. This will allow the application to create
            a RenderTargetView that is the desired linear format while the compositor continues to treat it as sRGB. Failure to do so
            will cause the compositor to apply unexpected gamma conversions leading to gamma-curve artifacts. The ovrTextureMisc_DX_Typeless
            flag for depth buffer formats (e.g. OVR_FORMAT_D32_FLOAT) is ignored as they are always converted to be typeless.
            </remarks>
            <see cref="M:Ab3d.OculusWrap.OvrWrap64.GetTextureSwapChainLength(System.IntPtr,System.IntPtr,System.Int32@)"/>
            <see cref="M:Ab3d.OculusWrap.OvrWrap64.GetTextureSwapChainCurrentIndex(System.IntPtr,System.IntPtr,System.Int32@)"/>
            <see cref="M:Ab3d.OculusWrap.OvrWrap64.GetTextureSwapChainDesc(System.IntPtr,System.IntPtr,Ab3d.OculusWrap.TextureSwapChainDesc@)"/>
            <see cref="M:Ab3d.OculusWrap.OvrWrap64.GetTextureSwapChainBufferDX(System.IntPtr,System.IntPtr,System.Int32,System.Guid,System.IntPtr@)"/>
            <see cref="M:Ab3d.OculusWrap.OvrWrap64.DestroyTextureSwapChain(System.IntPtr,System.IntPtr)"/>
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap64.SafeNativeMethods.ovr_GetTextureSwapChainBufferDX(System.IntPtr,System.IntPtr,System.Int32,System.Guid,System.IntPtr@)">
            <summary>
            Get a specific buffer within the chain as any compatible COM interface (similar to QueryInterface)
            </summary>
            <param name="sessionPtr">Specifies an IntPtr previously returned by ovr_Create.</param>
            <param name="chain">Specifies an IntPtr previously returned by ovr_CreateTextureSwapChainDX</param>
            <param name="index">
            Specifies the index within the chain to retrieve. Must be between 0 and length (see ovr_GetTextureSwapChainLength),
            or may pass -1 to get the buffer at the CurrentIndex location. (Saving a call to GetTextureSwapChainCurrentIndex).
            </param>
            <param name="iid">Specifies the interface ID of the interface pointer to query the buffer for.</param>
            <param name="out_Buffer">Returns the COM interface pointer retrieved.</param>
            <returns>
            Returns an ovrResult indicating success or failure. In the case of failure, use 
            ovr_GetLastErrorInfo to get more information.
            </returns>
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap64.SafeNativeMethods.ovr_CreateMirrorTextureDX(System.IntPtr,System.IntPtr,Ab3d.OculusWrap.MirrorTextureDesc@,System.IntPtr@)">
             <summary>
             Create Mirror Texture which is auto-refreshed to mirror Rift contents produced by this application.
            
             A second call to ovr_CreateMirrorTextureDX for a given IntPtr before destroying the first one
             is not supported and will result in an error return.
             </summary>
             <param name="sessionPtr">Specifies an IntPtr previously returned by ovr_Create.</param>
             <param name="d3dPtr">
             Specifies the application's D3D11Device to create resources with or the D3D12CommandQueue
             which must be the same one the application renders to the textures with.
             </param>
             <param name="desc">Specifies requested texture properties. See notes for more info about texture format.</param>
             <param name="out_MirrorTexture">
             Returns the created IntPtr, which will be valid upon a successful return value, else it will be null.
             This texture must be eventually destroyed via ovr_DestroyMirrorTexture before destroying the HMD with ovr_Destroy.
             </param>
             <returns>
             Returns an ovrResult indicating success or failure. In the case of failure, use 
             ovr_GetLastErrorInfo to get more information.
             </returns>
             <remarks>
             The texture format provided in desc should be thought of as the format the compositor will use for the RenderTargetView when
             writing into mirror texture. To that end, it is highly recommended that the application requests a mirror texture format that is
             in sRGB-space (e.g. OVR.TextureFormat.R8G8B8A8_UNORM_SRGB) as the compositor does sRGB-correct rendering. If however the application wants
             to still read the mirror texture as a linear format (e.g. OVR.TextureFormat.OVR_FORMAT_R8G8B8A8_UNORM) and handle the sRGB-to-linear conversion in
             HLSL code, then it is recommended the application still requests an sRGB format and also use the ovrTextureMisc_DX_Typeless flag in the
             IntPtrDesc's Flags field. This will allow the application to bind a ShaderResourceView that is a linear format while the
             compositor continues to treat is as sRGB. Failure to do so will cause the compositor to apply unexpected gamma conversions leading to 
             gamma-curve artifacts.
             </remarks>
             <see cref="M:Ab3d.OculusWrap.OvrWrap64.GetMirrorTextureBufferDX(System.IntPtr,System.IntPtr,System.Guid,System.IntPtr@)"/>
             <see cref="M:Ab3d.OculusWrap.OvrWrap64.DestroyMirrorTexture(System.IntPtr,System.IntPtr)"/>
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap64.SafeNativeMethods.ovr_GetMirrorTextureBufferDX(System.IntPtr,System.IntPtr,System.Guid,System.IntPtr@)">
            <summary>
            Get a the underlying buffer as any compatible COM interface (similar to QueryInterface) 
            </summary>
            <param name="sessionPtr">Specifies an IntPtr previously returned by ovr_Create.</param>
            <param name="mirrorTexturePtr">Specifies an IntPtr previously returned by ovr_CreateMirrorTextureDX</param>
            <param name="iid">Specifies the interface ID of the interface pointer to query the buffer for.</param>
            <param name="out_Buffer">Returns the COM interface pointer retrieved.</param>
            <returns>
            Returns an ovrResult indicating success or failure. In the case of failure, use 
            ovr_GetLastErrorInfo to get more information.
            </returns>
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap64.SafeNativeMethods.ovr_CreateTextureSwapChainGL(System.IntPtr,Ab3d.OculusWrap.TextureSwapChainDesc,System.IntPtr@)">
            <summary>
            Creates a TextureSwapChain suitable for use with OpenGL.
            </summary>
            <param name="sessionPtr">Specifies an IntPtr previously returned by ovr_Create.</param>
            <param name="desc">Specifies the requested texture properties. See notes for more info about texture format.</param>
            <param name="out_TextureSwapChain">
            Returns the created IntPtr, which will be valid upon
            a successful return value, else it will be null. This texture swap chain must be eventually
            destroyed via ovr_DestroyTextureSwapChain before destroying the HMD with ovr_Destroy.
            </param>
            <returns>
            Returns an ovrResult indicating success or failure. In the case of failure, use 
            ovr_GetLastErrorInfo to get more information.
            </returns>
            <remarks>
            The format provided should be thought of as the format the distortion compositor will use when reading
            the contents of the texture. To that end, it is highly recommended that the application requests texture swap chain
            formats that are in sRGB-space (e.g. Format.R8G8B8A8_UNORM_SRGB) as the distortion compositor does sRGB-correct
            rendering. Furthermore, the app should then make sure "glEnable(GL_FRAMEBUFFER_SRGB);" is called before rendering
            into these textures. Even though it is not recommended, if the application would like to treat the texture as a linear
            format and do linear-to-gamma conversion in GLSL, then the application can avoid calling "glEnable(GL_FRAMEBUFFER_SRGB);",
            but should still pass in an sRGB variant for the format. Failure to do so will cause the distortion compositor
            to apply incorrect gamma conversions leading to gamma-curve artifacts.		
            </remarks>
            <see cref="M:Ab3d.OculusWrap.OvrWrap64.GetTextureSwapChainLength(System.IntPtr,System.IntPtr,System.Int32@)"/>
            <see cref="M:Ab3d.OculusWrap.OvrWrap64.GetTextureSwapChainCurrentIndex(System.IntPtr,System.IntPtr,System.Int32@)"/>
            <see cref="M:Ab3d.OculusWrap.OvrWrap64.GetTextureSwapChainDesc(System.IntPtr,System.IntPtr,Ab3d.OculusWrap.TextureSwapChainDesc@)"/>
            <see cref="M:Ab3d.OculusWrap.OvrWrap64.GetTextureSwapChainBufferGL(System.IntPtr,System.IntPtr,System.Int32,System.UInt32@)"/>
            <see cref="M:Ab3d.OculusWrap.OvrWrap64.DestroyTextureSwapChain(System.IntPtr,System.IntPtr)"/>
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap64.SafeNativeMethods.ovr_GetTextureSwapChainBufferGL(System.IntPtr,System.IntPtr,System.Int32,System.UInt32@)">
            <summary>
            Get a specific buffer within the chain as a GL texture name
            </summary>
            <param name="sessionPtr">Specifies an IntPtr previously returned by ovr_Create.</param>
            <param name="chain">Specifies an IntPtr previously returned by ovr_CreateTextureSwapChainGL</param>
            <param name="index">
            Specifies the index within the chain to retrieve. Must be between 0 and length (see ovr_GetTextureSwapChainLength)
            or may pass -1 to get the buffer at the CurrentIndex location. (Saving a call to GetTextureSwapChainCurrentIndex)
            </param>
            <param name="out_TexId">Returns the GL texture object name associated with the specific index requested</param>
            <returns>
            Returns an ovrResult indicating success or failure. In the case of failure, use 
            ovr_GetLastErrorInfo to get more information.
            </returns>
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap64.SafeNativeMethods.ovr_CreateMirrorTextureGL(System.IntPtr,Ab3d.OculusWrap.MirrorTextureDesc,System.IntPtr@)">
             <summary>
             Creates a Mirror Texture which is auto-refreshed to mirror Rift contents produced by this application.
            
             A second call to ovr_CreateMirrorTextureGL for a given IntPtr before destroying the first one
             is not supported and will result in an error return.
             </summary>
             <param name="sessionPtr">Specifies an IntPtr previously returned by ovr_Create.</param>
             <param name="desc">Specifies the requested mirror texture description.</param>
             <param name="out_MirrorTexture">
             Specifies the created IntPtr, which will be valid upon a successful return value, else it will be null.
             This texture must be eventually destroyed via ovr_DestroyMirrorTexture before destroying the HMD with ovr_Destroy.
             </param>
             <returns>
             Returns an ovrResult indicating success or failure. In the case of failure, use 
             ovr_GetLastErrorInfo to get more information.
             </returns>
             <remarks>
             The format provided should be thought of as the format the distortion compositor will use when writing into the mirror
             texture. It is highly recommended that mirror textures are requested as sRGB formats because the distortion compositor
             does sRGB-correct rendering. If the application requests a non-sRGB format (e.g. R8G8B8A8_UNORM) as the mirror texture,
             then the application might have to apply a manual linear-to-gamma conversion when reading from the mirror texture.
             Failure to do so can result in incorrect gamma conversions leading to gamma-curve artifacts and color banding.
             </remarks>
             <see cref="M:Ab3d.OculusWrap.OvrWrap64.GetMirrorTextureBufferGL(System.IntPtr,System.IntPtr,System.UInt32@)"/>
             <see cref="M:Ab3d.OculusWrap.OvrWrap64.DestroyMirrorTexture(System.IntPtr,System.IntPtr)"/>
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap64.SafeNativeMethods.ovr_GetMirrorTextureBufferGL(System.IntPtr,System.IntPtr,System.UInt32@)">
            <summary>
            Get a the underlying buffer as a GL texture name
            </summary>
            <param name="sessionPtr">Specifies an IntPtr previously returned by ovr_Create.</param>
            <param name="mirrorTexturePtr">Specifies an IntPtr previously returned by ovr_CreateMirrorTextureGL</param>
            <param name="out_TexId">Specifies the GL texture object name associated with the mirror texture</param>
            <returns>
            Returns an ovrResult indicating success or failure. In the case of failure, use 
            ovr_GetLastErrorInfo to get more information.
            </returns>
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap64.SafeNativeMethods.ovr_IdentifyClient(System.String)">
            <summary>
            Identify client application info.
            </summary>
            <remarks>
            The string is one or more newline-delimited lines of optional info
            indicating engine name, engine version, engine plugin name, engine plugin
            version, engine editor. The order of the lines is not relevant. Individual
            lines are optional. A newline is not necessary at the end of the last line.
            Call after ovr_Initialize and before the first call to ovr_Create.
            Each value is limited to 20 characters. Key names such as 'EngineName:'
            'EngineVersion:' do not count towards this limit.
            </remarks>
            <param name="identity">
            Specifies one or more newline-delimited lines of optional info:<br/>
                        EngineName: %s\n<br/>
                        EngineVersion: %s\n<br/>
                        EnginePluginName: %s\n<br/>
                        EnginePluginVersion: %s\n<br/>
                        EngineEditor: ('true' or 'false')\n
            </param>
            <returns>
            Returns an ovrResult indicating success or failure. In the case of failure, use 
            ovr_GetLastErrorInfo to get more information.
            </returns>
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap64.SafeNativeMethods.ovr_GetTouchHapticsDesc(System.IntPtr,Ab3d.OculusWrap.ControllerType)">
            <summary>
            Gets information about Haptics engine for the specified Touch controller.
            </summary>
            <param name="sessionPtr">Specifies an IntPtr previously returned by ovr_Create.</param>
            <param name="controllerType">The controller to retrieve the information from.</param>
            <returns>
            Returns an TouchHapticsDesc.
            </returns>
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap64.SafeNativeMethods.ovr_SubmitControllerVibration(System.IntPtr,Ab3d.OculusWrap.ControllerType,Ab3d.OculusWrap.HapticsBuffer)">
            <summary>
            Submits a Haptics buffer (used for vibration) to Touch (only) controllers.
            Note: ovr_SubmitControllerVibration cannot be used interchangeably with ovr_SetControllerVibration.
            </summary>
            <param name="sessionPtr">Specifies an IntPtr previously returned by ovr_Create.</param>
            <param name="controllerType">The controller to retrieve the information from.</param>
            <param name="buffer">Haptics buffer containing amplitude samples to be played.</param>
            <returns>
            Returns an ovrResult for which OVR_SUCCESS(result) is false upon error and true
                     upon success. Return values include but aren't limited to:
                 - ovrSuccess: The call succeeded and a result was returned.
                 - ovrSuccess_DeviceUnavailable: The call succeeded but the device referred to by controllerType is not available.
            </returns> 
            <seealso cref="T:Ab3d.OculusWrap.HapticsBuffer"/>       
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap64.SafeNativeMethods.ovr_GetControllerVibrationState(System.IntPtr,Ab3d.OculusWrap.ControllerType,Ab3d.OculusWrap.HapticsPlaybackState@)">
            <summary>
            Gets the Haptics engine playback state of a specific Touch controller.
            </summary>
            <param name="sessionPtr">Specifies an IntPtr previously returned by ovr_Create.</param>
            <param name="controllerType">The controller to retrieve the information from.</param>
            <param name="out_State">State of the haptics engine.</param>
            <returns>
            Returns an ovrResult for which OVR_SUCCESS(result) is false upon error and true
                     upon success. Return values include but aren't limited to:
                 - ovrSuccess: The call succeeded and a result was returned.
                 - ovrSuccess_DeviceUnavailable: The call succeeded but the device referred to by controllerType is not available.
             </returns>   
            <seealso cref="T:Ab3d.OculusWrap.HapticsPlaybackState"/> 
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap64.SafeNativeMethods.ovr_TestBoundary(System.IntPtr,Ab3d.OculusWrap.TrackedDeviceType,Ab3d.OculusWrap.BoundaryType,Ab3d.OculusWrap.BoundaryTestResult@)">
            <summary>
            Tests collision/proximity of position tracked devices (e.g. HMD and/or Touch) against the Boundary System.
            Note: this method is similar to ovr_BoundaryTestPoint but can be more precise as it may take into account device acceleration/momentum.
            </summary>
            <param name="sessionPtr">Specifies an IntPtr previously returned by ovr_Create.</param>
            <param name="deviceBitmask">Bitmask of one or more tracked devices to test.</param>
            <param name="boundaryType">Must be either ovrBoundary_Outer or ovrBoundary_PlayArea.</param>
            <param name="out_TestResult">Result of collision/proximity test, contains information such as distance and closest point.</param>
            <returns>
            Returns an ovrResult for which OVR_SUCCESS(result) is false upon error and true
                    upon success. Return values include but aren't limited to:
                - ovrSuccess: The call succeeded and a result was returned.
                - ovrSuccess_BoundaryInvalid: The call succeeded but the result is not a valid boundary due to not being set up.
                - ovrSuccess_DeviceUnavailable: The call succeeded but the device referred to by deviceBitmask is not available.
            </returns>   
            <seealso cref="T:Ab3d.OculusWrap.BoundaryTestResult"/> 
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap64.SafeNativeMethods.ovr_TestBoundaryPoint(System.IntPtr,Ab3d.OculusWrap.Vector3f@,Ab3d.OculusWrap.BoundaryType,Ab3d.OculusWrap.BoundaryTestResult@)">
            <summary>
            Tests collision/proximity of a 3D point against the Boundary System.
            </summary>
            <param name="sessionPtr">Specifies an IntPtr previously returned by ovr_Create.</param>
            <param name="point">3D point to test.</param>
            <param name="singleBoundaryType">Must be either ovrBoundary_Outer or ovrBoundary_PlayArea to test against</param>
            <param name="out_TestResult">Result of collision/proximity test, contains information such as distance and closest point.</param>
            <returns>
            Returns an ovrResult for which OVR_SUCCESS(result) is false upon error and true
                    upon success. Return values include but aren't limited to:
                - ovrSuccess: The call succeeded and a result was returned.
                - ovrSuccess_BoundaryInvalid: The call succeeded but the result is not a valid boundary due to not being set up.
            </returns>   
            <seealso cref="T:Ab3d.OculusWrap.BoundaryTestResult"/>         
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap64.SafeNativeMethods.ovr_SetBoundaryLookAndFeel(System.IntPtr,Ab3d.OculusWrap.BoundaryLookAndFeel@)">
            <summary>
            Sets the look and feel of the Boundary System.
            </summary>
            <param name="sessionPtr">Specifies an IntPtr previously returned by ovr_Create.</param>
            <param name="lookAndFeel">Look and feel parameters.</param>
            <returns>
            Returns ovrSuccess upon success.
            </returns>   
            <seealso cref="T:Ab3d.OculusWrap.BoundaryLookAndFeel"/>   
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap64.SafeNativeMethods.ovr_ResetBoundaryLookAndFeel(System.IntPtr)">
            <summary>
            Resets the look and feel of the Boundary System to its default state.
            </summary>
            <param name="sessionPtr">Specifies an IntPtr previously returned by ovr_Create.</param>
            <returns>
            Returns ovrSuccess upon success.
            </returns>
            <seealso cref="T:Ab3d.OculusWrap.BoundaryLookAndFeel"/>     
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap64.SafeNativeMethods.ovr_GetBoundaryGeometry(System.IntPtr,Ab3d.OculusWrap.BoundaryType,System.IntPtr,System.Int32@)">
            <summary>
            Gets the geometry of the Boundary System's "play area" or "outer boundary" as 3D floor points.
            </summary>
            <param name="sessionPtr">Specifies an IntPtr previously returned by ovr_Create.</param>
            <param name="boundaryType">Must be either ovrBoundary_Outer or ovrBoundary_PlayArea.</param>
            <param name="out_floorPointPtr">IntPtr to array of 3D points (in clockwise order) defining the boundary at floor height (can be NULL to retrieve only the number of points).</param>
            <param name="out_FloorPointsCount"> Number of 3D points returned in the array.</param>
            <returns>
            Returns an ovrResult for which OVR_SUCCESS(result) is false upon error and true
                    upon success. Return values include but aren't limited to:
                - ovrSuccess: The call succeeded and a result was returned.
                - ovrSuccess_BoundaryInvalid: The call succeeded but the result is not a valid boundary due to not being set up.
            </returns>   
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap64.SafeNativeMethods.ovr_GetBoundaryDimensions(System.IntPtr,Ab3d.OculusWrap.BoundaryType,System.Single[])">
            <summary>
            Gets the dimension of the Boundary System's "play area" or "outer boundary".
            </summary>
            <param name="sessionPtr">Specifies an IntPtr previously returned by ovr_Create.</param>
            <param name="boundaryType">Must be either ovrBoundary_Outer or ovrBoundary_PlayArea.</param>
            <param name="out_Dimensions">Dimensions of the axis aligned bounding box that encloses the area in meters (width, height and length).</param>
            <returns>
            Returns an ovrResult for which OVR_SUCCESS(result) is false upon error and true
                    upon success. Return values include but aren't limited to:
                - ovrSuccess: The call succeeded and a result was returned.
                - ovrSuccess_BoundaryInvalid: The call succeeded but the result is not a valid boundary due to not being set up.
            </returns>   
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap64.SafeNativeMethods.ovr_GetBoundaryVisible(System.IntPtr,System.Byte@)">
            <summary>
            Returns if the boundary is currently visible.
            Note: visibility is false if the user has turned off boundaries, otherwise, it's true if the app has requested 
            boundaries to be visible or if any tracked device is currently triggering it. This may not exactly match rendering 
            due to fade-in and fade-out effects.
            </summary>
            <param name="sessionPtr">Specifies an IntPtr previously returned by ovr_Create.</param>
            <param name="out_IsVisible">ovrTrue, if the boundary is visible.</param>
            <returns>
            Returns an ovrResult for which OVR_SUCCESS(result) is false upon error and true
                    upon success. Return values include but aren't limited to:
                - ovrSuccess: Result was successful and a result was returned.
                - ovrSuccess_BoundaryInvalid: The call succeeded but the result is not a valid boundary due to not being set up.
            </returns>   
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap64.SafeNativeMethods.ovr_RequestBoundaryVisible(System.IntPtr,System.Byte)">
            <summary>
            Requests boundary to be visible.
            </summary>
            <param name="sessionPtr">Specifies an IntPtr previously returned by ovr_Create.</param>
            <param name="visible">forces the outer boundary to be visible. An application can't force it to be invisible, but can cancel its request by passing false.</param>
            <returns>
            Returns ovrSuccess upon success.
            </returns>   
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap64.SafeNativeMethods.ovr_GetPerfStats(System.IntPtr,Ab3d.OculusWrap.PerfStats@)">
             <summary>
             Retrieves performance stats for the VR app as well as the SDK compositor.
            
             If the app calling this function is not the one in focus (i.e. not visible in the HMD), then
             outStats will be zero'd out.
             New stats are populated after each successive call to ovr_SubmitFrame. So the app should call
             this function on the same thread it calls ovr_SubmitFrame, preferably immediately
             afterwards.
             </summary>
             <param name="sessionPtr">Specifies an IntPtr previously returned by ovr_Create.</param>
            <param name="outStats">Contains the performance stats for the application and SDK compositor</param>
            <returns>
             Returns an ovrResult for which OVR_SUCCESS(result) is false upon error and true
                    upon success.
             </returns> 
            <seealso cref="T:Ab3d.OculusWrap.PerfStats"/>  
            <seealso cref="T:Ab3d.OculusWrap.PerfStatsPerCompositorFrame"/>  
            <seealso cref="M:Ab3d.OculusWrap.OvrWrap64.SafeNativeMethods.ovr_ResetPerfStats(System.IntPtr)"/>  
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap64.SafeNativeMethods.ovr_ResetPerfStats(System.IntPtr)">
             <summary>
             Resets the accumulated stats reported in each ovrPerfStatsPerCompositorFrame back to zero.
            
             Only the integer values such as HmdVsyncIndex, AppDroppedFrameCount etc. will be reset
             as the other fields such as AppMotionToPhotonLatency are independent timing values updated
             per-frame.
             </summary>
             <param name="sessionPtr">Specifies an IntPtr previously returned by ovr_Create.</param>
             <returns>
             Returns an ovrResult for which OVR_SUCCESS(result) is false upon error and true
                     upon success.
             </returns>   
             <seealso cref="T:Ab3d.OculusWrap.PerfStats"/>  
             <seealso cref="T:Ab3d.OculusWrap.PerfStatsPerCompositorFrame"/>  
             <seealso cref="M:Ab3d.OculusWrap.OvrWrap64.SafeNativeMethods.ovr_GetPerfStats(System.IntPtr,Ab3d.OculusWrap.PerfStats@)"/>          
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap64.SafeNativeMethods.ovr_GetExternalCameras(System.IntPtr,Ab3d.OculusWrap.ExternalCamera[],System.Int32@)">
            <summary>
            Returns the number of camera properties of all cameras
            </summary>
            <param name="sessionPtr">session Specifies an ovrSession previously returned by ovr_Create.</param>
            <param name="cameras">cameras Pointer to the array. If null and the provided array capacity is sufficient, will return ovrError_NullArrayPointer.</param>
            <param name="inoutCameraCount">inoutCameraCount Supply the array capacity, will return the actual # of cameras defined. If *inoutCameraCount is too small, will return ovrError_InsufficientArraySize.</param>
            <returns>Returns the ids of external cameras the system knows about. Returns ovrError_NoExternalCameraInfo if there is not any eternal camera information.</returns>
        </member>
        <member name="M:Ab3d.OculusWrap.OvrWrap64.SafeNativeMethods.ovr_SetExternalCameraProperties(System.IntPtr,System.String,Ab3d.OculusWrap.CameraIntrinsics@,Ab3d.OculusWrap.CameraExtrinsics@)">
            <summary>
            Sets the camera intrinsics and/or extrinsics stored for the cameraName camera Names must be less then 32 characters and null-terminated.
            </summary>
            <param name="sessionPtr">session Specifies an ovrSession previously returned by ovr_Create.</param>
            <param name="name">Specifies which camera to set the intrinsics or extrinsics for</param>
            <param name="intrinsics">Contains the intrinsic parameters to set, can be null</param>
            <param name="extrinsics">Contains the extrinsic parameters to set, can be null</param>
            <returns>Returns ovrSuccess or an ovrError code</returns>
        </member>
        <member name="T:Ab3d.OculusWrap.PerfHudMode">
            <summary>
            Performance HUD enables the HMD user to see information critical to
            the real-time operation of the VR application such as latency timing,
            and CPU &amp; GPU performance metrics
            </summary>
            <example>
            App can toggle performance HUD modes as such:
            
            PerfHudMode perfHudMode = PerfHudMode.Hud_LatencyTiming;
            ovr_SetInt(Hmd, "PerfHudMode", (int) perfHudMode);
            </example>
        </member>
        <member name="F:Ab3d.OculusWrap.PerfHudMode.PerfSummary">
            <summary>
            Shows performance summary and headroom
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.PerfHudMode.LatencyTiming">
            <summary>
            Shows latency related timing info
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.PerfHudMode.AppRenderTiming">
            <summary>
            Shows render timing info for application
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.PerfHudMode.CompRenderTiming">
            <summary>
            Shows render timing info for OVR compositor
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.PerfHudMode.VersionInfo">
            <summary>
            Shows SDK &amp; HMD version Info
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.PerfHudMode.ovrPerfHud_AswStats">
            <summary>
            Shows Async Spacewarp-specific info
            </summary>
        </member>
        <member name="T:Ab3d.OculusWrap.PerfStats">
            <summary>	
            This is a complete descriptor of the performance stats provided by the SDK
            </summary>	
            <seealso cref="M:Ab3d.OculusWrap.OvrWrap.GetPerfStats(System.IntPtr,Ab3d.OculusWrap.PerfStats@)"/>
            <seealso cref="T:Ab3d.OculusWrap.PerfStatsPerCompositorFrame"/>
        </member>
        <member name="F:Ab3d.OculusWrap.PerfStats.FrameStats">
             <summary>
             FrameStatsCount will have a maximum value set by ovrMaxProvidedFrameStats
             If the application calls ovr_GetPerfStats at the native refresh rate of the HMD
             then FrameStatsCount will be 1. If the app's workload happens to force
             ovr_GetPerfStats to be called at a lower rate, then FrameStatsCount will be 2 or more.
             If the app does not want to miss any performance data for any frame, it needs to
             ensure that it is calling ovr_SubmitFrame and ovr_GetPerfStats at a rate that is at least:
             "HMD_refresh_rate / ovrMaxProvidedFrameStats". On the Oculus Rift CV1 HMD, this will
             be equal to 18 times per second.
            
             The performance entries will be ordered in reverse chronological order such that the
             first entry will be the most recent one.
             </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.PerfStats.FrameStatsCount">
            <summary>
            FrameStatsCount
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.PerfStats.AnyFrameStatsDropped">
            <summary>
            If the app calls ovr_GetPerfStats at less than 18 fps for CV1, then AnyFrameStatsDropped
            will be ovrTrue and FrameStatsCount will be equal to ovrMaxProvidedFrameStats.
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.PerfStats.AdaptiveGpuPerformanceScale">
            <summary>
            AdaptiveGpuPerformanceScale is an edge-filtered value that a caller can use to adjust
            the graphics quality of the application to keep the GPU utilization in check. The value
            is calculated as: (desired_GPU_utilization / current_GPU_utilization)
            As such, when this value is 1.0, the GPU is doing the right amount of work for the app.
            Lower values mean the app needs to pull back on the GPU utilization.
            If the app is going to directly drive render-target resolution using this value, then
            be sure to take the square-root of the value before scaling the resolution with it.
            Changing render target resolutions however is one of the many things an app can do
            increase or decrease the amount of GPU utilization.
            Since AdaptiveGpuPerformanceScale is edge-filtered and does not change rapidly
            (i.e. reports non-1.0 values once every couple of seconds) the app can make the
            necessary adjustments and then keep watching the value to see if it has been satisfied.	
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.PerfStats.AswIsAvailable">
            <summary>
            Will be true if Async Spacewarp (ASW) is available for this system which is dependent on
            several factors such as choice of GPU, OS and debug overrides
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.PerfStats.VisibleProcessId">
            <summary>
            Contains the Process ID of the VR application the stats are being polled for
            If an app continues to grab perf stats even when it is not visible, then expect this
            value to point to the other VR app that has grabbed focus (i.e. became visible)
            </summary>
        </member>
        <member name="T:Ab3d.OculusWrap.PerfStatsPerCompositorFrame">
            <summary>	
            Contains the performance stats for a given SDK compositor frame
            All of the int fields can be reset via the ovr_ResetPerfStats call.
            </summary>	
        </member>
        <member name="F:Ab3d.OculusWrap.PerfStatsPerCompositorFrame.HmdVsyncIndex">
            <summary>	
            Vsync Frame Index - increments with each HMD vertical synchronization signal (i.e. vsync or refresh rate)
            If the compositor drops a frame, expect this value to increment more than 1 at a time.
            </summary>	
        </member>
        <member name="F:Ab3d.OculusWrap.PerfStatsPerCompositorFrame.AppFrameIndex">
            <summary>	
            Index that increments with each successive ovr_SubmitFrame call	
            </summary>	
        </member>
        <member name="F:Ab3d.OculusWrap.PerfStatsPerCompositorFrame.AppDroppedFrameCount">
            <summary>	
            If the app fails to call ovr_SubmitFrame on time, then expect this value to increment with each missed frame
            </summary>	
        </member>
        <member name="F:Ab3d.OculusWrap.PerfStatsPerCompositorFrame.AppMotionToPhotonLatency">
            <summary>	
            Motion-to-photon latency for the application
            This value is calculated by either using the SensorSampleTime provided for the ovrLayerEyeFov or if that
            is not available, then the call to ovr_GetTrackingState which has latencyMarker set to ovrTrue
            </summary>	
        </member>
        <member name="F:Ab3d.OculusWrap.PerfStatsPerCompositorFrame.AppQueueAheadTime">
            <summary>	
            Amount of queue-ahead in seconds provided to the app based on performance and overlap of CPU and GPU utilization
            A value of 0.0 would mean the CPU and GPU workload is being completed in 1 frame's worth of time, while
            11 ms (on the CV1) of queue ahead would indicate that the app's CPU workload for the next frame is
            overlapping the app's GPU workload for the current frame.
            </summary>	
        </member>
        <member name="F:Ab3d.OculusWrap.PerfStatsPerCompositorFrame.AppCpuElapsedTime">
            <summary>	
            Amount of time in seconds spent on the CPU by the app's render-thread that calls ovr_SubmitFrame
            Measured as elapsed time between from when app regains control from ovr_SubmitFrame to the next time the app
            calls ovr_SubmitFrame.
            </summary>	
        </member>
        <member name="F:Ab3d.OculusWrap.PerfStatsPerCompositorFrame.AppGpuElapsedTime">
            <summary>	
            Amount of time in seconds spent on the GPU by the app
            Measured as elapsed time between each ovr_SubmitFrame call using GPU timing queries.	
            </summary>	
        </member>
        <member name="F:Ab3d.OculusWrap.PerfStatsPerCompositorFrame.CompositorFrameIndex">
            <summary>	
            Index that increments each time the SDK compositor completes a distortion and timewarp pass
            Since the compositor operates asynchronously, even if the app calls ovr_SubmitFrame too late,
            the compositor will kick off for each vsync.	
            </summary>	
        </member>
        <member name="F:Ab3d.OculusWrap.PerfStatsPerCompositorFrame.CompositorDroppedFrameCount">
            <summary>	
            Increments each time the SDK compositor fails to complete in time
            This is not tied to the app's performance, but failure to complete can be tied to other factors
            such as OS capabilities, overall available hardware cycles to execute the compositor in time
            and other factors outside of the app's control.	
            </summary>	
        </member>
        <member name="F:Ab3d.OculusWrap.PerfStatsPerCompositorFrame.CompositorLatency">
            <summary>	
            Motion-to-photon latency of the SDK compositor in seconds
            This is the latency of timewarp which corrects the higher app latency as well as dropped app frames.	
            </summary>	
        </member>
        <member name="F:Ab3d.OculusWrap.PerfStatsPerCompositorFrame.CompositorCpuElapsedTime">
            <summary>	
            The amount of time in seconds spent on the CPU by the SDK compositor. Unless the VR app is utilizing
            all of the CPU cores at their peak performance, there is a good chance the compositor CPU times
            will not affect the app's CPU performance in a major way.	
            </summary>	
        </member>
        <member name="F:Ab3d.OculusWrap.PerfStatsPerCompositorFrame.CompositorGpuElapsedTime">
            <summary>	
            The amount of time in seconds spent on the GPU by the SDK compositor. Any time spent on the compositor
            will eat away from the available GPU time for the app.
            </summary>	
        </member>
        <member name="F:Ab3d.OculusWrap.PerfStatsPerCompositorFrame.CompositorCpuStartToGpuEndElapsedTime">
            <summary>	
            The amount of time in seconds spent from the point the CPU kicks off the compositor to the point in time
            the compositor completes the distortion and timewarp on the GPU. In the event the GPU time is not
            available, expect this value to be -1.0f	
            </summary>	
        </member>
        <member name="F:Ab3d.OculusWrap.PerfStatsPerCompositorFrame.CompositorGpuEndToVsyncElapsedTime">
            <summary>	
            The amount of time in seconds left after the compositor is done on the GPU to the associated V-Sync time.
            In the event the GPU time is not available, expect this value to be -1.0f
            </summary>	
        </member>
        <member name="F:Ab3d.OculusWrap.PerfStatsPerCompositorFrame.AswIsActive">
            
             Async Spacewarp stats (ASW)
            
            <summary>	
            Will be true if ASW is active for the given frame such that the application is being forced
            into half the frame-rate while the compositor continues to run at full frame-rate.
            </summary>	
        </member>
        <member name="F:Ab3d.OculusWrap.PerfStatsPerCompositorFrame.AswActivatedToggleCount">
            <summary>	
            Increments each time ASW it activated where the app was forced in and out of
            half-rate rendering.
            </summary>	
        </member>
        <member name="F:Ab3d.OculusWrap.PerfStatsPerCompositorFrame.AswPresentedFrameCount">
            <summary>	
            Accumulates the number of frames presented by the compositor which had extrapolated
            ASW frames presented.
            </summary>	
        </member>
        <member name="F:Ab3d.OculusWrap.PerfStatsPerCompositorFrame.AswFailedFrameCount">
            <summary>	
            Accumulates the number of frames that the compositor tried to present when ASW is
            active but failed.
            </summary>	
        </member>
        <member name="T:Ab3d.OculusWrap.Posef">
            <summary>
            Position and orientation together.
            The coordinate system used is right-handed Cartesian.
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.Posef.Orientation">
            <summary>
            Orientation
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.Posef.Position">
            <summary>
            Position
            </summary>
        </member>
        <member name="T:Ab3d.OculusWrap.PoseStatef">
            <summary>
            A full pose (rigid body) configuration with first and second derivatives.
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.PoseStatef.ThePose">
            <summary>
            Position and orientation.
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.PoseStatef.AngularVelocity">
            <summary>
            Angular velocity in radians per second.
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.PoseStatef.LinearVelocity">
            <summary>
            Velocity in meters per second.
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.PoseStatef.AngularAcceleration">
            <summary>
            Angular acceleration in radians per second per second.
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.PoseStatef.LinearAcceleration">
            <summary>
            Acceleration in meters per second per second.
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.PoseStatef.TimeInSeconds">
            <summary>
            Absolute time that this pose refers to.
            </summary>
            <see cref="M:Ab3d.OculusWrap.OvrWrap.GetTimeInSeconds"/>
        </member>
        <member name="T:Ab3d.OculusWrap.ProjectionModifier">
            <summary>
            Enumerates modifications to the projection matrix based on the application's needs.
            </summary>
            <see cref="M:Ab3d.OculusWrap.OvrWrap.Matrix4f_Projection(Ab3d.OculusWrap.FovPort,System.Single,System.Single,Ab3d.OculusWrap.ProjectionModifier)"/>
        </member>
        <member name="F:Ab3d.OculusWrap.ProjectionModifier.None">
            <summary>
            Use for generating a default projection matrix that is:
            * Right-handed.
            * Near depth values stored in the depth buffer are smaller than far depth values.
            * Both near and far are explicitly defined.
            * With a clipping range that is (0 to w).
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.ProjectionModifier.LeftHanded">
            <summary>
            Enable if using left-handed transformations in your application.
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.ProjectionModifier.FarLessThanNear">
            <summary>
            After the projection transform is applied, far values stored in the depth buffer will be less than closer depth values.
            NOTE: Enable only if the application is using a floating-point depth buffer for proper precision.
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.ProjectionModifier.FarClipAtInfinity">
            <summary>
            When this flag is used, the zfar value pushed into ovrMatrix4f_Projection() will be ignored
            NOTE: Enable only if ovrProjection_FarLessThanNear is also enabled where the far clipping plane will be pushed to infinity.
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.ProjectionModifier.ClipRangeOpenGL">
            <summary>
            Enable if the application is rendering with OpenGL and expects a projection matrix with a clipping range of (-w to w).
            Ignore this flag if your application already handles the conversion from D3D range (0 to w) to OpenGL.
            </summary>
        </member>
        <member name="T:Ab3d.OculusWrap.Quaternionf">
            <summary>
            A quaternion rotation.
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.Quaternionf.X">
            <summary>
            X
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.Quaternionf.Y">
            <summary>
            Y
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.Quaternionf.Z">
            <summary>
            Z
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.Quaternionf.W">
            <summary>
            W
            </summary>
        </member>
        <member name="M:Ab3d.OculusWrap.Quaternionf.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Constructor
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <param name="w"></param>
        </member>
        <member name="T:Ab3d.OculusWrap.Recti">
            <summary>
            A 2D rectangle with a position and size.
            All components are integers.
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.Recti.Position">
            <summary>
            Position
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.Recti.Size">
            <summary>
            Size
            </summary>
        </member>
        <member name="M:Ab3d.OculusWrap.Recti.#ctor(Ab3d.OculusWrap.Vector2i,Ab3d.OculusWrap.Sizei)">
            <summary>
            Constructor
            </summary>
            <param name="position"></param>
            <param name="size"></param>
        </member>
        <member name="T:Ab3d.OculusWrap.Result">
            <summary>
            Result codes, returned by calls to Oculus SDK.
            </summary>
            <remarks>
            Return codes with a value of 0 or greater are consider successful, 
            while return codes with values less than 0 are considered failures.
            </remarks>
        </member>
        <member name="F:Ab3d.OculusWrap.Result.Success">
            <summary>
            This is a general success result. 
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.Result.Success_NotVisible">
            <summary>
            Returned from a call to SubmitFrame. The call succeeded, but what the app
            rendered will not be visible on the HMD. Ideally the app should continue
            calling SubmitFrame, but not do any rendering. When the result becomes
            ovrSuccess, rendering should continue as usual.
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.Result.Success_BoundaryInvalid">
            <summary>
            Boundary is invalid due to sensor change or was not setup.
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.Result.Success_DeviceUnavailable">
            <summary>
            Device is not available for the requested operation.
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.Result.HMDFirmwareMismatchSuccess">
            <summary>
            The HMD Firmware is out of date but is acceptable.
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.Result.TrackerFirmwareMismatchSuccess">
            <summary>
            The Tracker Firmware is out of date but is acceptable.
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.Result.ControllerFirmwareMismatchSuccess">
            <summary>
            The controller firmware is out of date but is acceptable.
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.Result.TrackerDriverNotFound">
            <summary>
            The tracker driver interface was not found. Can be a temporary error
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.Result.MemoryAllocationFailure">
            <summary>
            Failure to allocate memory.
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.Result.SocketCreationFailure">
            <summary>
            Failure to create a socket.
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.Result.InvalidSession">
            <summary>
            Invalid IntPtr parameter provided.
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.Result.Timeout">
            <summary>
            The operation timed out.
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.Result.NotInitialized">
            <summary>
            The system or component has not been initialized.
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.Result.InvalidParameter">
            <summary>
            Invalid parameter provided. See error info or log for details.
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.Result.ServiceError">
            <summary>
            Generic service error. See error info or log for details.
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.Result.NoHmd">
            <summary>
            The given HMD doesn't exist.
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.Result.Unsupported">
            <summary>
            Function call is not supported on this hardware/software
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.Result.DeviceUnavailable">
            <summary>
            Specified device type isn't available.
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.Result.InvalidHeadsetOrientation">
            <summary>
            The headset was in an invalid orientation for the requested operation (e.g. vertically oriented during ovr_RecenterPose).
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.Result.ClientSkippedDestroy">
            <summary>
            The client failed to call ovr_Destroy on an active session before calling ovr_Shutdown. Or the client crashed.
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.Result.ClientSkippedShutdown">
            <summary>
            The client failed to call ovr_Shutdown or the client crashed.
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.Result.ServiceDeadlockDetected">
            <summary>
            The service watchdog discovered a deadlock.
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.Result.InvalidOperation">
            <summary>
            Function call is invalid for object's current state
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.Result.InsufficientArraySize">
            <summary>
            Increase size of output array
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.Result.NoExternalCameraInfo">
            <summary>
            There is not any external camera information stored by ovrServer.
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.Result.LostTracking">
            <summary>
            Tracking is lost when ovr_GetDevicePoses() is called.
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.Result.AudioReservedBegin">
            <summary>
            First Audio error.
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.Result.AudioDeviceNotFound">
            <summary>
            Failure to find the specified audio device.
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.Result.AudioComError">
            <summary>
            Generic COM error.
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.Result.AudioReservedEnd">
            <summary>
            Last Audio error.
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.Result.Initialize">
            <summary>
            Generic initialization error.
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.Result.LibLoad">
            <summary>
            Couldn't load LibOVRRT.
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.Result.LibVersion">
            <summary>
            LibOVRRT version incompatibility.
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.Result.ServiceConnection">
            <summary>
            Couldn't connect to the OVR Service.
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.Result.ServiceVersion">
            <summary>
            OVR Service version incompatibility.
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.Result.IncompatibleOS">
            <summary>
            The operating system version is incompatible.
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.Result.DisplayInit">
            <summary>
            Unable to initialize the HMD display.
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.Result.ServerStart">
            <summary>
            Unable to start the server. Is it already running?
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.Result.Reinitialization">
            <summary>
            Attempting to re-initialize with a different version.
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.Result.MismatchedAdapters">
            <summary>
            Chosen rendering adapters between client and service do not match
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.Result.LeakingResources">
            <summary>
            Calling application has leaked resources
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.Result.ClientVersion">
            <summary>
            Client version too old to connect to service
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.Result.OutOfDateOS">
            <summary>
            The operating system is out of date.
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.Result.OutOfDateGfxDriver">
            <summary>
            The graphics driver is out of date.
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.Result.IncompatibleGPU">
            <summary>
            The graphics hardware is not supported
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.Result.NoValidVRDisplaySystem">
            <summary>
            No valid VR display system found.
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.Result.Obsolete">
            <summary>
            Feature or API is obsolete and no longer supported.
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.Result.DisabledOrDefaultAdapter">
            <summary>
            No supported VR display system found, but disabled or driverless adapter found.
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.Result.HybridGraphicsNotSupported">
            <summary>
            The system is using hybrid graphics (Optimus, etc...), which is not support.
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.Result.DisplayManagerInit">
            <summary>
            Initialization of the DisplayManager failed.
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.Result.TrackerDriverInit">
            <summary>
            Failed to get the interface for an attached tracker
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.Result.LibSignCheck">
            <summary>
            LibOVRRT signature check failure.
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.Result.LibPath">
            <summary>
            LibOVRRT path failure.
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.Result.LibSymbols">
            <summary>
            LibOVRRT symbol resolution failure.
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.Result.RemoteSession">
            <summary>
            Failed to connect to the service because remote connections to the service are not allowed.
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.Result.InitializeVulkan">
            <summary>
            Vulkan initialization error.
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.Result.InvalidBundleAdjustment">
            <summary>
            Headset has no bundle adjustment data.
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.Result.USBBandwidth">
            <summary>
            The USB hub cannot handle the camera frame bandwidth.
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.Result.USBEnumeratedSpeed">
            <summary>
            The USB camera is not enumerating at the correct device speed.
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.Result.ImageSensorCommError">
            <summary>
            Unable to communicate with the image sensor.
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.Result.GeneralTrackerFailure">
            <summary>
            We use this to report various sensor issues that don't fit in an easily classifiable bucket.
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.Result.ExcessiveFrameTruncation">
            <summary>
            A more than acceptable number of frames are coming back truncated.
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.Result.ExcessiveFrameSkipping">
            <summary>
            A more than acceptable number of frames have been skipped.
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.Result.SyncDisconnected">
            <summary>
            The sensor is not receiving the sync signal (cable disconnected?).
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.Result.TrackerMemoryReadFailure">
            <summary>
            Failed to read memory from the sensor.
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.Result.TrackerMemoryWriteFailure">
            <summary>
            Failed to write memory from the sensor.
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.Result.TrackerFrameTimeout">
            <summary>
            Timed out waiting for a camera frame.
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.Result.TrackerTruncatedFrame">
            <summary>
            Truncated frame returned from sensor.
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.Result.TrackerDriverFailure">
            <summary>
            The sensor driver has encountered a problem.
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.Result.TrackerNRFFailure">
            <summary>
            The sensor wireless subsystem has encountered a problem.
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.Result.HardwareGone">
            <summary>
            The hardware has been unplugged
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.Result.NordicEnabledNoSync">
            <summary>
            The nordic indicates that sync is enabled but it is not sending sync pulses
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.Result.NordicSyncNoFrames">
            <summary>
            It looks like we're getting a sync signal, but no camera frames have been received
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.Result.CatastrophicFailure">
            <summary>
            A catastrophic failure has occurred.  We will attempt to recover by resetting the device
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.Result.CatastrophicTimeout">
            <summary>
            The catastrophic recovery has timed out.
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.Result.RepeatCatastrophicFail">
            <summary>
            Catastrophic failure has repeated too many times.
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.Result.USBOpenDeviceFailure">
            <summary>
            Could not open handle for Rift device (likely already in use by another process).
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.Result.HMDGeneralFailure">
            <summary>
            Unexpected HMD issues that don't fit a specific bucket.
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.Result.HMDFirmwareMismatchError">
            <summary>
            The HMD Firmware is out of date and is unacceptable.
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.Result.TrackerFirmwareMismatch">
            <summary>
            The sensor Firmware is out of date and is unacceptable.
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.Result.BootloaderDeviceDetected">
            <summary>
            A bootloader HMD is detected by the service.
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.Result.TrackerCalibrationError">
            <summary>
            The sensor calibration is missing or incorrect.
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.Result.ControllerFirmwareMismatch">
            <summary>
            The controller firmware is out of date and is unacceptable.
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.Result.IMUTooManyLostSamples">
            <summary>
            Too many lost IMU samples.
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.Result.IMURateError">
            <summary>
            IMU rate is outside of the expected range.
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.Result.FeatureReportFailure">
            <summary>
            A feature report has failed.
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.Result.Incomplete">
            <summary>
            Requested async work not yet complete.
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.Result.Abandoned">
            <summary>
            Requested async work was abandoned and result is incomplete.
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.Result.DisplayLost">
            <summary>
            In the event of a system-wide graphics reset or cable unplug this is returned to the app.
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.Result.TextureSwapChainFull">
            <summary>
            ovr_CommitTextureSwapChain was called too many times on a texture swapchain without calling submit to use the chain.
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.Result.TextureSwapChainInvalid">
            <summary>
            The IntPtr is in an incomplete or inconsistent state. Ensure ovr_CommitTextureSwapChain was called at least once first.
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.Result.GraphicsDeviceReset">
            <summary>
            Graphics device has been reset (TDR, etc...)
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.Result.DisplayRemoved">
            <summary>
            HMD removed from the display adapter
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.Result.ContentProtectionNotAvailable">
            <summary>
            Content protection is not available for the display
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.Result.ApplicationInvisible">
            <summary>
            Application declared itself as an invisible type and is not allowed to submit frames.
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.Result.Disallowed">
            <summary>
            The given request is disallowed under the current conditions.
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.Result.DisplayPluggedIncorrectly">
            <summary>
            Display portion of HMD is plugged into an incompatible port (ex: IGP)
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.Result.NoCalibration">
            <summary>
            Result of a missing calibration block
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.Result.OldVersion">
            <summary>
            Result of an old calibration block
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.Result.MisformattedBlock">
            <summary>
            Result of a bad calibration block due to lengths
            </summary>
        </member>
        <member name="T:Ab3d.OculusWrap.SessionStatus">
            <summary>
            Specifies status information for the current session.
            </summary>
            <see cref="M:Ab3d.OculusWrap.OvrWrap.GetSessionStatus(System.IntPtr,Ab3d.OculusWrap.SessionStatus@)"/>
        </member>
        <member name="F:Ab3d.OculusWrap.SessionStatus.IsVisible">
            <summary>
            True if the process has VR focus and thus is visible in the HMD.
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.SessionStatus.HmdPresent">
            <summary>
            True if an HMD is present.
            </summary>       
        </member>
        <member name="F:Ab3d.OculusWrap.SessionStatus.HmdMounted">
            <summary>
            True if the HMD is on the user's head.
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.SessionStatus.DisplayLost">
            <summary>
            True if the session is in a display-lost state. See ovr_SubmitFrame.
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.SessionStatus.ShouldQuit">
            <summary>
            True if the application should initiate shutdown.    
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.SessionStatus.ShouldRecenter">
            <summary>
            True if UX has requested re-centering. 
            Must call ovr_ClearShouldRecenterFlag or ovr_RecenterTrackingOrigin.
            </summary>
        </member>
        <member name="T:Ab3d.OculusWrap.Sizei">
            <summary>
            A 2D size with integer components.
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.Sizei.Width">
            <summary>
            Width
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.Sizei.Height">
            <summary>
            Height
            </summary>
        </member>
        <member name="M:Ab3d.OculusWrap.Sizei.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="T:Ab3d.OculusWrap.StatusBits">
            <summary>
            Bit flags describing the current status of sensor tracking.
            The values must be the same as in enum StatusBits
            </summary>
            <see cref="T:Ab3d.OculusWrap.TrackingState"/>
        </member>
        <member name="F:Ab3d.OculusWrap.StatusBits.None">
            <summary>
            No flags.
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.StatusBits.OrientationTracked">
            <summary>
            Orientation is currently tracked (connected and in use).
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.StatusBits.PositionTracked">
            <summary>
            Position is currently tracked (false if out of range).
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.CameraIntrinsics.LastChangedTime">
            <summary>
            Time in seconds from last change to the parameters
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.CameraIntrinsics.FOVPort">
            <summary>
            Angles of all 4 sides of viewport
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.CameraIntrinsics.VirtualNearPlaneDistanceMeters">
            <summary>
            Near plane of the virtual camera used to match the external camera
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.CameraIntrinsics.VirtualFarPlaneDistanceMeters">
            <summary>
            Far plane of the virtual camera used to match the external camera
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.CameraIntrinsics.ImageSensorPixelResolution">
            <summary>
            Height in pixels of image sensor
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.CameraIntrinsics.LensDistortionMatrix">
            <summary>
            The lens distortion matrix of camera
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.CameraIntrinsics.ExposurePeriodSeconds">
            <summary>
            How often, in seconds, the exposure is taken
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.CameraIntrinsics.ExposureDurationSeconds">
            <summary>
            length of the exposure time
            </summary>
        </member>
        <member name="T:Ab3d.OculusWrap.TextureBindFlags">
             <summary>
             The bindings required for texture swap chain.
            
             All texture swap chains are automatically bindable as shader
             input resources since the Oculus runtime needs this to read them.
             </summary>
             <see cref="T:Ab3d.OculusWrap.TextureSwapChainDesc"/>
        </member>
        <member name="F:Ab3d.OculusWrap.TextureBindFlags.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.TextureBindFlags.DX_RenderTarget">
            <summary>
            The application can write into the chain with pixel shader.
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.TextureBindFlags.DX_UnorderedAccess">
            <summary>
            The application can write to the chain with compute shader.
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.TextureBindFlags.DX_DepthStencil">
            <summary>
            The chain buffers can be bound as depth and/or stencil buffers.
            </summary>
        </member>
        <member name="T:Ab3d.OculusWrap.TextureFormat">
            <summary>
            The format of a texture.
            </summary>
            <see cref="T:Ab3d.OculusWrap.TextureSwapChainDesc"/>
        </member>
        <member name="F:Ab3d.OculusWrap.TextureFormat.Unknown">
            <summary>
            Unknown
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.TextureFormat.B5G6R5_UNorm">
            <summary>
            Not currently supported on PC. Requires a DirectX 11.1 device.
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.TextureFormat.B5G5R5A1_UNorm">
            <summary>
            Not currently supported on PC. Requires a DirectX 11.1 device.
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.TextureFormat.B4G4R4A4_UNorm">
            <summary>
            Not currently supported on PC. Requires a DirectX 11.1 device.
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.TextureFormat.B8G8R8A8_UNorm_SRgb">
            <summary>
            Not supported for OpenGL applications
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.TextureFormat.B8G8R8X8_UNorm">
            <summary>
            Not supported for OpenGL applications
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.TextureFormat.B8G8R8X8_UNorm_SRgb">
            <summary>
            Not supported for OpenGL applications
            </summary>
        </member>
        <member name="T:Ab3d.OculusWrap.TextureMiscFlags">
            <summary>
            Misc flags overriding particular behaviors of a texture swap chain
            </summary>
            <see cref="T:Ab3d.OculusWrap.TextureSwapChainDesc"/>
        </member>
        <member name="F:Ab3d.OculusWrap.TextureMiscFlags.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.TextureMiscFlags.DX_Typeless">
            <summary>
            Vulkan and DX only: The underlying texture is created with a TYPELESS equivalent
            of the format specified in the texture desc. The SDK will still access the
            texture using the format specified in the texture desc, but the app can
            create views with different formats if this is specified.
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.TextureMiscFlags.AllowGenerateMips">
            <summary>
            DX only: Allow generation of the mip chain on the GPU via the GenerateMips
            call. This flag requires that RenderTarget binding also be specified.
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.TextureMiscFlags.ProtectedContent">
            <summary>
            Texture swap chain contains protected content, and requires
            HDCP connection in order to display to HMD. Also prevents
            mirroring or other redirection of any frame containing this contents
            </summary>
        </member>
        <member name="T:Ab3d.OculusWrap.TextureSwapChainDesc">
            <summary>
            Description used to create a texture swap chain.
            </summary>
            <see cref="M:Ab3d.OculusWrap.OvrWrap.CreateTextureSwapChainDX(System.IntPtr,System.IntPtr,Ab3d.OculusWrap.TextureSwapChainDesc@,System.IntPtr@)"/>
            <see cref="M:Ab3d.OculusWrap.OvrWrap.CreateTextureSwapChainGL(System.IntPtr,Ab3d.OculusWrap.TextureSwapChainDesc,System.IntPtr@)"/>
        </member>
        <member name="F:Ab3d.OculusWrap.TextureSwapChainDesc.Type">
            <summary>
            Type
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.TextureSwapChainDesc.Format">
            <summary>
            Format
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.TextureSwapChainDesc.ArraySize">
            <summary>
            Must be 6 for ovrTexture_Cube, 1 for other types.
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.TextureSwapChainDesc.Width">
            <summary>
            Width
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.TextureSwapChainDesc.Height">
            <summary>
            Height
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.TextureSwapChainDesc.MipLevels">
            <summary>
            MipLevels
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.TextureSwapChainDesc.SampleCount">
            <summary>
            Only supported with depth textures
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.TextureSwapChainDesc.StaticImage">
            <summary>
            Not buffered in a chain. For images that don't change
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.TextureSwapChainDesc.MiscFlags">
            <summary>
            ovrTextureMiscFlags
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.TextureSwapChainDesc.BindFlags">
            <summary>
            ovrTextureBindFlags. Not used for GL.
            </summary>
        </member>
        <member name="T:Ab3d.OculusWrap.TextureType">
            <summary>
            The type of texture resource.
            </summary>
            <see cref="T:Ab3d.OculusWrap.TextureSwapChainDesc"/>
        </member>
        <member name="F:Ab3d.OculusWrap.TextureType.Texture2D">
            <summary>
            2D textures.
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.TextureType.Texture2DExternal">
            <summary>
            External 2D texture. 
            
            Not used on PC.
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.TextureType.TextureCube">
            <summary>
            Cube maps. ovrTextureSwapChainDesc::ArraySize must be 6 for this type.
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.TextureType.TextureCount">
            <summary>
            Undocumented.
            </summary>
        </member>
        <member name="T:Ab3d.OculusWrap.TimewarpProjectionDesc">
            <summary>
            Projection information for LayerEyeFovDepth.
            
            Use the utility function ovrTimewarpProjectionDesc_FromProjection to
            generate this structure from the application's projection matrix.
            </summary>
            <see cref="M:Ab3d.OculusWrap.OvrWrap.TimewarpProjectionDesc_FromProjection(Ab3d.OculusWrap.Matrix4f,Ab3d.OculusWrap.ProjectionModifier)"/>
        </member>
        <member name="F:Ab3d.OculusWrap.TimewarpProjectionDesc.Projection22">
            <summary>
            Projection matrix element [2][2].
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.TimewarpProjectionDesc.Projection23">
            <summary>
            Projection matrix element [2][3].
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.TimewarpProjectionDesc.Projection32">
            <summary>
            Projection matrix element [3][2].
            </summary>
        </member>
        <member name="T:Ab3d.OculusWrap.Touch">
            <summary>
            Describes touch input types.
            These values map to capacitive touch values reported ovrInputState::Touch.
            Some of these values are mapped to button bits for consistency.
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.Touch.A">
            <summary>
            A
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.Touch.B">
            <summary>
            B
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.Touch.RThumb">
            <summary>
            RThumb
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.Touch.RThumbRest">
            <summary>
            RThumbRest
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.Touch.RIndexTrigger">
            <summary>
            RIndexTrigger        /// </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.Touch.RButtonMask">
            <summary>
            Bit mask of all the button touches on the right controller
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.Touch.X">
            <summary>
            X
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.Touch.Y">
            <summary>
            Y
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.Touch.LThumb">
            <summary>
            LThumb
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.Touch.LThumbRest">
            <summary>
            LThumbRest
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.Touch.LIndexTrigger">
            <summary>
            LIndexTrigger
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.Touch.LButtonMask">
            <summary>
            Bit mask of all the button touches on the left controller
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.Touch.RIndexPointing">
            <summary>
            RIndexPointing
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.Touch.RThumbUp">
            <summary>
            RThumbUp
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.Touch.RPoseMask">
            <summary>
            Bit mask of all right controller poses
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.Touch.LIndexPointing">
            <summary>
            LIndexPointing
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.Touch.LThumbUp">
            <summary>
            LThumbUp
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.Touch.LPoseMask">
            <summary>
            Bit mask of all left controller poses
            </summary>
        </member>
        <member name="T:Ab3d.OculusWrap.TouchHapticsDesc">
            <summary>	
            Describes the Touch Haptics engine.
            Currently, those values will NOT change during a session.
            </summary>	
        </member>
        <member name="F:Ab3d.OculusWrap.TouchHapticsDesc.SampleRateHz">
            <summary>
            Haptics engine frequency/sample-rate, sample time in seconds equals 1.0/sampleRateHz
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.TouchHapticsDesc.SampleSizeInBytes">
            <summary>
            Size of each Haptics sample, sample value range is [0, 2^(Bytes*8)-1]
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.TouchHapticsDesc.QueueMinSizeToAvoidStarvation">
            <summary>
            Queue size that would guarantee Haptics engine would not starve for data.
            Make sure size doesn't drop below it for best results.
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.TouchHapticsDesc.SubmitMinSamples">
            <summary>
            Minimum number of samples that can be sent to Haptics through ovr_SubmitControllerVibration
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.TouchHapticsDesc.SubmitMaxSamples">
            <summary>
            Maximum number of samples that can be sent to Haptics through ovr_SubmitControllerVibration
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.TouchHapticsDesc.SubmitOptimalSamples">
            <summary>
            Optimal number of samples that can be sent to Haptics through ovr_SubmitControllerVibration
            </summary>
        </member>
        <member name="T:Ab3d.OculusWrap.TrackedDeviceType">
            <summary>	
            Position tracked devices
            </summary>	
        </member>
        <member name="F:Ab3d.OculusWrap.TrackedDeviceType.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.TrackedDeviceType.HMD">
            <summary>
            HMD
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.TrackedDeviceType.LTouch">
            <summary>
            LTouch
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.TrackedDeviceType.RTouch">
            <summary>
            RTouch
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.TrackedDeviceType.Touch">
            <summary>
            Touch
            </summary>
        </member>
        <member name="T:Ab3d.OculusWrap.TrackerDesc">
            <summary>
            Specifies the description of a single sensor.
            </summary>
            <see cref="M:Ab3d.OculusWrap.OvrWrap.GetTrackerDesc(System.IntPtr,System.UInt32)"/>
        </member>
        <member name="F:Ab3d.OculusWrap.TrackerDesc.FrustumHFovInRadians">
            <summary>
            Sensor frustum horizontal field-of-view (if present).
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.TrackerDesc.FrustumVFovInRadians">
            <summary>
            Sensor frustum vertical field-of-view (if present).
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.TrackerDesc.FrustumNearZInMeters">
            <summary>
            Sensor frustum near Z (if present).
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.TrackerDesc.FrustumFarZInMeters">
            <summary>
            Sensor frustum far Z (if present).
            </summary>
        </member>
        <member name="T:Ab3d.OculusWrap.TrackerFlags">
            <summary>
            Specifies sensor flags.
            </summary>
            <see cref="T:Ab3d.OculusWrap.TrackerPose"/>
        </member>
        <member name="F:Ab3d.OculusWrap.TrackerFlags.None">
            <summary>
            No flags.
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.TrackerFlags.Connected">
            <summary>
            The sensor is present, else the sensor is absent or offline.
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.TrackerFlags.PoseTracked">
            <summary>
            The sensor has a valid pose, else the pose is unavailable. 
            This will only be set if TrackerFlags.Connected is set.
            </summary>
        </member>
        <member name="T:Ab3d.OculusWrap.TrackerPose">
            <summary>
            Specifies the pose for a single sensor.
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.TrackerPose.TrackerFlags">
            <summary>
            TrackerFlags
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.TrackerPose.Pose">
            <summary>
            The sensor's pose. This pose includes sensor tilt (roll and pitch). 
            For a leveled coordinate system use LeveledPose.
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.TrackerPose.LeveledPose">
            <summary>
            The sensor's leveled pose, aligned with gravity. 
            This value includes position and yaw of the sensor, but not roll and pitch. It can be used as a reference point to render real-world objects in the correct location.
            </summary>
        </member>
        <member name="T:Ab3d.OculusWrap.TrackingCaps">
            <summary>
            Tracking capability bits reported by the device.
            Used with ovr_GetTrackingCaps.
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.TrackingCaps.None">
            <summary>
            No flags.
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.TrackingCaps.Orientation">
            <summary>
            Supports orientation tracking (IMU).
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.TrackingCaps.MagYawCorrection">
            <summary>
            Supports yaw drift correction via a magnetometer or other means.
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.TrackingCaps.Position">
            <summary>
            Supports positional tracking.
            </summary>
        </member>
        <member name="T:Ab3d.OculusWrap.TrackingOrigin">
            <summary>
            Specifies the coordinate system TrackingState returns tracking poses in.
            Used with ovr_SetTrackingOriginType()
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.TrackingOrigin.EyeLevel">
            <summary>
            Tracking system origin reported at eye (HMD) height
            
            Prefer using this origin when your application requires
            matching user's current physical head pose to a virtual head pose
            without any regards to a the height of the floor. Cockpit-based,
            or 3rd-person experiences are ideal candidates.
            
            When used, all poses in TrackingState are reported as an offset
            transform from the profile calibrated or recentered HMD pose.
            It is recommended that apps using this origin type call ovr_RecenterTrackingOrigin
            prior to starting the VR experience, but notify the user before doing so
            to make sure the user is in a comfortable pose, facing a comfortable
            direction.
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.TrackingOrigin.FloorLevel">
            <summary>
            Tracking system origin reported at floor height
            
            Prefer using this origin when your application requires the
            physical floor height to match the virtual floor height, such as
            standing experiences.
            
            When used, all poses in TrackingState are reported as an offset
            transform from the profile calibrated floor pose. Calling ovr_RecenterTrackingOrigin
            will recenter the X &amp; Z axes as well as yaw, but the Y-axis (i.e. height) will continue
            to be reported using the floor height as the origin for all poses.
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.TrackingOrigin.Count">
            <summary>
            Count of enumerated elements.
            </summary>
        </member>
        <member name="T:Ab3d.OculusWrap.TrackingState">
            <summary>
            Tracking state at a given absolute time (describes predicted HMD pose etc).
            Returned by ovr_GetTrackingState.
            <see cref="M:Ab3d.OculusWrap.OvrWrap.GetTrackingState(System.IntPtr,System.Double,System.Boolean)"/>
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.TrackingState.HeadPose">
            <summary>
            Predicted head pose (and derivatives) at the requested absolute time.
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.TrackingState.StatusFlags">
            <summary>
            HeadPose tracking status described by StatusBits.
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.TrackingState.HandPoses">
            <summary>
            The most recent calculated pose for each hand when hand controller tracking is present.
            HandPoses[ovrHand_Left] refers to the left hand and HandPoses[ovrHand_Right] to the right hand.
            These values can be combined with ovrInputState for complete hand controller information.
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.TrackingState.HandStatusFlags">
            <summary>
            HandPoses status flags described by StatusBits.
            Only OrientationTracked and PositionTracked are reported.
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.TrackingState.CalibratedOrigin">
            <summary>
            The pose of the origin captured during calibration.
            Like all other poses here, this is expressed in the space set by ovr_RecenterTrackingOrigin,
            or ovr_SpecifyTrackingOrigin and so will change every time either of those functions are
            called. This pose can be used to calculate where the calibrated origin lands in the new
            recentered space. If an application never calls ovr_RecenterTrackingOrigin or
            ovr_SpecifyTrackingOrigin, expect this value to be the identity pose and as such will point
            respective origin based on ovrTrackingOrigin requested when calling ovr_GetTrackingState.
            </summary>
        </member>
        <member name="T:Ab3d.OculusWrap.Vector2f">
            <summary>
            A 2D vector with float components.
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.Vector2f.X">
            <summary>
            X
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.Vector2f.Y">
            <summary>
            Y
            </summary>
        </member>
        <member name="M:Ab3d.OculusWrap.Vector2f.#ctor(System.Single,System.Single)">
            <summary>
            Constructor
            </summary>
            <param name="x">x</param>
            <param name="y">y</param>
        </member>
        <member name="T:Ab3d.OculusWrap.Vector2i">
            <summary>
            A 2D vector with integer components.
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.Vector2i.X">
            <summary>
            X
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.Vector2i.Y">
            <summary>
            Y
            </summary>
        </member>
        <member name="M:Ab3d.OculusWrap.Vector2i.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="x">x</param>
            <param name="y">y</param>
        </member>
        <member name="T:Ab3d.OculusWrap.Vector3f">
            <summary>
            A 3D vector with float components.
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.Vector3f.X">
            <summary>
            X
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.Vector3f.Y">
            <summary>
            Y
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.Vector3f.Z">
            <summary>
            Z
            </summary>
        </member>
        <member name="M:Ab3d.OculusWrap.Vector3f.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Constructor
            </summary>
            <param name="x">x</param>
            <param name="y">y</param>
            <param name="z">z</param>
        </member>
        <member name="T:Ab3d.OculusWrap.ViewScaleDesc">
            <summary>
            Contains the data necessary to properly calculate position info for various layer types.<br/>
            - HmdToEyePose is the same value pair provided in ovrEyeRenderDesc.<br/>
            - HmdSpaceToWorldScaleInMeters is used to scale player motion into in-application units.<br/>
              In other words, it is how big an in-application unit is in the player's physical meters.
              For example, if the application uses inches as its units then HmdSpaceToWorldScaleInMeters
              would be 0.0254.<br/>
              Note that if you are scaling the player in size, this must also scale. So if your application
              units are inches, but you're shrinking the player to half their normal size, then
              HmdSpaceToWorldScaleInMeters would be 0.0254*2.0.
            <seealso cref="T:Ab3d.OculusWrap.EyeRenderDesc"/>, OvrWrap.SubmitFrame
            </summary>
            <see cref="T:Ab3d.OculusWrap.EyeRenderDesc"/>
            <see cref="M:Ab3d.OculusWrap.OvrWrap.SubmitFrame(System.IntPtr,System.Int64,System.IntPtr,Ab3d.OculusWrap.LayerEyeFov@)"/>
            <see cref="M:Ab3d.OculusWrap.OvrWrap.SubmitFrame(System.IntPtr,System.Int64,System.IntPtr,System.IntPtr,System.Int32)"/>
        </member>
        <member name="F:Ab3d.OculusWrap.ViewScaleDesc.HmdToEyePose0">
            <summary>
            Transform of first eye from the HMD center, in meters.
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.ViewScaleDesc.HmdToEyePose1">
            <summary>
            Transform of second eye from the HMD center, in meters.
            </summary>
        </member>
        <member name="F:Ab3d.OculusWrap.ViewScaleDesc.HmdSpaceToWorldScaleInMeters">
            <summary>
            Ratio of viewer units to meter units.
            
            Used to scale player motion into in-application units.
            In other words, it is how big an in-application unit is in the player's physical meters.
            For example, if the application uses inches as its units then HmdSpaceToWorldScaleInMeters would be 0.0254.
            Note that if you are scaling the player in size, this must also scale. So if your application
            units are inches, but you're shrinking the player to half their normal size, then
            HmdSpaceToWorldScaleInMeters would be 0.0254*2.0.
            </summary>
        </member>
    </members>
</doc>
